/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thxsoft.vds.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ClientContextMap implements org.apache.thrift.TBase<ClientContextMap, ClientContextMap._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClientContextMap");

  private static final org.apache.thrift.protocol.TField CONTEXT_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("contextMap", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ClientContextMapStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ClientContextMapTupleSchemeFactory());
  }

  public Map<Long,ClientContextData> contextMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTEXT_MAP((short)1, "contextMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTEXT_MAP
          return CONTEXT_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTEXT_MAP, new org.apache.thrift.meta_data.FieldMetaData("contextMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64            , "ContextID"), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClientContextData.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClientContextMap.class, metaDataMap);
  }

  public ClientContextMap() {
  }

  public ClientContextMap(
    Map<Long,ClientContextData> contextMap)
  {
    this();
    this.contextMap = contextMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClientContextMap(ClientContextMap other) {
    if (other.isSetContextMap()) {
      Map<Long,ClientContextData> __this__contextMap = new HashMap<Long,ClientContextData>();
      for (Map.Entry<Long, ClientContextData> other_element : other.contextMap.entrySet()) {

        Long other_element_key = other_element.getKey();
        ClientContextData other_element_value = other_element.getValue();

        Long __this__contextMap_copy_key = other_element_key;

        ClientContextData __this__contextMap_copy_value = new ClientContextData(other_element_value);

        __this__contextMap.put(__this__contextMap_copy_key, __this__contextMap_copy_value);
      }
      this.contextMap = __this__contextMap;
    }
  }

  public ClientContextMap deepCopy() {
    return new ClientContextMap(this);
  }

  @Override
  public void clear() {
    this.contextMap = null;
  }

  public int getContextMapSize() {
    return (this.contextMap == null) ? 0 : this.contextMap.size();
  }

  public void putToContextMap(long key, ClientContextData val) {
    if (this.contextMap == null) {
      this.contextMap = new HashMap<Long,ClientContextData>();
    }
    this.contextMap.put(key, val);
  }

  public Map<Long,ClientContextData> getContextMap() {
    return this.contextMap;
  }

  public ClientContextMap setContextMap(Map<Long,ClientContextData> contextMap) {
    this.contextMap = contextMap;
    return this;
  }

  public void unsetContextMap() {
    this.contextMap = null;
  }

  /** Returns true if field contextMap is set (has been assigned a value) and false otherwise */
  public boolean isSetContextMap() {
    return this.contextMap != null;
  }

  public void setContextMapIsSet(boolean value) {
    if (!value) {
      this.contextMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTEXT_MAP:
      if (value == null) {
        unsetContextMap();
      } else {
        setContextMap((Map<Long,ClientContextData>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTEXT_MAP:
      return getContextMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTEXT_MAP:
      return isSetContextMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ClientContextMap)
      return this.equals((ClientContextMap)that);
    return false;
  }

  public boolean equals(ClientContextMap that) {
    if (that == null)
      return false;

    boolean this_present_contextMap = true && this.isSetContextMap();
    boolean that_present_contextMap = true && that.isSetContextMap();
    if (this_present_contextMap || that_present_contextMap) {
      if (!(this_present_contextMap && that_present_contextMap))
        return false;
      if (!this.contextMap.equals(that.contextMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ClientContextMap other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ClientContextMap typedOther = (ClientContextMap)other;

    lastComparison = Boolean.valueOf(isSetContextMap()).compareTo(typedOther.isSetContextMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContextMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contextMap, typedOther.contextMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ClientContextMap(");
    boolean first = true;

    sb.append("contextMap:");
    if (this.contextMap == null) {
      sb.append("null");
    } else {
      sb.append(this.contextMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClientContextMapStandardSchemeFactory implements SchemeFactory {
    public ClientContextMapStandardScheme getScheme() {
      return new ClientContextMapStandardScheme();
    }
  }

  private static class ClientContextMapStandardScheme extends StandardScheme<ClientContextMap> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ClientContextMap struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTEXT_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map80 = iprot.readMapBegin();
                struct.contextMap = new HashMap<Long,ClientContextData>(2*_map80.size);
                for (int _i81 = 0; _i81 < _map80.size; ++_i81)
                {
                  long _key82; // required
                  ClientContextData _val83; // required
                  _key82 = iprot.readI64();
                  _val83 = new ClientContextData();
                  _val83.read(iprot);
                  struct.contextMap.put(_key82, _val83);
                }
                iprot.readMapEnd();
              }
              struct.setContextMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ClientContextMap struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.contextMap != null) {
        oprot.writeFieldBegin(CONTEXT_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.contextMap.size()));
          for (Map.Entry<Long, ClientContextData> _iter84 : struct.contextMap.entrySet())
          {
            oprot.writeI64(_iter84.getKey());
            _iter84.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClientContextMapTupleSchemeFactory implements SchemeFactory {
    public ClientContextMapTupleScheme getScheme() {
      return new ClientContextMapTupleScheme();
    }
  }

  private static class ClientContextMapTupleScheme extends TupleScheme<ClientContextMap> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ClientContextMap struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetContextMap()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetContextMap()) {
        {
          oprot.writeI32(struct.contextMap.size());
          for (Map.Entry<Long, ClientContextData> _iter85 : struct.contextMap.entrySet())
          {
            oprot.writeI64(_iter85.getKey());
            _iter85.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ClientContextMap struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map86 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.contextMap = new HashMap<Long,ClientContextData>(2*_map86.size);
          for (int _i87 = 0; _i87 < _map86.size; ++_i87)
          {
            long _key88; // required
            ClientContextData _val89; // required
            _key88 = iprot.readI64();
            _val89 = new ClientContextData();
            _val89.read(iprot);
            struct.contextMap.put(_key88, _val89);
          }
        }
        struct.setContextMapIsSet(true);
      }
    }
  }

}

