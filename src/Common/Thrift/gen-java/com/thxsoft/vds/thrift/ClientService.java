/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thxsoft.vds.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ClientService {

  public interface Iface {

    public void notifyFriendApproval(UserProfile profile) throws org.apache.thrift.TException;

    public void notifyContextInviteApproval(long cid, UserProfile profile) throws org.apache.thrift.TException;

    public void receiveData(ByteBuffer data) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void notifyFriendApproval(UserProfile profile, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.notifyFriendApproval_call> resultHandler) throws org.apache.thrift.TException;

    public void notifyContextInviteApproval(long cid, UserProfile profile, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.notifyContextInviteApproval_call> resultHandler) throws org.apache.thrift.TException;

    public void receiveData(ByteBuffer data, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.receiveData_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void notifyFriendApproval(UserProfile profile) throws org.apache.thrift.TException
    {
      send_notifyFriendApproval(profile);
    }

    public void send_notifyFriendApproval(UserProfile profile) throws org.apache.thrift.TException
    {
      notifyFriendApproval_args args = new notifyFriendApproval_args();
      args.setProfile(profile);
      sendBase("notifyFriendApproval", args);
    }

    public void notifyContextInviteApproval(long cid, UserProfile profile) throws org.apache.thrift.TException
    {
      send_notifyContextInviteApproval(cid, profile);
    }

    public void send_notifyContextInviteApproval(long cid, UserProfile profile) throws org.apache.thrift.TException
    {
      notifyContextInviteApproval_args args = new notifyContextInviteApproval_args();
      args.setCid(cid);
      args.setProfile(profile);
      sendBase("notifyContextInviteApproval", args);
    }

    public void receiveData(ByteBuffer data) throws org.apache.thrift.TException
    {
      send_receiveData(data);
    }

    public void send_receiveData(ByteBuffer data) throws org.apache.thrift.TException
    {
      receiveData_args args = new receiveData_args();
      args.setData(data);
      sendBase("receiveData", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void notifyFriendApproval(UserProfile profile, org.apache.thrift.async.AsyncMethodCallback<notifyFriendApproval_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      notifyFriendApproval_call method_call = new notifyFriendApproval_call(profile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class notifyFriendApproval_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UserProfile profile;
      public notifyFriendApproval_call(UserProfile profile, org.apache.thrift.async.AsyncMethodCallback<notifyFriendApproval_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.profile = profile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("notifyFriendApproval", org.apache.thrift.protocol.TMessageType.CALL, 0));
        notifyFriendApproval_args args = new notifyFriendApproval_args();
        args.setProfile(profile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void notifyContextInviteApproval(long cid, UserProfile profile, org.apache.thrift.async.AsyncMethodCallback<notifyContextInviteApproval_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      notifyContextInviteApproval_call method_call = new notifyContextInviteApproval_call(cid, profile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class notifyContextInviteApproval_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long cid;
      private UserProfile profile;
      public notifyContextInviteApproval_call(long cid, UserProfile profile, org.apache.thrift.async.AsyncMethodCallback<notifyContextInviteApproval_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.cid = cid;
        this.profile = profile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("notifyContextInviteApproval", org.apache.thrift.protocol.TMessageType.CALL, 0));
        notifyContextInviteApproval_args args = new notifyContextInviteApproval_args();
        args.setCid(cid);
        args.setProfile(profile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void receiveData(ByteBuffer data, org.apache.thrift.async.AsyncMethodCallback<receiveData_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      receiveData_call method_call = new receiveData_call(data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class receiveData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer data;
      public receiveData_call(ByteBuffer data, org.apache.thrift.async.AsyncMethodCallback<receiveData_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("receiveData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        receiveData_args args = new receiveData_args();
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("notifyFriendApproval", new notifyFriendApproval());
      processMap.put("notifyContextInviteApproval", new notifyContextInviteApproval());
      processMap.put("receiveData", new receiveData());
      return processMap;
    }

    public static class notifyFriendApproval<I extends Iface> extends org.apache.thrift.ProcessFunction<I, notifyFriendApproval_args> {
      public notifyFriendApproval() {
        super("notifyFriendApproval");
      }

      public notifyFriendApproval_args getEmptyArgsInstance() {
        return new notifyFriendApproval_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, notifyFriendApproval_args args) throws org.apache.thrift.TException {
        iface.notifyFriendApproval(args.profile);
        return null;
      }
    }

    public static class notifyContextInviteApproval<I extends Iface> extends org.apache.thrift.ProcessFunction<I, notifyContextInviteApproval_args> {
      public notifyContextInviteApproval() {
        super("notifyContextInviteApproval");
      }

      public notifyContextInviteApproval_args getEmptyArgsInstance() {
        return new notifyContextInviteApproval_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, notifyContextInviteApproval_args args) throws org.apache.thrift.TException {
        iface.notifyContextInviteApproval(args.cid, args.profile);
        return null;
      }
    }

    public static class receiveData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, receiveData_args> {
      public receiveData() {
        super("receiveData");
      }

      public receiveData_args getEmptyArgsInstance() {
        return new receiveData_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, receiveData_args args) throws org.apache.thrift.TException {
        iface.receiveData(args.data);
        return null;
      }
    }

  }

  public static class notifyFriendApproval_args implements org.apache.thrift.TBase<notifyFriendApproval_args, notifyFriendApproval_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyFriendApproval_args");

    private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("profile", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifyFriendApproval_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifyFriendApproval_argsTupleSchemeFactory());
    }

    public UserProfile profile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE((short)1, "profile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE
            return PROFILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("profile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserProfile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyFriendApproval_args.class, metaDataMap);
    }

    public notifyFriendApproval_args() {
    }

    public notifyFriendApproval_args(
      UserProfile profile)
    {
      this();
      this.profile = profile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyFriendApproval_args(notifyFriendApproval_args other) {
      if (other.isSetProfile()) {
        this.profile = new UserProfile(other.profile);
      }
    }

    public notifyFriendApproval_args deepCopy() {
      return new notifyFriendApproval_args(this);
    }

    @Override
    public void clear() {
      this.profile = null;
    }

    public UserProfile getProfile() {
      return this.profile;
    }

    public notifyFriendApproval_args setProfile(UserProfile profile) {
      this.profile = profile;
      return this;
    }

    public void unsetProfile() {
      this.profile = null;
    }

    /** Returns true if field profile is set (has been assigned a value) and false otherwise */
    public boolean isSetProfile() {
      return this.profile != null;
    }

    public void setProfileIsSet(boolean value) {
      if (!value) {
        this.profile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE:
        if (value == null) {
          unsetProfile();
        } else {
          setProfile((UserProfile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE:
        return getProfile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE:
        return isSetProfile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyFriendApproval_args)
        return this.equals((notifyFriendApproval_args)that);
      return false;
    }

    public boolean equals(notifyFriendApproval_args that) {
      if (that == null)
        return false;

      boolean this_present_profile = true && this.isSetProfile();
      boolean that_present_profile = true && that.isSetProfile();
      if (this_present_profile || that_present_profile) {
        if (!(this_present_profile && that_present_profile))
          return false;
        if (!this.profile.equals(that.profile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(notifyFriendApproval_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      notifyFriendApproval_args typedOther = (notifyFriendApproval_args)other;

      lastComparison = Boolean.valueOf(isSetProfile()).compareTo(typedOther.isSetProfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, typedOther.profile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifyFriendApproval_args(");
      boolean first = true;

      sb.append("profile:");
      if (this.profile == null) {
        sb.append("null");
      } else {
        sb.append(this.profile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (profile != null) {
        profile.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyFriendApproval_argsStandardSchemeFactory implements SchemeFactory {
      public notifyFriendApproval_argsStandardScheme getScheme() {
        return new notifyFriendApproval_argsStandardScheme();
      }
    }

    private static class notifyFriendApproval_argsStandardScheme extends StandardScheme<notifyFriendApproval_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyFriendApproval_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.profile = new UserProfile();
                struct.profile.read(iprot);
                struct.setProfileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyFriendApproval_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profile != null) {
          oprot.writeFieldBegin(PROFILE_FIELD_DESC);
          struct.profile.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyFriendApproval_argsTupleSchemeFactory implements SchemeFactory {
      public notifyFriendApproval_argsTupleScheme getScheme() {
        return new notifyFriendApproval_argsTupleScheme();
      }
    }

    private static class notifyFriendApproval_argsTupleScheme extends TupleScheme<notifyFriendApproval_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyFriendApproval_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfile()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfile()) {
          struct.profile.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyFriendApproval_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.profile = new UserProfile();
          struct.profile.read(iprot);
          struct.setProfileIsSet(true);
        }
      }
    }

  }

  public static class notifyContextInviteApproval_args implements org.apache.thrift.TBase<notifyContextInviteApproval_args, notifyContextInviteApproval_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyContextInviteApproval_args");

    private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("profile", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifyContextInviteApproval_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifyContextInviteApproval_argsTupleSchemeFactory());
    }

    public long cid; // required
    public UserProfile profile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CID((short)1, "cid"),
      PROFILE((short)2, "profile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CID
            return CID;
          case 2: // PROFILE
            return PROFILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "ContextID")));
      tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("profile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserProfile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyContextInviteApproval_args.class, metaDataMap);
    }

    public notifyContextInviteApproval_args() {
    }

    public notifyContextInviteApproval_args(
      long cid,
      UserProfile profile)
    {
      this();
      this.cid = cid;
      setCidIsSet(true);
      this.profile = profile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyContextInviteApproval_args(notifyContextInviteApproval_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cid = other.cid;
      if (other.isSetProfile()) {
        this.profile = new UserProfile(other.profile);
      }
    }

    public notifyContextInviteApproval_args deepCopy() {
      return new notifyContextInviteApproval_args(this);
    }

    @Override
    public void clear() {
      setCidIsSet(false);
      this.cid = 0;
      this.profile = null;
    }

    public long getCid() {
      return this.cid;
    }

    public notifyContextInviteApproval_args setCid(long cid) {
      this.cid = cid;
      setCidIsSet(true);
      return this;
    }

    public void unsetCid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
    }

    /** Returns true if field cid is set (has been assigned a value) and false otherwise */
    public boolean isSetCid() {
      return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
    }

    public void setCidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
    }

    public UserProfile getProfile() {
      return this.profile;
    }

    public notifyContextInviteApproval_args setProfile(UserProfile profile) {
      this.profile = profile;
      return this;
    }

    public void unsetProfile() {
      this.profile = null;
    }

    /** Returns true if field profile is set (has been assigned a value) and false otherwise */
    public boolean isSetProfile() {
      return this.profile != null;
    }

    public void setProfileIsSet(boolean value) {
      if (!value) {
        this.profile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CID:
        if (value == null) {
          unsetCid();
        } else {
          setCid((Long)value);
        }
        break;

      case PROFILE:
        if (value == null) {
          unsetProfile();
        } else {
          setProfile((UserProfile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CID:
        return Long.valueOf(getCid());

      case PROFILE:
        return getProfile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CID:
        return isSetCid();
      case PROFILE:
        return isSetProfile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyContextInviteApproval_args)
        return this.equals((notifyContextInviteApproval_args)that);
      return false;
    }

    public boolean equals(notifyContextInviteApproval_args that) {
      if (that == null)
        return false;

      boolean this_present_cid = true;
      boolean that_present_cid = true;
      if (this_present_cid || that_present_cid) {
        if (!(this_present_cid && that_present_cid))
          return false;
        if (this.cid != that.cid)
          return false;
      }

      boolean this_present_profile = true && this.isSetProfile();
      boolean that_present_profile = true && that.isSetProfile();
      if (this_present_profile || that_present_profile) {
        if (!(this_present_profile && that_present_profile))
          return false;
        if (!this.profile.equals(that.profile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(notifyContextInviteApproval_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      notifyContextInviteApproval_args typedOther = (notifyContextInviteApproval_args)other;

      lastComparison = Boolean.valueOf(isSetCid()).compareTo(typedOther.isSetCid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, typedOther.cid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProfile()).compareTo(typedOther.isSetProfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, typedOther.profile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifyContextInviteApproval_args(");
      boolean first = true;

      sb.append("cid:");
      sb.append(this.cid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("profile:");
      if (this.profile == null) {
        sb.append("null");
      } else {
        sb.append(this.profile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (profile != null) {
        profile.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyContextInviteApproval_argsStandardSchemeFactory implements SchemeFactory {
      public notifyContextInviteApproval_argsStandardScheme getScheme() {
        return new notifyContextInviteApproval_argsStandardScheme();
      }
    }

    private static class notifyContextInviteApproval_argsStandardScheme extends StandardScheme<notifyContextInviteApproval_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyContextInviteApproval_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.cid = iprot.readI64();
                struct.setCidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.profile = new UserProfile();
                struct.profile.read(iprot);
                struct.setProfileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyContextInviteApproval_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI64(struct.cid);
        oprot.writeFieldEnd();
        if (struct.profile != null) {
          oprot.writeFieldBegin(PROFILE_FIELD_DESC);
          struct.profile.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyContextInviteApproval_argsTupleSchemeFactory implements SchemeFactory {
      public notifyContextInviteApproval_argsTupleScheme getScheme() {
        return new notifyContextInviteApproval_argsTupleScheme();
      }
    }

    private static class notifyContextInviteApproval_argsTupleScheme extends TupleScheme<notifyContextInviteApproval_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyContextInviteApproval_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCid()) {
          optionals.set(0);
        }
        if (struct.isSetProfile()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCid()) {
          oprot.writeI64(struct.cid);
        }
        if (struct.isSetProfile()) {
          struct.profile.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyContextInviteApproval_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cid = iprot.readI64();
          struct.setCidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.profile = new UserProfile();
          struct.profile.read(iprot);
          struct.setProfileIsSet(true);
        }
      }
    }

  }

  public static class receiveData_args implements org.apache.thrift.TBase<receiveData_args, receiveData_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveData_args");

    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new receiveData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new receiveData_argsTupleSchemeFactory());
    }

    public ByteBuffer data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA((short)1, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveData_args.class, metaDataMap);
    }

    public receiveData_args() {
    }

    public receiveData_args(
      ByteBuffer data)
    {
      this();
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveData_args(receiveData_args other) {
      if (other.isSetData()) {
        this.data = org.apache.thrift.TBaseHelper.copyBinary(other.data);
;
      }
    }

    public receiveData_args deepCopy() {
      return new receiveData_args(this);
    }

    @Override
    public void clear() {
      this.data = null;
    }

    public byte[] getData() {
      setData(org.apache.thrift.TBaseHelper.rightSize(data));
      return data == null ? null : data.array();
    }

    public ByteBuffer bufferForData() {
      return data;
    }

    public receiveData_args setData(byte[] data) {
      setData(data == null ? (ByteBuffer)null : ByteBuffer.wrap(data));
      return this;
    }

    public receiveData_args setData(ByteBuffer data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveData_args)
        return this.equals((receiveData_args)that);
      return false;
    }

    public boolean equals(receiveData_args that) {
      if (that == null)
        return false;

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(receiveData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      receiveData_args typedOther = (receiveData_args)other;

      lastComparison = Boolean.valueOf(isSetData()).compareTo(typedOther.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, typedOther.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveData_args(");
      boolean first = true;

      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.data, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiveData_argsStandardSchemeFactory implements SchemeFactory {
      public receiveData_argsStandardScheme getScheme() {
        return new receiveData_argsStandardScheme();
      }
    }

    private static class receiveData_argsStandardScheme extends StandardScheme<receiveData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, receiveData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readBinary();
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, receiveData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeBinary(struct.data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiveData_argsTupleSchemeFactory implements SchemeFactory {
      public receiveData_argsTupleScheme getScheme() {
        return new receiveData_argsTupleScheme();
      }
    }

    private static class receiveData_argsTupleScheme extends TupleScheme<receiveData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiveData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetData()) {
          oprot.writeBinary(struct.data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiveData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.data = iprot.readBinary();
          struct.setDataIsSet(true);
        }
      }
    }

  }

}
