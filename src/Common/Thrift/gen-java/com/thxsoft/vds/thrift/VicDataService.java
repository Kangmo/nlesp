/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thxsoft.vds.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class VicDataService {

  public interface Iface {

    public ResAuthenticateUser authenticateUser(AuthSignature sig, ReqAuthenticateUser authReq) throws org.apache.thrift.TException;

    public ResCreateUserProfile createUserProfile(AuthSignature sig, UserProfile profile) throws org.apache.thrift.TException;

    public ResUpdateUserProfile updateUserProfile(AuthSignature sig, UserProfile profile) throws org.apache.thrift.TException;

    public ResLoadUserProfiles loadUserProfiles(AuthSignature sig, List<String> uids) throws org.apache.thrift.TException;

    public ResLoadFriendProfiles loadFriendProfiles(AuthSignature sig, String uid) throws org.apache.thrift.TException;

    public ResLoadFriendUIDs loadFriendUIDs(AuthSignature sig, String uid) throws org.apache.thrift.TException;

    public ResRequestFriend requestFriend(AuthSignature sig, String uid) throws org.apache.thrift.TException;

    public ResCancelFriend cancelFriend(AuthSignature sig, String uid) throws org.apache.thrift.TException;

    public ResSearchUsers searchUserByEmail(AuthSignature sig, String email) throws org.apache.thrift.TException;

    public ResCreateContext createContext(AuthSignature sig, List<String> uids) throws org.apache.thrift.TException;

    public ResSendMessage sendMessage(AuthSignature sig, ReqSendMessage req) throws org.apache.thrift.TException;

    public void sendOnewayMessage(AuthSignature sig, ReqSendMessage req) throws org.apache.thrift.TException;

    public ResPullMessages pullMessages(AuthSignature sig, ReqPullMessages req) throws org.apache.thrift.TException;

    public ResEvalMessage evalMessage(AuthSignature sig, ReqEvalMessage req) throws org.apache.thrift.TException;

    public ResCommentMessage commentMessage(AuthSignature sig, ReqCommentMessage req) throws org.apache.thrift.TException;

    public ResLoadComments loadComments(AuthSignature sig, ReqLoadComments req) throws org.apache.thrift.TException;

    public ResLoadFollowerUIDs loadFollowerUIDs(AuthSignature sig, String uid) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void authenticateUser(AuthSignature sig, ReqAuthenticateUser authReq, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.authenticateUser_call> resultHandler) throws org.apache.thrift.TException;

    public void createUserProfile(AuthSignature sig, UserProfile profile, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createUserProfile_call> resultHandler) throws org.apache.thrift.TException;

    public void updateUserProfile(AuthSignature sig, UserProfile profile, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateUserProfile_call> resultHandler) throws org.apache.thrift.TException;

    public void loadUserProfiles(AuthSignature sig, List<String> uids, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.loadUserProfiles_call> resultHandler) throws org.apache.thrift.TException;

    public void loadFriendProfiles(AuthSignature sig, String uid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.loadFriendProfiles_call> resultHandler) throws org.apache.thrift.TException;

    public void loadFriendUIDs(AuthSignature sig, String uid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.loadFriendUIDs_call> resultHandler) throws org.apache.thrift.TException;

    public void requestFriend(AuthSignature sig, String uid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.requestFriend_call> resultHandler) throws org.apache.thrift.TException;

    public void cancelFriend(AuthSignature sig, String uid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.cancelFriend_call> resultHandler) throws org.apache.thrift.TException;

    public void searchUserByEmail(AuthSignature sig, String email, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchUserByEmail_call> resultHandler) throws org.apache.thrift.TException;

    public void createContext(AuthSignature sig, List<String> uids, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createContext_call> resultHandler) throws org.apache.thrift.TException;

    public void sendMessage(AuthSignature sig, ReqSendMessage req, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.sendMessage_call> resultHandler) throws org.apache.thrift.TException;

    public void sendOnewayMessage(AuthSignature sig, ReqSendMessage req, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.sendOnewayMessage_call> resultHandler) throws org.apache.thrift.TException;

    public void pullMessages(AuthSignature sig, ReqPullMessages req, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.pullMessages_call> resultHandler) throws org.apache.thrift.TException;

    public void evalMessage(AuthSignature sig, ReqEvalMessage req, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.evalMessage_call> resultHandler) throws org.apache.thrift.TException;

    public void commentMessage(AuthSignature sig, ReqCommentMessage req, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.commentMessage_call> resultHandler) throws org.apache.thrift.TException;

    public void loadComments(AuthSignature sig, ReqLoadComments req, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.loadComments_call> resultHandler) throws org.apache.thrift.TException;

    public void loadFollowerUIDs(AuthSignature sig, String uid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.loadFollowerUIDs_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ResAuthenticateUser authenticateUser(AuthSignature sig, ReqAuthenticateUser authReq) throws org.apache.thrift.TException
    {
      send_authenticateUser(sig, authReq);
      return recv_authenticateUser();
    }

    public void send_authenticateUser(AuthSignature sig, ReqAuthenticateUser authReq) throws org.apache.thrift.TException
    {
      authenticateUser_args args = new authenticateUser_args();
      args.setSig(sig);
      args.setAuthReq(authReq);
      sendBase("authenticateUser", args);
    }

    public ResAuthenticateUser recv_authenticateUser() throws org.apache.thrift.TException
    {
      authenticateUser_result result = new authenticateUser_result();
      receiveBase(result, "authenticateUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "authenticateUser failed: unknown result");
    }

    public ResCreateUserProfile createUserProfile(AuthSignature sig, UserProfile profile) throws org.apache.thrift.TException
    {
      send_createUserProfile(sig, profile);
      return recv_createUserProfile();
    }

    public void send_createUserProfile(AuthSignature sig, UserProfile profile) throws org.apache.thrift.TException
    {
      createUserProfile_args args = new createUserProfile_args();
      args.setSig(sig);
      args.setProfile(profile);
      sendBase("createUserProfile", args);
    }

    public ResCreateUserProfile recv_createUserProfile() throws org.apache.thrift.TException
    {
      createUserProfile_result result = new createUserProfile_result();
      receiveBase(result, "createUserProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createUserProfile failed: unknown result");
    }

    public ResUpdateUserProfile updateUserProfile(AuthSignature sig, UserProfile profile) throws org.apache.thrift.TException
    {
      send_updateUserProfile(sig, profile);
      return recv_updateUserProfile();
    }

    public void send_updateUserProfile(AuthSignature sig, UserProfile profile) throws org.apache.thrift.TException
    {
      updateUserProfile_args args = new updateUserProfile_args();
      args.setSig(sig);
      args.setProfile(profile);
      sendBase("updateUserProfile", args);
    }

    public ResUpdateUserProfile recv_updateUserProfile() throws org.apache.thrift.TException
    {
      updateUserProfile_result result = new updateUserProfile_result();
      receiveBase(result, "updateUserProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateUserProfile failed: unknown result");
    }

    public ResLoadUserProfiles loadUserProfiles(AuthSignature sig, List<String> uids) throws org.apache.thrift.TException
    {
      send_loadUserProfiles(sig, uids);
      return recv_loadUserProfiles();
    }

    public void send_loadUserProfiles(AuthSignature sig, List<String> uids) throws org.apache.thrift.TException
    {
      loadUserProfiles_args args = new loadUserProfiles_args();
      args.setSig(sig);
      args.setUids(uids);
      sendBase("loadUserProfiles", args);
    }

    public ResLoadUserProfiles recv_loadUserProfiles() throws org.apache.thrift.TException
    {
      loadUserProfiles_result result = new loadUserProfiles_result();
      receiveBase(result, "loadUserProfiles");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadUserProfiles failed: unknown result");
    }

    public ResLoadFriendProfiles loadFriendProfiles(AuthSignature sig, String uid) throws org.apache.thrift.TException
    {
      send_loadFriendProfiles(sig, uid);
      return recv_loadFriendProfiles();
    }

    public void send_loadFriendProfiles(AuthSignature sig, String uid) throws org.apache.thrift.TException
    {
      loadFriendProfiles_args args = new loadFriendProfiles_args();
      args.setSig(sig);
      args.setUid(uid);
      sendBase("loadFriendProfiles", args);
    }

    public ResLoadFriendProfiles recv_loadFriendProfiles() throws org.apache.thrift.TException
    {
      loadFriendProfiles_result result = new loadFriendProfiles_result();
      receiveBase(result, "loadFriendProfiles");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadFriendProfiles failed: unknown result");
    }

    public ResLoadFriendUIDs loadFriendUIDs(AuthSignature sig, String uid) throws org.apache.thrift.TException
    {
      send_loadFriendUIDs(sig, uid);
      return recv_loadFriendUIDs();
    }

    public void send_loadFriendUIDs(AuthSignature sig, String uid) throws org.apache.thrift.TException
    {
      loadFriendUIDs_args args = new loadFriendUIDs_args();
      args.setSig(sig);
      args.setUid(uid);
      sendBase("loadFriendUIDs", args);
    }

    public ResLoadFriendUIDs recv_loadFriendUIDs() throws org.apache.thrift.TException
    {
      loadFriendUIDs_result result = new loadFriendUIDs_result();
      receiveBase(result, "loadFriendUIDs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadFriendUIDs failed: unknown result");
    }

    public ResRequestFriend requestFriend(AuthSignature sig, String uid) throws org.apache.thrift.TException
    {
      send_requestFriend(sig, uid);
      return recv_requestFriend();
    }

    public void send_requestFriend(AuthSignature sig, String uid) throws org.apache.thrift.TException
    {
      requestFriend_args args = new requestFriend_args();
      args.setSig(sig);
      args.setUid(uid);
      sendBase("requestFriend", args);
    }

    public ResRequestFriend recv_requestFriend() throws org.apache.thrift.TException
    {
      requestFriend_result result = new requestFriend_result();
      receiveBase(result, "requestFriend");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "requestFriend failed: unknown result");
    }

    public ResCancelFriend cancelFriend(AuthSignature sig, String uid) throws org.apache.thrift.TException
    {
      send_cancelFriend(sig, uid);
      return recv_cancelFriend();
    }

    public void send_cancelFriend(AuthSignature sig, String uid) throws org.apache.thrift.TException
    {
      cancelFriend_args args = new cancelFriend_args();
      args.setSig(sig);
      args.setUid(uid);
      sendBase("cancelFriend", args);
    }

    public ResCancelFriend recv_cancelFriend() throws org.apache.thrift.TException
    {
      cancelFriend_result result = new cancelFriend_result();
      receiveBase(result, "cancelFriend");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelFriend failed: unknown result");
    }

    public ResSearchUsers searchUserByEmail(AuthSignature sig, String email) throws org.apache.thrift.TException
    {
      send_searchUserByEmail(sig, email);
      return recv_searchUserByEmail();
    }

    public void send_searchUserByEmail(AuthSignature sig, String email) throws org.apache.thrift.TException
    {
      searchUserByEmail_args args = new searchUserByEmail_args();
      args.setSig(sig);
      args.setEmail(email);
      sendBase("searchUserByEmail", args);
    }

    public ResSearchUsers recv_searchUserByEmail() throws org.apache.thrift.TException
    {
      searchUserByEmail_result result = new searchUserByEmail_result();
      receiveBase(result, "searchUserByEmail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchUserByEmail failed: unknown result");
    }

    public ResCreateContext createContext(AuthSignature sig, List<String> uids) throws org.apache.thrift.TException
    {
      send_createContext(sig, uids);
      return recv_createContext();
    }

    public void send_createContext(AuthSignature sig, List<String> uids) throws org.apache.thrift.TException
    {
      createContext_args args = new createContext_args();
      args.setSig(sig);
      args.setUids(uids);
      sendBase("createContext", args);
    }

    public ResCreateContext recv_createContext() throws org.apache.thrift.TException
    {
      createContext_result result = new createContext_result();
      receiveBase(result, "createContext");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createContext failed: unknown result");
    }

    public ResSendMessage sendMessage(AuthSignature sig, ReqSendMessage req) throws org.apache.thrift.TException
    {
      send_sendMessage(sig, req);
      return recv_sendMessage();
    }

    public void send_sendMessage(AuthSignature sig, ReqSendMessage req) throws org.apache.thrift.TException
    {
      sendMessage_args args = new sendMessage_args();
      args.setSig(sig);
      args.setReq(req);
      sendBase("sendMessage", args);
    }

    public ResSendMessage recv_sendMessage() throws org.apache.thrift.TException
    {
      sendMessage_result result = new sendMessage_result();
      receiveBase(result, "sendMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendMessage failed: unknown result");
    }

    public void sendOnewayMessage(AuthSignature sig, ReqSendMessage req) throws org.apache.thrift.TException
    {
      send_sendOnewayMessage(sig, req);
    }

    public void send_sendOnewayMessage(AuthSignature sig, ReqSendMessage req) throws org.apache.thrift.TException
    {
      sendOnewayMessage_args args = new sendOnewayMessage_args();
      args.setSig(sig);
      args.setReq(req);
      sendBase("sendOnewayMessage", args);
    }

    public ResPullMessages pullMessages(AuthSignature sig, ReqPullMessages req) throws org.apache.thrift.TException
    {
      send_pullMessages(sig, req);
      return recv_pullMessages();
    }

    public void send_pullMessages(AuthSignature sig, ReqPullMessages req) throws org.apache.thrift.TException
    {
      pullMessages_args args = new pullMessages_args();
      args.setSig(sig);
      args.setReq(req);
      sendBase("pullMessages", args);
    }

    public ResPullMessages recv_pullMessages() throws org.apache.thrift.TException
    {
      pullMessages_result result = new pullMessages_result();
      receiveBase(result, "pullMessages");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pullMessages failed: unknown result");
    }

    public ResEvalMessage evalMessage(AuthSignature sig, ReqEvalMessage req) throws org.apache.thrift.TException
    {
      send_evalMessage(sig, req);
      return recv_evalMessage();
    }

    public void send_evalMessage(AuthSignature sig, ReqEvalMessage req) throws org.apache.thrift.TException
    {
      evalMessage_args args = new evalMessage_args();
      args.setSig(sig);
      args.setReq(req);
      sendBase("evalMessage", args);
    }

    public ResEvalMessage recv_evalMessage() throws org.apache.thrift.TException
    {
      evalMessage_result result = new evalMessage_result();
      receiveBase(result, "evalMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "evalMessage failed: unknown result");
    }

    public ResCommentMessage commentMessage(AuthSignature sig, ReqCommentMessage req) throws org.apache.thrift.TException
    {
      send_commentMessage(sig, req);
      return recv_commentMessage();
    }

    public void send_commentMessage(AuthSignature sig, ReqCommentMessage req) throws org.apache.thrift.TException
    {
      commentMessage_args args = new commentMessage_args();
      args.setSig(sig);
      args.setReq(req);
      sendBase("commentMessage", args);
    }

    public ResCommentMessage recv_commentMessage() throws org.apache.thrift.TException
    {
      commentMessage_result result = new commentMessage_result();
      receiveBase(result, "commentMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "commentMessage failed: unknown result");
    }

    public ResLoadComments loadComments(AuthSignature sig, ReqLoadComments req) throws org.apache.thrift.TException
    {
      send_loadComments(sig, req);
      return recv_loadComments();
    }

    public void send_loadComments(AuthSignature sig, ReqLoadComments req) throws org.apache.thrift.TException
    {
      loadComments_args args = new loadComments_args();
      args.setSig(sig);
      args.setReq(req);
      sendBase("loadComments", args);
    }

    public ResLoadComments recv_loadComments() throws org.apache.thrift.TException
    {
      loadComments_result result = new loadComments_result();
      receiveBase(result, "loadComments");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadComments failed: unknown result");
    }

    public ResLoadFollowerUIDs loadFollowerUIDs(AuthSignature sig, String uid) throws org.apache.thrift.TException
    {
      send_loadFollowerUIDs(sig, uid);
      return recv_loadFollowerUIDs();
    }

    public void send_loadFollowerUIDs(AuthSignature sig, String uid) throws org.apache.thrift.TException
    {
      loadFollowerUIDs_args args = new loadFollowerUIDs_args();
      args.setSig(sig);
      args.setUid(uid);
      sendBase("loadFollowerUIDs", args);
    }

    public ResLoadFollowerUIDs recv_loadFollowerUIDs() throws org.apache.thrift.TException
    {
      loadFollowerUIDs_result result = new loadFollowerUIDs_result();
      receiveBase(result, "loadFollowerUIDs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadFollowerUIDs failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void authenticateUser(AuthSignature sig, ReqAuthenticateUser authReq, org.apache.thrift.async.AsyncMethodCallback<authenticateUser_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      authenticateUser_call method_call = new authenticateUser_call(sig, authReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class authenticateUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AuthSignature sig;
      private ReqAuthenticateUser authReq;
      public authenticateUser_call(AuthSignature sig, ReqAuthenticateUser authReq, org.apache.thrift.async.AsyncMethodCallback<authenticateUser_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sig = sig;
        this.authReq = authReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("authenticateUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        authenticateUser_args args = new authenticateUser_args();
        args.setSig(sig);
        args.setAuthReq(authReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResAuthenticateUser getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_authenticateUser();
      }
    }

    public void createUserProfile(AuthSignature sig, UserProfile profile, org.apache.thrift.async.AsyncMethodCallback<createUserProfile_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createUserProfile_call method_call = new createUserProfile_call(sig, profile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createUserProfile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AuthSignature sig;
      private UserProfile profile;
      public createUserProfile_call(AuthSignature sig, UserProfile profile, org.apache.thrift.async.AsyncMethodCallback<createUserProfile_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sig = sig;
        this.profile = profile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createUserProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createUserProfile_args args = new createUserProfile_args();
        args.setSig(sig);
        args.setProfile(profile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResCreateUserProfile getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createUserProfile();
      }
    }

    public void updateUserProfile(AuthSignature sig, UserProfile profile, org.apache.thrift.async.AsyncMethodCallback<updateUserProfile_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateUserProfile_call method_call = new updateUserProfile_call(sig, profile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateUserProfile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AuthSignature sig;
      private UserProfile profile;
      public updateUserProfile_call(AuthSignature sig, UserProfile profile, org.apache.thrift.async.AsyncMethodCallback<updateUserProfile_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sig = sig;
        this.profile = profile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateUserProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateUserProfile_args args = new updateUserProfile_args();
        args.setSig(sig);
        args.setProfile(profile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResUpdateUserProfile getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateUserProfile();
      }
    }

    public void loadUserProfiles(AuthSignature sig, List<String> uids, org.apache.thrift.async.AsyncMethodCallback<loadUserProfiles_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadUserProfiles_call method_call = new loadUserProfiles_call(sig, uids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadUserProfiles_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AuthSignature sig;
      private List<String> uids;
      public loadUserProfiles_call(AuthSignature sig, List<String> uids, org.apache.thrift.async.AsyncMethodCallback<loadUserProfiles_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sig = sig;
        this.uids = uids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadUserProfiles", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadUserProfiles_args args = new loadUserProfiles_args();
        args.setSig(sig);
        args.setUids(uids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResLoadUserProfiles getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadUserProfiles();
      }
    }

    public void loadFriendProfiles(AuthSignature sig, String uid, org.apache.thrift.async.AsyncMethodCallback<loadFriendProfiles_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadFriendProfiles_call method_call = new loadFriendProfiles_call(sig, uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadFriendProfiles_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AuthSignature sig;
      private String uid;
      public loadFriendProfiles_call(AuthSignature sig, String uid, org.apache.thrift.async.AsyncMethodCallback<loadFriendProfiles_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sig = sig;
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadFriendProfiles", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadFriendProfiles_args args = new loadFriendProfiles_args();
        args.setSig(sig);
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResLoadFriendProfiles getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadFriendProfiles();
      }
    }

    public void loadFriendUIDs(AuthSignature sig, String uid, org.apache.thrift.async.AsyncMethodCallback<loadFriendUIDs_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadFriendUIDs_call method_call = new loadFriendUIDs_call(sig, uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadFriendUIDs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AuthSignature sig;
      private String uid;
      public loadFriendUIDs_call(AuthSignature sig, String uid, org.apache.thrift.async.AsyncMethodCallback<loadFriendUIDs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sig = sig;
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadFriendUIDs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadFriendUIDs_args args = new loadFriendUIDs_args();
        args.setSig(sig);
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResLoadFriendUIDs getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadFriendUIDs();
      }
    }

    public void requestFriend(AuthSignature sig, String uid, org.apache.thrift.async.AsyncMethodCallback<requestFriend_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      requestFriend_call method_call = new requestFriend_call(sig, uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class requestFriend_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AuthSignature sig;
      private String uid;
      public requestFriend_call(AuthSignature sig, String uid, org.apache.thrift.async.AsyncMethodCallback<requestFriend_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sig = sig;
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("requestFriend", org.apache.thrift.protocol.TMessageType.CALL, 0));
        requestFriend_args args = new requestFriend_args();
        args.setSig(sig);
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResRequestFriend getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_requestFriend();
      }
    }

    public void cancelFriend(AuthSignature sig, String uid, org.apache.thrift.async.AsyncMethodCallback<cancelFriend_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelFriend_call method_call = new cancelFriend_call(sig, uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelFriend_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AuthSignature sig;
      private String uid;
      public cancelFriend_call(AuthSignature sig, String uid, org.apache.thrift.async.AsyncMethodCallback<cancelFriend_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sig = sig;
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelFriend", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelFriend_args args = new cancelFriend_args();
        args.setSig(sig);
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResCancelFriend getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelFriend();
      }
    }

    public void searchUserByEmail(AuthSignature sig, String email, org.apache.thrift.async.AsyncMethodCallback<searchUserByEmail_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchUserByEmail_call method_call = new searchUserByEmail_call(sig, email, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchUserByEmail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AuthSignature sig;
      private String email;
      public searchUserByEmail_call(AuthSignature sig, String email, org.apache.thrift.async.AsyncMethodCallback<searchUserByEmail_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sig = sig;
        this.email = email;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchUserByEmail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchUserByEmail_args args = new searchUserByEmail_args();
        args.setSig(sig);
        args.setEmail(email);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResSearchUsers getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchUserByEmail();
      }
    }

    public void createContext(AuthSignature sig, List<String> uids, org.apache.thrift.async.AsyncMethodCallback<createContext_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createContext_call method_call = new createContext_call(sig, uids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createContext_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AuthSignature sig;
      private List<String> uids;
      public createContext_call(AuthSignature sig, List<String> uids, org.apache.thrift.async.AsyncMethodCallback<createContext_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sig = sig;
        this.uids = uids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createContext", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createContext_args args = new createContext_args();
        args.setSig(sig);
        args.setUids(uids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResCreateContext getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createContext();
      }
    }

    public void sendMessage(AuthSignature sig, ReqSendMessage req, org.apache.thrift.async.AsyncMethodCallback<sendMessage_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendMessage_call method_call = new sendMessage_call(sig, req, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AuthSignature sig;
      private ReqSendMessage req;
      public sendMessage_call(AuthSignature sig, ReqSendMessage req, org.apache.thrift.async.AsyncMethodCallback<sendMessage_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sig = sig;
        this.req = req;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendMessage_args args = new sendMessage_args();
        args.setSig(sig);
        args.setReq(req);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResSendMessage getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendMessage();
      }
    }

    public void sendOnewayMessage(AuthSignature sig, ReqSendMessage req, org.apache.thrift.async.AsyncMethodCallback<sendOnewayMessage_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendOnewayMessage_call method_call = new sendOnewayMessage_call(sig, req, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendOnewayMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AuthSignature sig;
      private ReqSendMessage req;
      public sendOnewayMessage_call(AuthSignature sig, ReqSendMessage req, org.apache.thrift.async.AsyncMethodCallback<sendOnewayMessage_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.sig = sig;
        this.req = req;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendOnewayMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendOnewayMessage_args args = new sendOnewayMessage_args();
        args.setSig(sig);
        args.setReq(req);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void pullMessages(AuthSignature sig, ReqPullMessages req, org.apache.thrift.async.AsyncMethodCallback<pullMessages_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pullMessages_call method_call = new pullMessages_call(sig, req, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pullMessages_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AuthSignature sig;
      private ReqPullMessages req;
      public pullMessages_call(AuthSignature sig, ReqPullMessages req, org.apache.thrift.async.AsyncMethodCallback<pullMessages_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sig = sig;
        this.req = req;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pullMessages", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pullMessages_args args = new pullMessages_args();
        args.setSig(sig);
        args.setReq(req);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResPullMessages getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pullMessages();
      }
    }

    public void evalMessage(AuthSignature sig, ReqEvalMessage req, org.apache.thrift.async.AsyncMethodCallback<evalMessage_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      evalMessage_call method_call = new evalMessage_call(sig, req, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class evalMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AuthSignature sig;
      private ReqEvalMessage req;
      public evalMessage_call(AuthSignature sig, ReqEvalMessage req, org.apache.thrift.async.AsyncMethodCallback<evalMessage_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sig = sig;
        this.req = req;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("evalMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        evalMessage_args args = new evalMessage_args();
        args.setSig(sig);
        args.setReq(req);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResEvalMessage getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_evalMessage();
      }
    }

    public void commentMessage(AuthSignature sig, ReqCommentMessage req, org.apache.thrift.async.AsyncMethodCallback<commentMessage_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      commentMessage_call method_call = new commentMessage_call(sig, req, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class commentMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AuthSignature sig;
      private ReqCommentMessage req;
      public commentMessage_call(AuthSignature sig, ReqCommentMessage req, org.apache.thrift.async.AsyncMethodCallback<commentMessage_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sig = sig;
        this.req = req;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("commentMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        commentMessage_args args = new commentMessage_args();
        args.setSig(sig);
        args.setReq(req);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResCommentMessage getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_commentMessage();
      }
    }

    public void loadComments(AuthSignature sig, ReqLoadComments req, org.apache.thrift.async.AsyncMethodCallback<loadComments_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadComments_call method_call = new loadComments_call(sig, req, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadComments_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AuthSignature sig;
      private ReqLoadComments req;
      public loadComments_call(AuthSignature sig, ReqLoadComments req, org.apache.thrift.async.AsyncMethodCallback<loadComments_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sig = sig;
        this.req = req;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadComments", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadComments_args args = new loadComments_args();
        args.setSig(sig);
        args.setReq(req);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResLoadComments getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadComments();
      }
    }

    public void loadFollowerUIDs(AuthSignature sig, String uid, org.apache.thrift.async.AsyncMethodCallback<loadFollowerUIDs_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadFollowerUIDs_call method_call = new loadFollowerUIDs_call(sig, uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadFollowerUIDs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AuthSignature sig;
      private String uid;
      public loadFollowerUIDs_call(AuthSignature sig, String uid, org.apache.thrift.async.AsyncMethodCallback<loadFollowerUIDs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sig = sig;
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadFollowerUIDs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadFollowerUIDs_args args = new loadFollowerUIDs_args();
        args.setSig(sig);
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResLoadFollowerUIDs getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadFollowerUIDs();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("authenticateUser", new authenticateUser());
      processMap.put("createUserProfile", new createUserProfile());
      processMap.put("updateUserProfile", new updateUserProfile());
      processMap.put("loadUserProfiles", new loadUserProfiles());
      processMap.put("loadFriendProfiles", new loadFriendProfiles());
      processMap.put("loadFriendUIDs", new loadFriendUIDs());
      processMap.put("requestFriend", new requestFriend());
      processMap.put("cancelFriend", new cancelFriend());
      processMap.put("searchUserByEmail", new searchUserByEmail());
      processMap.put("createContext", new createContext());
      processMap.put("sendMessage", new sendMessage());
      processMap.put("sendOnewayMessage", new sendOnewayMessage());
      processMap.put("pullMessages", new pullMessages());
      processMap.put("evalMessage", new evalMessage());
      processMap.put("commentMessage", new commentMessage());
      processMap.put("loadComments", new loadComments());
      processMap.put("loadFollowerUIDs", new loadFollowerUIDs());
      return processMap;
    }

    public static class authenticateUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, authenticateUser_args> {
      public authenticateUser() {
        super("authenticateUser");
      }

      public authenticateUser_args getEmptyArgsInstance() {
        return new authenticateUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public authenticateUser_result getResult(I iface, authenticateUser_args args) throws org.apache.thrift.TException {
        authenticateUser_result result = new authenticateUser_result();
        result.success = iface.authenticateUser(args.sig, args.authReq);
        return result;
      }
    }

    public static class createUserProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createUserProfile_args> {
      public createUserProfile() {
        super("createUserProfile");
      }

      public createUserProfile_args getEmptyArgsInstance() {
        return new createUserProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createUserProfile_result getResult(I iface, createUserProfile_args args) throws org.apache.thrift.TException {
        createUserProfile_result result = new createUserProfile_result();
        result.success = iface.createUserProfile(args.sig, args.profile);
        return result;
      }
    }

    public static class updateUserProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateUserProfile_args> {
      public updateUserProfile() {
        super("updateUserProfile");
      }

      public updateUserProfile_args getEmptyArgsInstance() {
        return new updateUserProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateUserProfile_result getResult(I iface, updateUserProfile_args args) throws org.apache.thrift.TException {
        updateUserProfile_result result = new updateUserProfile_result();
        result.success = iface.updateUserProfile(args.sig, args.profile);
        return result;
      }
    }

    public static class loadUserProfiles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadUserProfiles_args> {
      public loadUserProfiles() {
        super("loadUserProfiles");
      }

      public loadUserProfiles_args getEmptyArgsInstance() {
        return new loadUserProfiles_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadUserProfiles_result getResult(I iface, loadUserProfiles_args args) throws org.apache.thrift.TException {
        loadUserProfiles_result result = new loadUserProfiles_result();
        result.success = iface.loadUserProfiles(args.sig, args.uids);
        return result;
      }
    }

    public static class loadFriendProfiles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadFriendProfiles_args> {
      public loadFriendProfiles() {
        super("loadFriendProfiles");
      }

      public loadFriendProfiles_args getEmptyArgsInstance() {
        return new loadFriendProfiles_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadFriendProfiles_result getResult(I iface, loadFriendProfiles_args args) throws org.apache.thrift.TException {
        loadFriendProfiles_result result = new loadFriendProfiles_result();
        result.success = iface.loadFriendProfiles(args.sig, args.uid);
        return result;
      }
    }

    public static class loadFriendUIDs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadFriendUIDs_args> {
      public loadFriendUIDs() {
        super("loadFriendUIDs");
      }

      public loadFriendUIDs_args getEmptyArgsInstance() {
        return new loadFriendUIDs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadFriendUIDs_result getResult(I iface, loadFriendUIDs_args args) throws org.apache.thrift.TException {
        loadFriendUIDs_result result = new loadFriendUIDs_result();
        result.success = iface.loadFriendUIDs(args.sig, args.uid);
        return result;
      }
    }

    public static class requestFriend<I extends Iface> extends org.apache.thrift.ProcessFunction<I, requestFriend_args> {
      public requestFriend() {
        super("requestFriend");
      }

      public requestFriend_args getEmptyArgsInstance() {
        return new requestFriend_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public requestFriend_result getResult(I iface, requestFriend_args args) throws org.apache.thrift.TException {
        requestFriend_result result = new requestFriend_result();
        result.success = iface.requestFriend(args.sig, args.uid);
        return result;
      }
    }

    public static class cancelFriend<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelFriend_args> {
      public cancelFriend() {
        super("cancelFriend");
      }

      public cancelFriend_args getEmptyArgsInstance() {
        return new cancelFriend_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelFriend_result getResult(I iface, cancelFriend_args args) throws org.apache.thrift.TException {
        cancelFriend_result result = new cancelFriend_result();
        result.success = iface.cancelFriend(args.sig, args.uid);
        return result;
      }
    }

    public static class searchUserByEmail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchUserByEmail_args> {
      public searchUserByEmail() {
        super("searchUserByEmail");
      }

      public searchUserByEmail_args getEmptyArgsInstance() {
        return new searchUserByEmail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchUserByEmail_result getResult(I iface, searchUserByEmail_args args) throws org.apache.thrift.TException {
        searchUserByEmail_result result = new searchUserByEmail_result();
        result.success = iface.searchUserByEmail(args.sig, args.email);
        return result;
      }
    }

    public static class createContext<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createContext_args> {
      public createContext() {
        super("createContext");
      }

      public createContext_args getEmptyArgsInstance() {
        return new createContext_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createContext_result getResult(I iface, createContext_args args) throws org.apache.thrift.TException {
        createContext_result result = new createContext_result();
        result.success = iface.createContext(args.sig, args.uids);
        return result;
      }
    }

    public static class sendMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendMessage_args> {
      public sendMessage() {
        super("sendMessage");
      }

      public sendMessage_args getEmptyArgsInstance() {
        return new sendMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendMessage_result getResult(I iface, sendMessage_args args) throws org.apache.thrift.TException {
        sendMessage_result result = new sendMessage_result();
        result.success = iface.sendMessage(args.sig, args.req);
        return result;
      }
    }

    public static class sendOnewayMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendOnewayMessage_args> {
      public sendOnewayMessage() {
        super("sendOnewayMessage");
      }

      public sendOnewayMessage_args getEmptyArgsInstance() {
        return new sendOnewayMessage_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, sendOnewayMessage_args args) throws org.apache.thrift.TException {
        iface.sendOnewayMessage(args.sig, args.req);
        return null;
      }
    }

    public static class pullMessages<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pullMessages_args> {
      public pullMessages() {
        super("pullMessages");
      }

      public pullMessages_args getEmptyArgsInstance() {
        return new pullMessages_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pullMessages_result getResult(I iface, pullMessages_args args) throws org.apache.thrift.TException {
        pullMessages_result result = new pullMessages_result();
        result.success = iface.pullMessages(args.sig, args.req);
        return result;
      }
    }

    public static class evalMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, evalMessage_args> {
      public evalMessage() {
        super("evalMessage");
      }

      public evalMessage_args getEmptyArgsInstance() {
        return new evalMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public evalMessage_result getResult(I iface, evalMessage_args args) throws org.apache.thrift.TException {
        evalMessage_result result = new evalMessage_result();
        result.success = iface.evalMessage(args.sig, args.req);
        return result;
      }
    }

    public static class commentMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, commentMessage_args> {
      public commentMessage() {
        super("commentMessage");
      }

      public commentMessage_args getEmptyArgsInstance() {
        return new commentMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public commentMessage_result getResult(I iface, commentMessage_args args) throws org.apache.thrift.TException {
        commentMessage_result result = new commentMessage_result();
        result.success = iface.commentMessage(args.sig, args.req);
        return result;
      }
    }

    public static class loadComments<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadComments_args> {
      public loadComments() {
        super("loadComments");
      }

      public loadComments_args getEmptyArgsInstance() {
        return new loadComments_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadComments_result getResult(I iface, loadComments_args args) throws org.apache.thrift.TException {
        loadComments_result result = new loadComments_result();
        result.success = iface.loadComments(args.sig, args.req);
        return result;
      }
    }

    public static class loadFollowerUIDs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadFollowerUIDs_args> {
      public loadFollowerUIDs() {
        super("loadFollowerUIDs");
      }

      public loadFollowerUIDs_args getEmptyArgsInstance() {
        return new loadFollowerUIDs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadFollowerUIDs_result getResult(I iface, loadFollowerUIDs_args args) throws org.apache.thrift.TException {
        loadFollowerUIDs_result result = new loadFollowerUIDs_result();
        result.success = iface.loadFollowerUIDs(args.sig, args.uid);
        return result;
      }
    }

  }

  public static class authenticateUser_args implements org.apache.thrift.TBase<authenticateUser_args, authenticateUser_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authenticateUser_args");

    private static final org.apache.thrift.protocol.TField SIG_FIELD_DESC = new org.apache.thrift.protocol.TField("sig", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUTH_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("authReq", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authenticateUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authenticateUser_argsTupleSchemeFactory());
    }

    public AuthSignature sig; // required
    public ReqAuthenticateUser authReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIG((short)1, "sig"),
      AUTH_REQ((short)2, "authReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIG
            return SIG;
          case 2: // AUTH_REQ
            return AUTH_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIG, new org.apache.thrift.meta_data.FieldMetaData("sig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthSignature.class)));
      tmpMap.put(_Fields.AUTH_REQ, new org.apache.thrift.meta_data.FieldMetaData("authReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReqAuthenticateUser.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authenticateUser_args.class, metaDataMap);
    }

    public authenticateUser_args() {
    }

    public authenticateUser_args(
      AuthSignature sig,
      ReqAuthenticateUser authReq)
    {
      this();
      this.sig = sig;
      this.authReq = authReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticateUser_args(authenticateUser_args other) {
      if (other.isSetSig()) {
        this.sig = new AuthSignature(other.sig);
      }
      if (other.isSetAuthReq()) {
        this.authReq = new ReqAuthenticateUser(other.authReq);
      }
    }

    public authenticateUser_args deepCopy() {
      return new authenticateUser_args(this);
    }

    @Override
    public void clear() {
      this.sig = null;
      this.authReq = null;
    }

    public AuthSignature getSig() {
      return this.sig;
    }

    public authenticateUser_args setSig(AuthSignature sig) {
      this.sig = sig;
      return this;
    }

    public void unsetSig() {
      this.sig = null;
    }

    /** Returns true if field sig is set (has been assigned a value) and false otherwise */
    public boolean isSetSig() {
      return this.sig != null;
    }

    public void setSigIsSet(boolean value) {
      if (!value) {
        this.sig = null;
      }
    }

    public ReqAuthenticateUser getAuthReq() {
      return this.authReq;
    }

    public authenticateUser_args setAuthReq(ReqAuthenticateUser authReq) {
      this.authReq = authReq;
      return this;
    }

    public void unsetAuthReq() {
      this.authReq = null;
    }

    /** Returns true if field authReq is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthReq() {
      return this.authReq != null;
    }

    public void setAuthReqIsSet(boolean value) {
      if (!value) {
        this.authReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIG:
        if (value == null) {
          unsetSig();
        } else {
          setSig((AuthSignature)value);
        }
        break;

      case AUTH_REQ:
        if (value == null) {
          unsetAuthReq();
        } else {
          setAuthReq((ReqAuthenticateUser)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIG:
        return getSig();

      case AUTH_REQ:
        return getAuthReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIG:
        return isSetSig();
      case AUTH_REQ:
        return isSetAuthReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticateUser_args)
        return this.equals((authenticateUser_args)that);
      return false;
    }

    public boolean equals(authenticateUser_args that) {
      if (that == null)
        return false;

      boolean this_present_sig = true && this.isSetSig();
      boolean that_present_sig = true && that.isSetSig();
      if (this_present_sig || that_present_sig) {
        if (!(this_present_sig && that_present_sig))
          return false;
        if (!this.sig.equals(that.sig))
          return false;
      }

      boolean this_present_authReq = true && this.isSetAuthReq();
      boolean that_present_authReq = true && that.isSetAuthReq();
      if (this_present_authReq || that_present_authReq) {
        if (!(this_present_authReq && that_present_authReq))
          return false;
        if (!this.authReq.equals(that.authReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(authenticateUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      authenticateUser_args typedOther = (authenticateUser_args)other;

      lastComparison = Boolean.valueOf(isSetSig()).compareTo(typedOther.isSetSig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sig, typedOther.sig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuthReq()).compareTo(typedOther.isSetAuthReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authReq, typedOther.authReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authenticateUser_args(");
      boolean first = true;

      sb.append("sig:");
      if (this.sig == null) {
        sb.append("null");
      } else {
        sb.append(this.sig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authReq:");
      if (this.authReq == null) {
        sb.append("null");
      } else {
        sb.append(this.authReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sig != null) {
        sig.validate();
      }
      if (authReq != null) {
        authReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class authenticateUser_argsStandardSchemeFactory implements SchemeFactory {
      public authenticateUser_argsStandardScheme getScheme() {
        return new authenticateUser_argsStandardScheme();
      }
    }

    private static class authenticateUser_argsStandardScheme extends StandardScheme<authenticateUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authenticateUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sig = new AuthSignature();
                struct.sig.read(iprot);
                struct.setSigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTH_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authReq = new ReqAuthenticateUser();
                struct.authReq.read(iprot);
                struct.setAuthReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authenticateUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sig != null) {
          oprot.writeFieldBegin(SIG_FIELD_DESC);
          struct.sig.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.authReq != null) {
          oprot.writeFieldBegin(AUTH_REQ_FIELD_DESC);
          struct.authReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authenticateUser_argsTupleSchemeFactory implements SchemeFactory {
      public authenticateUser_argsTupleScheme getScheme() {
        return new authenticateUser_argsTupleScheme();
      }
    }

    private static class authenticateUser_argsTupleScheme extends TupleScheme<authenticateUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authenticateUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSig()) {
          optionals.set(0);
        }
        if (struct.isSetAuthReq()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSig()) {
          struct.sig.write(oprot);
        }
        if (struct.isSetAuthReq()) {
          struct.authReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authenticateUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sig = new AuthSignature();
          struct.sig.read(iprot);
          struct.setSigIsSet(true);
        }
        if (incoming.get(1)) {
          struct.authReq = new ReqAuthenticateUser();
          struct.authReq.read(iprot);
          struct.setAuthReqIsSet(true);
        }
      }
    }

  }

  public static class authenticateUser_result implements org.apache.thrift.TBase<authenticateUser_result, authenticateUser_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authenticateUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authenticateUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authenticateUser_resultTupleSchemeFactory());
    }

    public ResAuthenticateUser success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResAuthenticateUser.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authenticateUser_result.class, metaDataMap);
    }

    public authenticateUser_result() {
    }

    public authenticateUser_result(
      ResAuthenticateUser success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticateUser_result(authenticateUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResAuthenticateUser(other.success);
      }
    }

    public authenticateUser_result deepCopy() {
      return new authenticateUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResAuthenticateUser getSuccess() {
      return this.success;
    }

    public authenticateUser_result setSuccess(ResAuthenticateUser success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResAuthenticateUser)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticateUser_result)
        return this.equals((authenticateUser_result)that);
      return false;
    }

    public boolean equals(authenticateUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(authenticateUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      authenticateUser_result typedOther = (authenticateUser_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authenticateUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class authenticateUser_resultStandardSchemeFactory implements SchemeFactory {
      public authenticateUser_resultStandardScheme getScheme() {
        return new authenticateUser_resultStandardScheme();
      }
    }

    private static class authenticateUser_resultStandardScheme extends StandardScheme<authenticateUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authenticateUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResAuthenticateUser();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authenticateUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authenticateUser_resultTupleSchemeFactory implements SchemeFactory {
      public authenticateUser_resultTupleScheme getScheme() {
        return new authenticateUser_resultTupleScheme();
      }
    }

    private static class authenticateUser_resultTupleScheme extends TupleScheme<authenticateUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authenticateUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authenticateUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResAuthenticateUser();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createUserProfile_args implements org.apache.thrift.TBase<createUserProfile_args, createUserProfile_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createUserProfile_args");

    private static final org.apache.thrift.protocol.TField SIG_FIELD_DESC = new org.apache.thrift.protocol.TField("sig", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("profile", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createUserProfile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createUserProfile_argsTupleSchemeFactory());
    }

    public AuthSignature sig; // required
    public UserProfile profile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIG((short)1, "sig"),
      PROFILE((short)2, "profile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIG
            return SIG;
          case 2: // PROFILE
            return PROFILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIG, new org.apache.thrift.meta_data.FieldMetaData("sig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthSignature.class)));
      tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("profile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserProfile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createUserProfile_args.class, metaDataMap);
    }

    public createUserProfile_args() {
    }

    public createUserProfile_args(
      AuthSignature sig,
      UserProfile profile)
    {
      this();
      this.sig = sig;
      this.profile = profile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createUserProfile_args(createUserProfile_args other) {
      if (other.isSetSig()) {
        this.sig = new AuthSignature(other.sig);
      }
      if (other.isSetProfile()) {
        this.profile = new UserProfile(other.profile);
      }
    }

    public createUserProfile_args deepCopy() {
      return new createUserProfile_args(this);
    }

    @Override
    public void clear() {
      this.sig = null;
      this.profile = null;
    }

    public AuthSignature getSig() {
      return this.sig;
    }

    public createUserProfile_args setSig(AuthSignature sig) {
      this.sig = sig;
      return this;
    }

    public void unsetSig() {
      this.sig = null;
    }

    /** Returns true if field sig is set (has been assigned a value) and false otherwise */
    public boolean isSetSig() {
      return this.sig != null;
    }

    public void setSigIsSet(boolean value) {
      if (!value) {
        this.sig = null;
      }
    }

    public UserProfile getProfile() {
      return this.profile;
    }

    public createUserProfile_args setProfile(UserProfile profile) {
      this.profile = profile;
      return this;
    }

    public void unsetProfile() {
      this.profile = null;
    }

    /** Returns true if field profile is set (has been assigned a value) and false otherwise */
    public boolean isSetProfile() {
      return this.profile != null;
    }

    public void setProfileIsSet(boolean value) {
      if (!value) {
        this.profile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIG:
        if (value == null) {
          unsetSig();
        } else {
          setSig((AuthSignature)value);
        }
        break;

      case PROFILE:
        if (value == null) {
          unsetProfile();
        } else {
          setProfile((UserProfile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIG:
        return getSig();

      case PROFILE:
        return getProfile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIG:
        return isSetSig();
      case PROFILE:
        return isSetProfile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createUserProfile_args)
        return this.equals((createUserProfile_args)that);
      return false;
    }

    public boolean equals(createUserProfile_args that) {
      if (that == null)
        return false;

      boolean this_present_sig = true && this.isSetSig();
      boolean that_present_sig = true && that.isSetSig();
      if (this_present_sig || that_present_sig) {
        if (!(this_present_sig && that_present_sig))
          return false;
        if (!this.sig.equals(that.sig))
          return false;
      }

      boolean this_present_profile = true && this.isSetProfile();
      boolean that_present_profile = true && that.isSetProfile();
      if (this_present_profile || that_present_profile) {
        if (!(this_present_profile && that_present_profile))
          return false;
        if (!this.profile.equals(that.profile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createUserProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createUserProfile_args typedOther = (createUserProfile_args)other;

      lastComparison = Boolean.valueOf(isSetSig()).compareTo(typedOther.isSetSig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sig, typedOther.sig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProfile()).compareTo(typedOther.isSetProfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, typedOther.profile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createUserProfile_args(");
      boolean first = true;

      sb.append("sig:");
      if (this.sig == null) {
        sb.append("null");
      } else {
        sb.append(this.sig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("profile:");
      if (this.profile == null) {
        sb.append("null");
      } else {
        sb.append(this.profile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sig != null) {
        sig.validate();
      }
      if (profile != null) {
        profile.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createUserProfile_argsStandardSchemeFactory implements SchemeFactory {
      public createUserProfile_argsStandardScheme getScheme() {
        return new createUserProfile_argsStandardScheme();
      }
    }

    private static class createUserProfile_argsStandardScheme extends StandardScheme<createUserProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createUserProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sig = new AuthSignature();
                struct.sig.read(iprot);
                struct.setSigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.profile = new UserProfile();
                struct.profile.read(iprot);
                struct.setProfileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createUserProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sig != null) {
          oprot.writeFieldBegin(SIG_FIELD_DESC);
          struct.sig.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.profile != null) {
          oprot.writeFieldBegin(PROFILE_FIELD_DESC);
          struct.profile.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createUserProfile_argsTupleSchemeFactory implements SchemeFactory {
      public createUserProfile_argsTupleScheme getScheme() {
        return new createUserProfile_argsTupleScheme();
      }
    }

    private static class createUserProfile_argsTupleScheme extends TupleScheme<createUserProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createUserProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSig()) {
          optionals.set(0);
        }
        if (struct.isSetProfile()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSig()) {
          struct.sig.write(oprot);
        }
        if (struct.isSetProfile()) {
          struct.profile.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createUserProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sig = new AuthSignature();
          struct.sig.read(iprot);
          struct.setSigIsSet(true);
        }
        if (incoming.get(1)) {
          struct.profile = new UserProfile();
          struct.profile.read(iprot);
          struct.setProfileIsSet(true);
        }
      }
    }

  }

  public static class createUserProfile_result implements org.apache.thrift.TBase<createUserProfile_result, createUserProfile_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createUserProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createUserProfile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createUserProfile_resultTupleSchemeFactory());
    }

    public ResCreateUserProfile success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResCreateUserProfile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createUserProfile_result.class, metaDataMap);
    }

    public createUserProfile_result() {
    }

    public createUserProfile_result(
      ResCreateUserProfile success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createUserProfile_result(createUserProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResCreateUserProfile(other.success);
      }
    }

    public createUserProfile_result deepCopy() {
      return new createUserProfile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResCreateUserProfile getSuccess() {
      return this.success;
    }

    public createUserProfile_result setSuccess(ResCreateUserProfile success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResCreateUserProfile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createUserProfile_result)
        return this.equals((createUserProfile_result)that);
      return false;
    }

    public boolean equals(createUserProfile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createUserProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createUserProfile_result typedOther = (createUserProfile_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createUserProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createUserProfile_resultStandardSchemeFactory implements SchemeFactory {
      public createUserProfile_resultStandardScheme getScheme() {
        return new createUserProfile_resultStandardScheme();
      }
    }

    private static class createUserProfile_resultStandardScheme extends StandardScheme<createUserProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createUserProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResCreateUserProfile();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createUserProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createUserProfile_resultTupleSchemeFactory implements SchemeFactory {
      public createUserProfile_resultTupleScheme getScheme() {
        return new createUserProfile_resultTupleScheme();
      }
    }

    private static class createUserProfile_resultTupleScheme extends TupleScheme<createUserProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createUserProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createUserProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResCreateUserProfile();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateUserProfile_args implements org.apache.thrift.TBase<updateUserProfile_args, updateUserProfile_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserProfile_args");

    private static final org.apache.thrift.protocol.TField SIG_FIELD_DESC = new org.apache.thrift.protocol.TField("sig", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("profile", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserProfile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserProfile_argsTupleSchemeFactory());
    }

    public AuthSignature sig; // required
    public UserProfile profile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIG((short)1, "sig"),
      PROFILE((short)2, "profile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIG
            return SIG;
          case 2: // PROFILE
            return PROFILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIG, new org.apache.thrift.meta_data.FieldMetaData("sig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthSignature.class)));
      tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("profile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserProfile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserProfile_args.class, metaDataMap);
    }

    public updateUserProfile_args() {
    }

    public updateUserProfile_args(
      AuthSignature sig,
      UserProfile profile)
    {
      this();
      this.sig = sig;
      this.profile = profile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserProfile_args(updateUserProfile_args other) {
      if (other.isSetSig()) {
        this.sig = new AuthSignature(other.sig);
      }
      if (other.isSetProfile()) {
        this.profile = new UserProfile(other.profile);
      }
    }

    public updateUserProfile_args deepCopy() {
      return new updateUserProfile_args(this);
    }

    @Override
    public void clear() {
      this.sig = null;
      this.profile = null;
    }

    public AuthSignature getSig() {
      return this.sig;
    }

    public updateUserProfile_args setSig(AuthSignature sig) {
      this.sig = sig;
      return this;
    }

    public void unsetSig() {
      this.sig = null;
    }

    /** Returns true if field sig is set (has been assigned a value) and false otherwise */
    public boolean isSetSig() {
      return this.sig != null;
    }

    public void setSigIsSet(boolean value) {
      if (!value) {
        this.sig = null;
      }
    }

    public UserProfile getProfile() {
      return this.profile;
    }

    public updateUserProfile_args setProfile(UserProfile profile) {
      this.profile = profile;
      return this;
    }

    public void unsetProfile() {
      this.profile = null;
    }

    /** Returns true if field profile is set (has been assigned a value) and false otherwise */
    public boolean isSetProfile() {
      return this.profile != null;
    }

    public void setProfileIsSet(boolean value) {
      if (!value) {
        this.profile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIG:
        if (value == null) {
          unsetSig();
        } else {
          setSig((AuthSignature)value);
        }
        break;

      case PROFILE:
        if (value == null) {
          unsetProfile();
        } else {
          setProfile((UserProfile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIG:
        return getSig();

      case PROFILE:
        return getProfile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIG:
        return isSetSig();
      case PROFILE:
        return isSetProfile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserProfile_args)
        return this.equals((updateUserProfile_args)that);
      return false;
    }

    public boolean equals(updateUserProfile_args that) {
      if (that == null)
        return false;

      boolean this_present_sig = true && this.isSetSig();
      boolean that_present_sig = true && that.isSetSig();
      if (this_present_sig || that_present_sig) {
        if (!(this_present_sig && that_present_sig))
          return false;
        if (!this.sig.equals(that.sig))
          return false;
      }

      boolean this_present_profile = true && this.isSetProfile();
      boolean that_present_profile = true && that.isSetProfile();
      if (this_present_profile || that_present_profile) {
        if (!(this_present_profile && that_present_profile))
          return false;
        if (!this.profile.equals(that.profile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateUserProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateUserProfile_args typedOther = (updateUserProfile_args)other;

      lastComparison = Boolean.valueOf(isSetSig()).compareTo(typedOther.isSetSig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sig, typedOther.sig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProfile()).compareTo(typedOther.isSetProfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, typedOther.profile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserProfile_args(");
      boolean first = true;

      sb.append("sig:");
      if (this.sig == null) {
        sb.append("null");
      } else {
        sb.append(this.sig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("profile:");
      if (this.profile == null) {
        sb.append("null");
      } else {
        sb.append(this.profile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sig != null) {
        sig.validate();
      }
      if (profile != null) {
        profile.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserProfile_argsStandardSchemeFactory implements SchemeFactory {
      public updateUserProfile_argsStandardScheme getScheme() {
        return new updateUserProfile_argsStandardScheme();
      }
    }

    private static class updateUserProfile_argsStandardScheme extends StandardScheme<updateUserProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sig = new AuthSignature();
                struct.sig.read(iprot);
                struct.setSigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.profile = new UserProfile();
                struct.profile.read(iprot);
                struct.setProfileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sig != null) {
          oprot.writeFieldBegin(SIG_FIELD_DESC);
          struct.sig.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.profile != null) {
          oprot.writeFieldBegin(PROFILE_FIELD_DESC);
          struct.profile.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserProfile_argsTupleSchemeFactory implements SchemeFactory {
      public updateUserProfile_argsTupleScheme getScheme() {
        return new updateUserProfile_argsTupleScheme();
      }
    }

    private static class updateUserProfile_argsTupleScheme extends TupleScheme<updateUserProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSig()) {
          optionals.set(0);
        }
        if (struct.isSetProfile()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSig()) {
          struct.sig.write(oprot);
        }
        if (struct.isSetProfile()) {
          struct.profile.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sig = new AuthSignature();
          struct.sig.read(iprot);
          struct.setSigIsSet(true);
        }
        if (incoming.get(1)) {
          struct.profile = new UserProfile();
          struct.profile.read(iprot);
          struct.setProfileIsSet(true);
        }
      }
    }

  }

  public static class updateUserProfile_result implements org.apache.thrift.TBase<updateUserProfile_result, updateUserProfile_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserProfile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserProfile_resultTupleSchemeFactory());
    }

    public ResUpdateUserProfile success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResUpdateUserProfile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserProfile_result.class, metaDataMap);
    }

    public updateUserProfile_result() {
    }

    public updateUserProfile_result(
      ResUpdateUserProfile success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserProfile_result(updateUserProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResUpdateUserProfile(other.success);
      }
    }

    public updateUserProfile_result deepCopy() {
      return new updateUserProfile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResUpdateUserProfile getSuccess() {
      return this.success;
    }

    public updateUserProfile_result setSuccess(ResUpdateUserProfile success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResUpdateUserProfile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserProfile_result)
        return this.equals((updateUserProfile_result)that);
      return false;
    }

    public boolean equals(updateUserProfile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateUserProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateUserProfile_result typedOther = (updateUserProfile_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserProfile_resultStandardSchemeFactory implements SchemeFactory {
      public updateUserProfile_resultStandardScheme getScheme() {
        return new updateUserProfile_resultStandardScheme();
      }
    }

    private static class updateUserProfile_resultStandardScheme extends StandardScheme<updateUserProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResUpdateUserProfile();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserProfile_resultTupleSchemeFactory implements SchemeFactory {
      public updateUserProfile_resultTupleScheme getScheme() {
        return new updateUserProfile_resultTupleScheme();
      }
    }

    private static class updateUserProfile_resultTupleScheme extends TupleScheme<updateUserProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResUpdateUserProfile();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadUserProfiles_args implements org.apache.thrift.TBase<loadUserProfiles_args, loadUserProfiles_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadUserProfiles_args");

    private static final org.apache.thrift.protocol.TField SIG_FIELD_DESC = new org.apache.thrift.protocol.TField("sig", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("uids", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadUserProfiles_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadUserProfiles_argsTupleSchemeFactory());
    }

    public AuthSignature sig; // required
    public List<String> uids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIG((short)1, "sig"),
      UIDS((short)2, "uids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIG
            return SIG;
          case 2: // UIDS
            return UIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIG, new org.apache.thrift.meta_data.FieldMetaData("sig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthSignature.class)));
      tmpMap.put(_Fields.UIDS, new org.apache.thrift.meta_data.FieldMetaData("uids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , "UID"))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadUserProfiles_args.class, metaDataMap);
    }

    public loadUserProfiles_args() {
    }

    public loadUserProfiles_args(
      AuthSignature sig,
      List<String> uids)
    {
      this();
      this.sig = sig;
      this.uids = uids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadUserProfiles_args(loadUserProfiles_args other) {
      if (other.isSetSig()) {
        this.sig = new AuthSignature(other.sig);
      }
      if (other.isSetUids()) {
        List<String> __this__uids = new ArrayList<String>();
        for (String other_element : other.uids) {
          __this__uids.add(other_element);
        }
        this.uids = __this__uids;
      }
    }

    public loadUserProfiles_args deepCopy() {
      return new loadUserProfiles_args(this);
    }

    @Override
    public void clear() {
      this.sig = null;
      this.uids = null;
    }

    public AuthSignature getSig() {
      return this.sig;
    }

    public loadUserProfiles_args setSig(AuthSignature sig) {
      this.sig = sig;
      return this;
    }

    public void unsetSig() {
      this.sig = null;
    }

    /** Returns true if field sig is set (has been assigned a value) and false otherwise */
    public boolean isSetSig() {
      return this.sig != null;
    }

    public void setSigIsSet(boolean value) {
      if (!value) {
        this.sig = null;
      }
    }

    public int getUidsSize() {
      return (this.uids == null) ? 0 : this.uids.size();
    }

    public java.util.Iterator<String> getUidsIterator() {
      return (this.uids == null) ? null : this.uids.iterator();
    }

    public void addToUids(String elem) {
      if (this.uids == null) {
        this.uids = new ArrayList<String>();
      }
      this.uids.add(elem);
    }

    public List<String> getUids() {
      return this.uids;
    }

    public loadUserProfiles_args setUids(List<String> uids) {
      this.uids = uids;
      return this;
    }

    public void unsetUids() {
      this.uids = null;
    }

    /** Returns true if field uids is set (has been assigned a value) and false otherwise */
    public boolean isSetUids() {
      return this.uids != null;
    }

    public void setUidsIsSet(boolean value) {
      if (!value) {
        this.uids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIG:
        if (value == null) {
          unsetSig();
        } else {
          setSig((AuthSignature)value);
        }
        break;

      case UIDS:
        if (value == null) {
          unsetUids();
        } else {
          setUids((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIG:
        return getSig();

      case UIDS:
        return getUids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIG:
        return isSetSig();
      case UIDS:
        return isSetUids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadUserProfiles_args)
        return this.equals((loadUserProfiles_args)that);
      return false;
    }

    public boolean equals(loadUserProfiles_args that) {
      if (that == null)
        return false;

      boolean this_present_sig = true && this.isSetSig();
      boolean that_present_sig = true && that.isSetSig();
      if (this_present_sig || that_present_sig) {
        if (!(this_present_sig && that_present_sig))
          return false;
        if (!this.sig.equals(that.sig))
          return false;
      }

      boolean this_present_uids = true && this.isSetUids();
      boolean that_present_uids = true && that.isSetUids();
      if (this_present_uids || that_present_uids) {
        if (!(this_present_uids && that_present_uids))
          return false;
        if (!this.uids.equals(that.uids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(loadUserProfiles_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      loadUserProfiles_args typedOther = (loadUserProfiles_args)other;

      lastComparison = Boolean.valueOf(isSetSig()).compareTo(typedOther.isSetSig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sig, typedOther.sig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUids()).compareTo(typedOther.isSetUids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uids, typedOther.uids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadUserProfiles_args(");
      boolean first = true;

      sb.append("sig:");
      if (this.sig == null) {
        sb.append("null");
      } else {
        sb.append(this.sig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uids:");
      if (this.uids == null) {
        sb.append("null");
      } else {
        sb.append(this.uids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sig != null) {
        sig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadUserProfiles_argsStandardSchemeFactory implements SchemeFactory {
      public loadUserProfiles_argsStandardScheme getScheme() {
        return new loadUserProfiles_argsStandardScheme();
      }
    }

    private static class loadUserProfiles_argsStandardScheme extends StandardScheme<loadUserProfiles_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadUserProfiles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sig = new AuthSignature();
                struct.sig.read(iprot);
                struct.setSigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.uids = new ArrayList<String>(_list72.size);
                  for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                  {
                    String _elem74; // required
                    _elem74 = iprot.readString();
                    struct.uids.add(_elem74);
                  }
                  iprot.readListEnd();
                }
                struct.setUidsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadUserProfiles_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sig != null) {
          oprot.writeFieldBegin(SIG_FIELD_DESC);
          struct.sig.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.uids != null) {
          oprot.writeFieldBegin(UIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.uids.size()));
            for (String _iter75 : struct.uids)
            {
              oprot.writeString(_iter75);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadUserProfiles_argsTupleSchemeFactory implements SchemeFactory {
      public loadUserProfiles_argsTupleScheme getScheme() {
        return new loadUserProfiles_argsTupleScheme();
      }
    }

    private static class loadUserProfiles_argsTupleScheme extends TupleScheme<loadUserProfiles_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadUserProfiles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSig()) {
          optionals.set(0);
        }
        if (struct.isSetUids()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSig()) {
          struct.sig.write(oprot);
        }
        if (struct.isSetUids()) {
          {
            oprot.writeI32(struct.uids.size());
            for (String _iter76 : struct.uids)
            {
              oprot.writeString(_iter76);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadUserProfiles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sig = new AuthSignature();
          struct.sig.read(iprot);
          struct.setSigIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.uids = new ArrayList<String>(_list77.size);
            for (int _i78 = 0; _i78 < _list77.size; ++_i78)
            {
              String _elem79; // required
              _elem79 = iprot.readString();
              struct.uids.add(_elem79);
            }
          }
          struct.setUidsIsSet(true);
        }
      }
    }

  }

  public static class loadUserProfiles_result implements org.apache.thrift.TBase<loadUserProfiles_result, loadUserProfiles_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadUserProfiles_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadUserProfiles_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadUserProfiles_resultTupleSchemeFactory());
    }

    public ResLoadUserProfiles success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResLoadUserProfiles.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadUserProfiles_result.class, metaDataMap);
    }

    public loadUserProfiles_result() {
    }

    public loadUserProfiles_result(
      ResLoadUserProfiles success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadUserProfiles_result(loadUserProfiles_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResLoadUserProfiles(other.success);
      }
    }

    public loadUserProfiles_result deepCopy() {
      return new loadUserProfiles_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResLoadUserProfiles getSuccess() {
      return this.success;
    }

    public loadUserProfiles_result setSuccess(ResLoadUserProfiles success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResLoadUserProfiles)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadUserProfiles_result)
        return this.equals((loadUserProfiles_result)that);
      return false;
    }

    public boolean equals(loadUserProfiles_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(loadUserProfiles_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      loadUserProfiles_result typedOther = (loadUserProfiles_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadUserProfiles_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadUserProfiles_resultStandardSchemeFactory implements SchemeFactory {
      public loadUserProfiles_resultStandardScheme getScheme() {
        return new loadUserProfiles_resultStandardScheme();
      }
    }

    private static class loadUserProfiles_resultStandardScheme extends StandardScheme<loadUserProfiles_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadUserProfiles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResLoadUserProfiles();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadUserProfiles_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadUserProfiles_resultTupleSchemeFactory implements SchemeFactory {
      public loadUserProfiles_resultTupleScheme getScheme() {
        return new loadUserProfiles_resultTupleScheme();
      }
    }

    private static class loadUserProfiles_resultTupleScheme extends TupleScheme<loadUserProfiles_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadUserProfiles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadUserProfiles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResLoadUserProfiles();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadFriendProfiles_args implements org.apache.thrift.TBase<loadFriendProfiles_args, loadFriendProfiles_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadFriendProfiles_args");

    private static final org.apache.thrift.protocol.TField SIG_FIELD_DESC = new org.apache.thrift.protocol.TField("sig", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadFriendProfiles_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadFriendProfiles_argsTupleSchemeFactory());
    }

    public AuthSignature sig; // required
    public String uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIG((short)1, "sig"),
      UID((short)2, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIG
            return SIG;
          case 2: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIG, new org.apache.thrift.meta_data.FieldMetaData("sig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthSignature.class)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "UID")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadFriendProfiles_args.class, metaDataMap);
    }

    public loadFriendProfiles_args() {
    }

    public loadFriendProfiles_args(
      AuthSignature sig,
      String uid)
    {
      this();
      this.sig = sig;
      this.uid = uid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadFriendProfiles_args(loadFriendProfiles_args other) {
      if (other.isSetSig()) {
        this.sig = new AuthSignature(other.sig);
      }
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
    }

    public loadFriendProfiles_args deepCopy() {
      return new loadFriendProfiles_args(this);
    }

    @Override
    public void clear() {
      this.sig = null;
      this.uid = null;
    }

    public AuthSignature getSig() {
      return this.sig;
    }

    public loadFriendProfiles_args setSig(AuthSignature sig) {
      this.sig = sig;
      return this;
    }

    public void unsetSig() {
      this.sig = null;
    }

    /** Returns true if field sig is set (has been assigned a value) and false otherwise */
    public boolean isSetSig() {
      return this.sig != null;
    }

    public void setSigIsSet(boolean value) {
      if (!value) {
        this.sig = null;
      }
    }

    public String getUid() {
      return this.uid;
    }

    public loadFriendProfiles_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIG:
        if (value == null) {
          unsetSig();
        } else {
          setSig((AuthSignature)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIG:
        return getSig();

      case UID:
        return getUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIG:
        return isSetSig();
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadFriendProfiles_args)
        return this.equals((loadFriendProfiles_args)that);
      return false;
    }

    public boolean equals(loadFriendProfiles_args that) {
      if (that == null)
        return false;

      boolean this_present_sig = true && this.isSetSig();
      boolean that_present_sig = true && that.isSetSig();
      if (this_present_sig || that_present_sig) {
        if (!(this_present_sig && that_present_sig))
          return false;
        if (!this.sig.equals(that.sig))
          return false;
      }

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(loadFriendProfiles_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      loadFriendProfiles_args typedOther = (loadFriendProfiles_args)other;

      lastComparison = Boolean.valueOf(isSetSig()).compareTo(typedOther.isSetSig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sig, typedOther.sig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadFriendProfiles_args(");
      boolean first = true;

      sb.append("sig:");
      if (this.sig == null) {
        sb.append("null");
      } else {
        sb.append(this.sig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sig != null) {
        sig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadFriendProfiles_argsStandardSchemeFactory implements SchemeFactory {
      public loadFriendProfiles_argsStandardScheme getScheme() {
        return new loadFriendProfiles_argsStandardScheme();
      }
    }

    private static class loadFriendProfiles_argsStandardScheme extends StandardScheme<loadFriendProfiles_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadFriendProfiles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sig = new AuthSignature();
                struct.sig.read(iprot);
                struct.setSigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uid = iprot.readString();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadFriendProfiles_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sig != null) {
          oprot.writeFieldBegin(SIG_FIELD_DESC);
          struct.sig.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.uid != null) {
          oprot.writeFieldBegin(UID_FIELD_DESC);
          oprot.writeString(struct.uid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadFriendProfiles_argsTupleSchemeFactory implements SchemeFactory {
      public loadFriendProfiles_argsTupleScheme getScheme() {
        return new loadFriendProfiles_argsTupleScheme();
      }
    }

    private static class loadFriendProfiles_argsTupleScheme extends TupleScheme<loadFriendProfiles_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadFriendProfiles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSig()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSig()) {
          struct.sig.write(oprot);
        }
        if (struct.isSetUid()) {
          oprot.writeString(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadFriendProfiles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sig = new AuthSignature();
          struct.sig.read(iprot);
          struct.setSigIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readString();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class loadFriendProfiles_result implements org.apache.thrift.TBase<loadFriendProfiles_result, loadFriendProfiles_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadFriendProfiles_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadFriendProfiles_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadFriendProfiles_resultTupleSchemeFactory());
    }

    public ResLoadFriendProfiles success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResLoadFriendProfiles.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadFriendProfiles_result.class, metaDataMap);
    }

    public loadFriendProfiles_result() {
    }

    public loadFriendProfiles_result(
      ResLoadFriendProfiles success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadFriendProfiles_result(loadFriendProfiles_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResLoadFriendProfiles(other.success);
      }
    }

    public loadFriendProfiles_result deepCopy() {
      return new loadFriendProfiles_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResLoadFriendProfiles getSuccess() {
      return this.success;
    }

    public loadFriendProfiles_result setSuccess(ResLoadFriendProfiles success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResLoadFriendProfiles)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadFriendProfiles_result)
        return this.equals((loadFriendProfiles_result)that);
      return false;
    }

    public boolean equals(loadFriendProfiles_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(loadFriendProfiles_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      loadFriendProfiles_result typedOther = (loadFriendProfiles_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadFriendProfiles_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadFriendProfiles_resultStandardSchemeFactory implements SchemeFactory {
      public loadFriendProfiles_resultStandardScheme getScheme() {
        return new loadFriendProfiles_resultStandardScheme();
      }
    }

    private static class loadFriendProfiles_resultStandardScheme extends StandardScheme<loadFriendProfiles_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadFriendProfiles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResLoadFriendProfiles();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadFriendProfiles_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadFriendProfiles_resultTupleSchemeFactory implements SchemeFactory {
      public loadFriendProfiles_resultTupleScheme getScheme() {
        return new loadFriendProfiles_resultTupleScheme();
      }
    }

    private static class loadFriendProfiles_resultTupleScheme extends TupleScheme<loadFriendProfiles_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadFriendProfiles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadFriendProfiles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResLoadFriendProfiles();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadFriendUIDs_args implements org.apache.thrift.TBase<loadFriendUIDs_args, loadFriendUIDs_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadFriendUIDs_args");

    private static final org.apache.thrift.protocol.TField SIG_FIELD_DESC = new org.apache.thrift.protocol.TField("sig", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadFriendUIDs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadFriendUIDs_argsTupleSchemeFactory());
    }

    public AuthSignature sig; // required
    public String uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIG((short)1, "sig"),
      UID((short)2, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIG
            return SIG;
          case 2: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIG, new org.apache.thrift.meta_data.FieldMetaData("sig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthSignature.class)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "UID")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadFriendUIDs_args.class, metaDataMap);
    }

    public loadFriendUIDs_args() {
    }

    public loadFriendUIDs_args(
      AuthSignature sig,
      String uid)
    {
      this();
      this.sig = sig;
      this.uid = uid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadFriendUIDs_args(loadFriendUIDs_args other) {
      if (other.isSetSig()) {
        this.sig = new AuthSignature(other.sig);
      }
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
    }

    public loadFriendUIDs_args deepCopy() {
      return new loadFriendUIDs_args(this);
    }

    @Override
    public void clear() {
      this.sig = null;
      this.uid = null;
    }

    public AuthSignature getSig() {
      return this.sig;
    }

    public loadFriendUIDs_args setSig(AuthSignature sig) {
      this.sig = sig;
      return this;
    }

    public void unsetSig() {
      this.sig = null;
    }

    /** Returns true if field sig is set (has been assigned a value) and false otherwise */
    public boolean isSetSig() {
      return this.sig != null;
    }

    public void setSigIsSet(boolean value) {
      if (!value) {
        this.sig = null;
      }
    }

    public String getUid() {
      return this.uid;
    }

    public loadFriendUIDs_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIG:
        if (value == null) {
          unsetSig();
        } else {
          setSig((AuthSignature)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIG:
        return getSig();

      case UID:
        return getUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIG:
        return isSetSig();
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadFriendUIDs_args)
        return this.equals((loadFriendUIDs_args)that);
      return false;
    }

    public boolean equals(loadFriendUIDs_args that) {
      if (that == null)
        return false;

      boolean this_present_sig = true && this.isSetSig();
      boolean that_present_sig = true && that.isSetSig();
      if (this_present_sig || that_present_sig) {
        if (!(this_present_sig && that_present_sig))
          return false;
        if (!this.sig.equals(that.sig))
          return false;
      }

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(loadFriendUIDs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      loadFriendUIDs_args typedOther = (loadFriendUIDs_args)other;

      lastComparison = Boolean.valueOf(isSetSig()).compareTo(typedOther.isSetSig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sig, typedOther.sig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadFriendUIDs_args(");
      boolean first = true;

      sb.append("sig:");
      if (this.sig == null) {
        sb.append("null");
      } else {
        sb.append(this.sig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sig != null) {
        sig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadFriendUIDs_argsStandardSchemeFactory implements SchemeFactory {
      public loadFriendUIDs_argsStandardScheme getScheme() {
        return new loadFriendUIDs_argsStandardScheme();
      }
    }

    private static class loadFriendUIDs_argsStandardScheme extends StandardScheme<loadFriendUIDs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadFriendUIDs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sig = new AuthSignature();
                struct.sig.read(iprot);
                struct.setSigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uid = iprot.readString();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadFriendUIDs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sig != null) {
          oprot.writeFieldBegin(SIG_FIELD_DESC);
          struct.sig.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.uid != null) {
          oprot.writeFieldBegin(UID_FIELD_DESC);
          oprot.writeString(struct.uid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadFriendUIDs_argsTupleSchemeFactory implements SchemeFactory {
      public loadFriendUIDs_argsTupleScheme getScheme() {
        return new loadFriendUIDs_argsTupleScheme();
      }
    }

    private static class loadFriendUIDs_argsTupleScheme extends TupleScheme<loadFriendUIDs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadFriendUIDs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSig()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSig()) {
          struct.sig.write(oprot);
        }
        if (struct.isSetUid()) {
          oprot.writeString(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadFriendUIDs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sig = new AuthSignature();
          struct.sig.read(iprot);
          struct.setSigIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readString();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class loadFriendUIDs_result implements org.apache.thrift.TBase<loadFriendUIDs_result, loadFriendUIDs_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadFriendUIDs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadFriendUIDs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadFriendUIDs_resultTupleSchemeFactory());
    }

    public ResLoadFriendUIDs success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResLoadFriendUIDs.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadFriendUIDs_result.class, metaDataMap);
    }

    public loadFriendUIDs_result() {
    }

    public loadFriendUIDs_result(
      ResLoadFriendUIDs success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadFriendUIDs_result(loadFriendUIDs_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResLoadFriendUIDs(other.success);
      }
    }

    public loadFriendUIDs_result deepCopy() {
      return new loadFriendUIDs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResLoadFriendUIDs getSuccess() {
      return this.success;
    }

    public loadFriendUIDs_result setSuccess(ResLoadFriendUIDs success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResLoadFriendUIDs)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadFriendUIDs_result)
        return this.equals((loadFriendUIDs_result)that);
      return false;
    }

    public boolean equals(loadFriendUIDs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(loadFriendUIDs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      loadFriendUIDs_result typedOther = (loadFriendUIDs_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadFriendUIDs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadFriendUIDs_resultStandardSchemeFactory implements SchemeFactory {
      public loadFriendUIDs_resultStandardScheme getScheme() {
        return new loadFriendUIDs_resultStandardScheme();
      }
    }

    private static class loadFriendUIDs_resultStandardScheme extends StandardScheme<loadFriendUIDs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadFriendUIDs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResLoadFriendUIDs();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadFriendUIDs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadFriendUIDs_resultTupleSchemeFactory implements SchemeFactory {
      public loadFriendUIDs_resultTupleScheme getScheme() {
        return new loadFriendUIDs_resultTupleScheme();
      }
    }

    private static class loadFriendUIDs_resultTupleScheme extends TupleScheme<loadFriendUIDs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadFriendUIDs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadFriendUIDs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResLoadFriendUIDs();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class requestFriend_args implements org.apache.thrift.TBase<requestFriend_args, requestFriend_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestFriend_args");

    private static final org.apache.thrift.protocol.TField SIG_FIELD_DESC = new org.apache.thrift.protocol.TField("sig", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new requestFriend_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new requestFriend_argsTupleSchemeFactory());
    }

    public AuthSignature sig; // required
    public String uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIG((short)1, "sig"),
      UID((short)2, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIG
            return SIG;
          case 2: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIG, new org.apache.thrift.meta_data.FieldMetaData("sig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthSignature.class)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "UID")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestFriend_args.class, metaDataMap);
    }

    public requestFriend_args() {
    }

    public requestFriend_args(
      AuthSignature sig,
      String uid)
    {
      this();
      this.sig = sig;
      this.uid = uid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestFriend_args(requestFriend_args other) {
      if (other.isSetSig()) {
        this.sig = new AuthSignature(other.sig);
      }
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
    }

    public requestFriend_args deepCopy() {
      return new requestFriend_args(this);
    }

    @Override
    public void clear() {
      this.sig = null;
      this.uid = null;
    }

    public AuthSignature getSig() {
      return this.sig;
    }

    public requestFriend_args setSig(AuthSignature sig) {
      this.sig = sig;
      return this;
    }

    public void unsetSig() {
      this.sig = null;
    }

    /** Returns true if field sig is set (has been assigned a value) and false otherwise */
    public boolean isSetSig() {
      return this.sig != null;
    }

    public void setSigIsSet(boolean value) {
      if (!value) {
        this.sig = null;
      }
    }

    public String getUid() {
      return this.uid;
    }

    public requestFriend_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIG:
        if (value == null) {
          unsetSig();
        } else {
          setSig((AuthSignature)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIG:
        return getSig();

      case UID:
        return getUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIG:
        return isSetSig();
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestFriend_args)
        return this.equals((requestFriend_args)that);
      return false;
    }

    public boolean equals(requestFriend_args that) {
      if (that == null)
        return false;

      boolean this_present_sig = true && this.isSetSig();
      boolean that_present_sig = true && that.isSetSig();
      if (this_present_sig || that_present_sig) {
        if (!(this_present_sig && that_present_sig))
          return false;
        if (!this.sig.equals(that.sig))
          return false;
      }

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(requestFriend_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      requestFriend_args typedOther = (requestFriend_args)other;

      lastComparison = Boolean.valueOf(isSetSig()).compareTo(typedOther.isSetSig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sig, typedOther.sig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("requestFriend_args(");
      boolean first = true;

      sb.append("sig:");
      if (this.sig == null) {
        sb.append("null");
      } else {
        sb.append(this.sig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sig != null) {
        sig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestFriend_argsStandardSchemeFactory implements SchemeFactory {
      public requestFriend_argsStandardScheme getScheme() {
        return new requestFriend_argsStandardScheme();
      }
    }

    private static class requestFriend_argsStandardScheme extends StandardScheme<requestFriend_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestFriend_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sig = new AuthSignature();
                struct.sig.read(iprot);
                struct.setSigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uid = iprot.readString();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestFriend_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sig != null) {
          oprot.writeFieldBegin(SIG_FIELD_DESC);
          struct.sig.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.uid != null) {
          oprot.writeFieldBegin(UID_FIELD_DESC);
          oprot.writeString(struct.uid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestFriend_argsTupleSchemeFactory implements SchemeFactory {
      public requestFriend_argsTupleScheme getScheme() {
        return new requestFriend_argsTupleScheme();
      }
    }

    private static class requestFriend_argsTupleScheme extends TupleScheme<requestFriend_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestFriend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSig()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSig()) {
          struct.sig.write(oprot);
        }
        if (struct.isSetUid()) {
          oprot.writeString(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestFriend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sig = new AuthSignature();
          struct.sig.read(iprot);
          struct.setSigIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readString();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class requestFriend_result implements org.apache.thrift.TBase<requestFriend_result, requestFriend_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestFriend_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new requestFriend_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new requestFriend_resultTupleSchemeFactory());
    }

    public ResRequestFriend success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResRequestFriend.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestFriend_result.class, metaDataMap);
    }

    public requestFriend_result() {
    }

    public requestFriend_result(
      ResRequestFriend success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestFriend_result(requestFriend_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResRequestFriend(other.success);
      }
    }

    public requestFriend_result deepCopy() {
      return new requestFriend_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResRequestFriend getSuccess() {
      return this.success;
    }

    public requestFriend_result setSuccess(ResRequestFriend success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResRequestFriend)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestFriend_result)
        return this.equals((requestFriend_result)that);
      return false;
    }

    public boolean equals(requestFriend_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(requestFriend_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      requestFriend_result typedOther = (requestFriend_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("requestFriend_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestFriend_resultStandardSchemeFactory implements SchemeFactory {
      public requestFriend_resultStandardScheme getScheme() {
        return new requestFriend_resultStandardScheme();
      }
    }

    private static class requestFriend_resultStandardScheme extends StandardScheme<requestFriend_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestFriend_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResRequestFriend();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestFriend_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestFriend_resultTupleSchemeFactory implements SchemeFactory {
      public requestFriend_resultTupleScheme getScheme() {
        return new requestFriend_resultTupleScheme();
      }
    }

    private static class requestFriend_resultTupleScheme extends TupleScheme<requestFriend_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestFriend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestFriend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResRequestFriend();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class cancelFriend_args implements org.apache.thrift.TBase<cancelFriend_args, cancelFriend_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelFriend_args");

    private static final org.apache.thrift.protocol.TField SIG_FIELD_DESC = new org.apache.thrift.protocol.TField("sig", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelFriend_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelFriend_argsTupleSchemeFactory());
    }

    public AuthSignature sig; // required
    public String uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIG((short)1, "sig"),
      UID((short)2, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIG
            return SIG;
          case 2: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIG, new org.apache.thrift.meta_data.FieldMetaData("sig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthSignature.class)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "UID")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelFriend_args.class, metaDataMap);
    }

    public cancelFriend_args() {
    }

    public cancelFriend_args(
      AuthSignature sig,
      String uid)
    {
      this();
      this.sig = sig;
      this.uid = uid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelFriend_args(cancelFriend_args other) {
      if (other.isSetSig()) {
        this.sig = new AuthSignature(other.sig);
      }
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
    }

    public cancelFriend_args deepCopy() {
      return new cancelFriend_args(this);
    }

    @Override
    public void clear() {
      this.sig = null;
      this.uid = null;
    }

    public AuthSignature getSig() {
      return this.sig;
    }

    public cancelFriend_args setSig(AuthSignature sig) {
      this.sig = sig;
      return this;
    }

    public void unsetSig() {
      this.sig = null;
    }

    /** Returns true if field sig is set (has been assigned a value) and false otherwise */
    public boolean isSetSig() {
      return this.sig != null;
    }

    public void setSigIsSet(boolean value) {
      if (!value) {
        this.sig = null;
      }
    }

    public String getUid() {
      return this.uid;
    }

    public cancelFriend_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIG:
        if (value == null) {
          unsetSig();
        } else {
          setSig((AuthSignature)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIG:
        return getSig();

      case UID:
        return getUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIG:
        return isSetSig();
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelFriend_args)
        return this.equals((cancelFriend_args)that);
      return false;
    }

    public boolean equals(cancelFriend_args that) {
      if (that == null)
        return false;

      boolean this_present_sig = true && this.isSetSig();
      boolean that_present_sig = true && that.isSetSig();
      if (this_present_sig || that_present_sig) {
        if (!(this_present_sig && that_present_sig))
          return false;
        if (!this.sig.equals(that.sig))
          return false;
      }

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(cancelFriend_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      cancelFriend_args typedOther = (cancelFriend_args)other;

      lastComparison = Boolean.valueOf(isSetSig()).compareTo(typedOther.isSetSig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sig, typedOther.sig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelFriend_args(");
      boolean first = true;

      sb.append("sig:");
      if (this.sig == null) {
        sb.append("null");
      } else {
        sb.append(this.sig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sig != null) {
        sig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelFriend_argsStandardSchemeFactory implements SchemeFactory {
      public cancelFriend_argsStandardScheme getScheme() {
        return new cancelFriend_argsStandardScheme();
      }
    }

    private static class cancelFriend_argsStandardScheme extends StandardScheme<cancelFriend_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelFriend_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sig = new AuthSignature();
                struct.sig.read(iprot);
                struct.setSigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uid = iprot.readString();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelFriend_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sig != null) {
          oprot.writeFieldBegin(SIG_FIELD_DESC);
          struct.sig.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.uid != null) {
          oprot.writeFieldBegin(UID_FIELD_DESC);
          oprot.writeString(struct.uid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelFriend_argsTupleSchemeFactory implements SchemeFactory {
      public cancelFriend_argsTupleScheme getScheme() {
        return new cancelFriend_argsTupleScheme();
      }
    }

    private static class cancelFriend_argsTupleScheme extends TupleScheme<cancelFriend_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelFriend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSig()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSig()) {
          struct.sig.write(oprot);
        }
        if (struct.isSetUid()) {
          oprot.writeString(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelFriend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sig = new AuthSignature();
          struct.sig.read(iprot);
          struct.setSigIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readString();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class cancelFriend_result implements org.apache.thrift.TBase<cancelFriend_result, cancelFriend_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelFriend_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelFriend_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelFriend_resultTupleSchemeFactory());
    }

    public ResCancelFriend success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResCancelFriend.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelFriend_result.class, metaDataMap);
    }

    public cancelFriend_result() {
    }

    public cancelFriend_result(
      ResCancelFriend success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelFriend_result(cancelFriend_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResCancelFriend(other.success);
      }
    }

    public cancelFriend_result deepCopy() {
      return new cancelFriend_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResCancelFriend getSuccess() {
      return this.success;
    }

    public cancelFriend_result setSuccess(ResCancelFriend success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResCancelFriend)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelFriend_result)
        return this.equals((cancelFriend_result)that);
      return false;
    }

    public boolean equals(cancelFriend_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(cancelFriend_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      cancelFriend_result typedOther = (cancelFriend_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelFriend_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelFriend_resultStandardSchemeFactory implements SchemeFactory {
      public cancelFriend_resultStandardScheme getScheme() {
        return new cancelFriend_resultStandardScheme();
      }
    }

    private static class cancelFriend_resultStandardScheme extends StandardScheme<cancelFriend_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelFriend_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResCancelFriend();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelFriend_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelFriend_resultTupleSchemeFactory implements SchemeFactory {
      public cancelFriend_resultTupleScheme getScheme() {
        return new cancelFriend_resultTupleScheme();
      }
    }

    private static class cancelFriend_resultTupleScheme extends TupleScheme<cancelFriend_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelFriend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelFriend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResCancelFriend();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchUserByEmail_args implements org.apache.thrift.TBase<searchUserByEmail_args, searchUserByEmail_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchUserByEmail_args");

    private static final org.apache.thrift.protocol.TField SIG_FIELD_DESC = new org.apache.thrift.protocol.TField("sig", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchUserByEmail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchUserByEmail_argsTupleSchemeFactory());
    }

    public AuthSignature sig; // required
    public String email; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIG((short)1, "sig"),
      EMAIL((short)2, "email");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIG
            return SIG;
          case 2: // EMAIL
            return EMAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIG, new org.apache.thrift.meta_data.FieldMetaData("sig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthSignature.class)));
      tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchUserByEmail_args.class, metaDataMap);
    }

    public searchUserByEmail_args() {
    }

    public searchUserByEmail_args(
      AuthSignature sig,
      String email)
    {
      this();
      this.sig = sig;
      this.email = email;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchUserByEmail_args(searchUserByEmail_args other) {
      if (other.isSetSig()) {
        this.sig = new AuthSignature(other.sig);
      }
      if (other.isSetEmail()) {
        this.email = other.email;
      }
    }

    public searchUserByEmail_args deepCopy() {
      return new searchUserByEmail_args(this);
    }

    @Override
    public void clear() {
      this.sig = null;
      this.email = null;
    }

    public AuthSignature getSig() {
      return this.sig;
    }

    public searchUserByEmail_args setSig(AuthSignature sig) {
      this.sig = sig;
      return this;
    }

    public void unsetSig() {
      this.sig = null;
    }

    /** Returns true if field sig is set (has been assigned a value) and false otherwise */
    public boolean isSetSig() {
      return this.sig != null;
    }

    public void setSigIsSet(boolean value) {
      if (!value) {
        this.sig = null;
      }
    }

    public String getEmail() {
      return this.email;
    }

    public searchUserByEmail_args setEmail(String email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIG:
        if (value == null) {
          unsetSig();
        } else {
          setSig((AuthSignature)value);
        }
        break;

      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIG:
        return getSig();

      case EMAIL:
        return getEmail();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIG:
        return isSetSig();
      case EMAIL:
        return isSetEmail();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchUserByEmail_args)
        return this.equals((searchUserByEmail_args)that);
      return false;
    }

    public boolean equals(searchUserByEmail_args that) {
      if (that == null)
        return false;

      boolean this_present_sig = true && this.isSetSig();
      boolean that_present_sig = true && that.isSetSig();
      if (this_present_sig || that_present_sig) {
        if (!(this_present_sig && that_present_sig))
          return false;
        if (!this.sig.equals(that.sig))
          return false;
      }

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchUserByEmail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchUserByEmail_args typedOther = (searchUserByEmail_args)other;

      lastComparison = Boolean.valueOf(isSetSig()).compareTo(typedOther.isSetSig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sig, typedOther.sig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEmail()).compareTo(typedOther.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, typedOther.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchUserByEmail_args(");
      boolean first = true;

      sb.append("sig:");
      if (this.sig == null) {
        sb.append("null");
      } else {
        sb.append(this.sig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sig != null) {
        sig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchUserByEmail_argsStandardSchemeFactory implements SchemeFactory {
      public searchUserByEmail_argsStandardScheme getScheme() {
        return new searchUserByEmail_argsStandardScheme();
      }
    }

    private static class searchUserByEmail_argsStandardScheme extends StandardScheme<searchUserByEmail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchUserByEmail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sig = new AuthSignature();
                struct.sig.read(iprot);
                struct.setSigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.email = iprot.readString();
                struct.setEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchUserByEmail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sig != null) {
          oprot.writeFieldBegin(SIG_FIELD_DESC);
          struct.sig.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.email != null) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchUserByEmail_argsTupleSchemeFactory implements SchemeFactory {
      public searchUserByEmail_argsTupleScheme getScheme() {
        return new searchUserByEmail_argsTupleScheme();
      }
    }

    private static class searchUserByEmail_argsTupleScheme extends TupleScheme<searchUserByEmail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchUserByEmail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSig()) {
          optionals.set(0);
        }
        if (struct.isSetEmail()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSig()) {
          struct.sig.write(oprot);
        }
        if (struct.isSetEmail()) {
          oprot.writeString(struct.email);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchUserByEmail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sig = new AuthSignature();
          struct.sig.read(iprot);
          struct.setSigIsSet(true);
        }
        if (incoming.get(1)) {
          struct.email = iprot.readString();
          struct.setEmailIsSet(true);
        }
      }
    }

  }

  public static class searchUserByEmail_result implements org.apache.thrift.TBase<searchUserByEmail_result, searchUserByEmail_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchUserByEmail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchUserByEmail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchUserByEmail_resultTupleSchemeFactory());
    }

    public ResSearchUsers success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResSearchUsers.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchUserByEmail_result.class, metaDataMap);
    }

    public searchUserByEmail_result() {
    }

    public searchUserByEmail_result(
      ResSearchUsers success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchUserByEmail_result(searchUserByEmail_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResSearchUsers(other.success);
      }
    }

    public searchUserByEmail_result deepCopy() {
      return new searchUserByEmail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResSearchUsers getSuccess() {
      return this.success;
    }

    public searchUserByEmail_result setSuccess(ResSearchUsers success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResSearchUsers)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchUserByEmail_result)
        return this.equals((searchUserByEmail_result)that);
      return false;
    }

    public boolean equals(searchUserByEmail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchUserByEmail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchUserByEmail_result typedOther = (searchUserByEmail_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchUserByEmail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchUserByEmail_resultStandardSchemeFactory implements SchemeFactory {
      public searchUserByEmail_resultStandardScheme getScheme() {
        return new searchUserByEmail_resultStandardScheme();
      }
    }

    private static class searchUserByEmail_resultStandardScheme extends StandardScheme<searchUserByEmail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchUserByEmail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResSearchUsers();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchUserByEmail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchUserByEmail_resultTupleSchemeFactory implements SchemeFactory {
      public searchUserByEmail_resultTupleScheme getScheme() {
        return new searchUserByEmail_resultTupleScheme();
      }
    }

    private static class searchUserByEmail_resultTupleScheme extends TupleScheme<searchUserByEmail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchUserByEmail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchUserByEmail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResSearchUsers();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createContext_args implements org.apache.thrift.TBase<createContext_args, createContext_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createContext_args");

    private static final org.apache.thrift.protocol.TField SIG_FIELD_DESC = new org.apache.thrift.protocol.TField("sig", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("uids", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createContext_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createContext_argsTupleSchemeFactory());
    }

    public AuthSignature sig; // required
    public List<String> uids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIG((short)1, "sig"),
      UIDS((short)2, "uids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIG
            return SIG;
          case 2: // UIDS
            return UIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIG, new org.apache.thrift.meta_data.FieldMetaData("sig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthSignature.class)));
      tmpMap.put(_Fields.UIDS, new org.apache.thrift.meta_data.FieldMetaData("uids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , "UID"))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createContext_args.class, metaDataMap);
    }

    public createContext_args() {
    }

    public createContext_args(
      AuthSignature sig,
      List<String> uids)
    {
      this();
      this.sig = sig;
      this.uids = uids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createContext_args(createContext_args other) {
      if (other.isSetSig()) {
        this.sig = new AuthSignature(other.sig);
      }
      if (other.isSetUids()) {
        List<String> __this__uids = new ArrayList<String>();
        for (String other_element : other.uids) {
          __this__uids.add(other_element);
        }
        this.uids = __this__uids;
      }
    }

    public createContext_args deepCopy() {
      return new createContext_args(this);
    }

    @Override
    public void clear() {
      this.sig = null;
      this.uids = null;
    }

    public AuthSignature getSig() {
      return this.sig;
    }

    public createContext_args setSig(AuthSignature sig) {
      this.sig = sig;
      return this;
    }

    public void unsetSig() {
      this.sig = null;
    }

    /** Returns true if field sig is set (has been assigned a value) and false otherwise */
    public boolean isSetSig() {
      return this.sig != null;
    }

    public void setSigIsSet(boolean value) {
      if (!value) {
        this.sig = null;
      }
    }

    public int getUidsSize() {
      return (this.uids == null) ? 0 : this.uids.size();
    }

    public java.util.Iterator<String> getUidsIterator() {
      return (this.uids == null) ? null : this.uids.iterator();
    }

    public void addToUids(String elem) {
      if (this.uids == null) {
        this.uids = new ArrayList<String>();
      }
      this.uids.add(elem);
    }

    public List<String> getUids() {
      return this.uids;
    }

    public createContext_args setUids(List<String> uids) {
      this.uids = uids;
      return this;
    }

    public void unsetUids() {
      this.uids = null;
    }

    /** Returns true if field uids is set (has been assigned a value) and false otherwise */
    public boolean isSetUids() {
      return this.uids != null;
    }

    public void setUidsIsSet(boolean value) {
      if (!value) {
        this.uids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIG:
        if (value == null) {
          unsetSig();
        } else {
          setSig((AuthSignature)value);
        }
        break;

      case UIDS:
        if (value == null) {
          unsetUids();
        } else {
          setUids((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIG:
        return getSig();

      case UIDS:
        return getUids();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIG:
        return isSetSig();
      case UIDS:
        return isSetUids();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createContext_args)
        return this.equals((createContext_args)that);
      return false;
    }

    public boolean equals(createContext_args that) {
      if (that == null)
        return false;

      boolean this_present_sig = true && this.isSetSig();
      boolean that_present_sig = true && that.isSetSig();
      if (this_present_sig || that_present_sig) {
        if (!(this_present_sig && that_present_sig))
          return false;
        if (!this.sig.equals(that.sig))
          return false;
      }

      boolean this_present_uids = true && this.isSetUids();
      boolean that_present_uids = true && that.isSetUids();
      if (this_present_uids || that_present_uids) {
        if (!(this_present_uids && that_present_uids))
          return false;
        if (!this.uids.equals(that.uids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createContext_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createContext_args typedOther = (createContext_args)other;

      lastComparison = Boolean.valueOf(isSetSig()).compareTo(typedOther.isSetSig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sig, typedOther.sig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUids()).compareTo(typedOther.isSetUids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uids, typedOther.uids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createContext_args(");
      boolean first = true;

      sb.append("sig:");
      if (this.sig == null) {
        sb.append("null");
      } else {
        sb.append(this.sig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uids:");
      if (this.uids == null) {
        sb.append("null");
      } else {
        sb.append(this.uids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sig != null) {
        sig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createContext_argsStandardSchemeFactory implements SchemeFactory {
      public createContext_argsStandardScheme getScheme() {
        return new createContext_argsStandardScheme();
      }
    }

    private static class createContext_argsStandardScheme extends StandardScheme<createContext_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createContext_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sig = new AuthSignature();
                struct.sig.read(iprot);
                struct.setSigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.uids = new ArrayList<String>(_list80.size);
                  for (int _i81 = 0; _i81 < _list80.size; ++_i81)
                  {
                    String _elem82; // required
                    _elem82 = iprot.readString();
                    struct.uids.add(_elem82);
                  }
                  iprot.readListEnd();
                }
                struct.setUidsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createContext_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sig != null) {
          oprot.writeFieldBegin(SIG_FIELD_DESC);
          struct.sig.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.uids != null) {
          oprot.writeFieldBegin(UIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.uids.size()));
            for (String _iter83 : struct.uids)
            {
              oprot.writeString(_iter83);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createContext_argsTupleSchemeFactory implements SchemeFactory {
      public createContext_argsTupleScheme getScheme() {
        return new createContext_argsTupleScheme();
      }
    }

    private static class createContext_argsTupleScheme extends TupleScheme<createContext_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createContext_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSig()) {
          optionals.set(0);
        }
        if (struct.isSetUids()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSig()) {
          struct.sig.write(oprot);
        }
        if (struct.isSetUids()) {
          {
            oprot.writeI32(struct.uids.size());
            for (String _iter84 : struct.uids)
            {
              oprot.writeString(_iter84);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createContext_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sig = new AuthSignature();
          struct.sig.read(iprot);
          struct.setSigIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.uids = new ArrayList<String>(_list85.size);
            for (int _i86 = 0; _i86 < _list85.size; ++_i86)
            {
              String _elem87; // required
              _elem87 = iprot.readString();
              struct.uids.add(_elem87);
            }
          }
          struct.setUidsIsSet(true);
        }
      }
    }

  }

  public static class createContext_result implements org.apache.thrift.TBase<createContext_result, createContext_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createContext_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createContext_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createContext_resultTupleSchemeFactory());
    }

    public ResCreateContext success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResCreateContext.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createContext_result.class, metaDataMap);
    }

    public createContext_result() {
    }

    public createContext_result(
      ResCreateContext success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createContext_result(createContext_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResCreateContext(other.success);
      }
    }

    public createContext_result deepCopy() {
      return new createContext_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResCreateContext getSuccess() {
      return this.success;
    }

    public createContext_result setSuccess(ResCreateContext success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResCreateContext)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createContext_result)
        return this.equals((createContext_result)that);
      return false;
    }

    public boolean equals(createContext_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createContext_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createContext_result typedOther = (createContext_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createContext_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createContext_resultStandardSchemeFactory implements SchemeFactory {
      public createContext_resultStandardScheme getScheme() {
        return new createContext_resultStandardScheme();
      }
    }

    private static class createContext_resultStandardScheme extends StandardScheme<createContext_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createContext_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResCreateContext();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createContext_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createContext_resultTupleSchemeFactory implements SchemeFactory {
      public createContext_resultTupleScheme getScheme() {
        return new createContext_resultTupleScheme();
      }
    }

    private static class createContext_resultTupleScheme extends TupleScheme<createContext_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createContext_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createContext_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResCreateContext();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendMessage_args implements org.apache.thrift.TBase<sendMessage_args, sendMessage_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMessage_args");

    private static final org.apache.thrift.protocol.TField SIG_FIELD_DESC = new org.apache.thrift.protocol.TField("sig", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("req", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendMessage_argsTupleSchemeFactory());
    }

    public AuthSignature sig; // required
    public ReqSendMessage req; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIG((short)1, "sig"),
      REQ((short)2, "req");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIG
            return SIG;
          case 2: // REQ
            return REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIG, new org.apache.thrift.meta_data.FieldMetaData("sig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthSignature.class)));
      tmpMap.put(_Fields.REQ, new org.apache.thrift.meta_data.FieldMetaData("req", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReqSendMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMessage_args.class, metaDataMap);
    }

    public sendMessage_args() {
    }

    public sendMessage_args(
      AuthSignature sig,
      ReqSendMessage req)
    {
      this();
      this.sig = sig;
      this.req = req;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessage_args(sendMessage_args other) {
      if (other.isSetSig()) {
        this.sig = new AuthSignature(other.sig);
      }
      if (other.isSetReq()) {
        this.req = new ReqSendMessage(other.req);
      }
    }

    public sendMessage_args deepCopy() {
      return new sendMessage_args(this);
    }

    @Override
    public void clear() {
      this.sig = null;
      this.req = null;
    }

    public AuthSignature getSig() {
      return this.sig;
    }

    public sendMessage_args setSig(AuthSignature sig) {
      this.sig = sig;
      return this;
    }

    public void unsetSig() {
      this.sig = null;
    }

    /** Returns true if field sig is set (has been assigned a value) and false otherwise */
    public boolean isSetSig() {
      return this.sig != null;
    }

    public void setSigIsSet(boolean value) {
      if (!value) {
        this.sig = null;
      }
    }

    public ReqSendMessage getReq() {
      return this.req;
    }

    public sendMessage_args setReq(ReqSendMessage req) {
      this.req = req;
      return this;
    }

    public void unsetReq() {
      this.req = null;
    }

    /** Returns true if field req is set (has been assigned a value) and false otherwise */
    public boolean isSetReq() {
      return this.req != null;
    }

    public void setReqIsSet(boolean value) {
      if (!value) {
        this.req = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIG:
        if (value == null) {
          unsetSig();
        } else {
          setSig((AuthSignature)value);
        }
        break;

      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          setReq((ReqSendMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIG:
        return getSig();

      case REQ:
        return getReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIG:
        return isSetSig();
      case REQ:
        return isSetReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessage_args)
        return this.equals((sendMessage_args)that);
      return false;
    }

    public boolean equals(sendMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_sig = true && this.isSetSig();
      boolean that_present_sig = true && that.isSetSig();
      if (this_present_sig || that_present_sig) {
        if (!(this_present_sig && that_present_sig))
          return false;
        if (!this.sig.equals(that.sig))
          return false;
      }

      boolean this_present_req = true && this.isSetReq();
      boolean that_present_req = true && that.isSetReq();
      if (this_present_req || that_present_req) {
        if (!(this_present_req && that_present_req))
          return false;
        if (!this.req.equals(that.req))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sendMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sendMessage_args typedOther = (sendMessage_args)other;

      lastComparison = Boolean.valueOf(isSetSig()).compareTo(typedOther.isSetSig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sig, typedOther.sig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.req, typedOther.req);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendMessage_args(");
      boolean first = true;

      sb.append("sig:");
      if (this.sig == null) {
        sb.append("null");
      } else {
        sb.append(this.sig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("req:");
      if (this.req == null) {
        sb.append("null");
      } else {
        sb.append(this.req);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sig != null) {
        sig.validate();
      }
      if (req != null) {
        req.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendMessage_argsStandardSchemeFactory implements SchemeFactory {
      public sendMessage_argsStandardScheme getScheme() {
        return new sendMessage_argsStandardScheme();
      }
    }

    private static class sendMessage_argsStandardScheme extends StandardScheme<sendMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sig = new AuthSignature();
                struct.sig.read(iprot);
                struct.setSigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.req = new ReqSendMessage();
                struct.req.read(iprot);
                struct.setReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sig != null) {
          oprot.writeFieldBegin(SIG_FIELD_DESC);
          struct.sig.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.req != null) {
          oprot.writeFieldBegin(REQ_FIELD_DESC);
          struct.req.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendMessage_argsTupleSchemeFactory implements SchemeFactory {
      public sendMessage_argsTupleScheme getScheme() {
        return new sendMessage_argsTupleScheme();
      }
    }

    private static class sendMessage_argsTupleScheme extends TupleScheme<sendMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSig()) {
          optionals.set(0);
        }
        if (struct.isSetReq()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSig()) {
          struct.sig.write(oprot);
        }
        if (struct.isSetReq()) {
          struct.req.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sig = new AuthSignature();
          struct.sig.read(iprot);
          struct.setSigIsSet(true);
        }
        if (incoming.get(1)) {
          struct.req = new ReqSendMessage();
          struct.req.read(iprot);
          struct.setReqIsSet(true);
        }
      }
    }

  }

  public static class sendMessage_result implements org.apache.thrift.TBase<sendMessage_result, sendMessage_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendMessage_resultTupleSchemeFactory());
    }

    public ResSendMessage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResSendMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMessage_result.class, metaDataMap);
    }

    public sendMessage_result() {
    }

    public sendMessage_result(
      ResSendMessage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessage_result(sendMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResSendMessage(other.success);
      }
    }

    public sendMessage_result deepCopy() {
      return new sendMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResSendMessage getSuccess() {
      return this.success;
    }

    public sendMessage_result setSuccess(ResSendMessage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResSendMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessage_result)
        return this.equals((sendMessage_result)that);
      return false;
    }

    public boolean equals(sendMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sendMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sendMessage_result typedOther = (sendMessage_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendMessage_resultStandardSchemeFactory implements SchemeFactory {
      public sendMessage_resultStandardScheme getScheme() {
        return new sendMessage_resultStandardScheme();
      }
    }

    private static class sendMessage_resultStandardScheme extends StandardScheme<sendMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResSendMessage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendMessage_resultTupleSchemeFactory implements SchemeFactory {
      public sendMessage_resultTupleScheme getScheme() {
        return new sendMessage_resultTupleScheme();
      }
    }

    private static class sendMessage_resultTupleScheme extends TupleScheme<sendMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResSendMessage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendOnewayMessage_args implements org.apache.thrift.TBase<sendOnewayMessage_args, sendOnewayMessage_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendOnewayMessage_args");

    private static final org.apache.thrift.protocol.TField SIG_FIELD_DESC = new org.apache.thrift.protocol.TField("sig", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("req", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendOnewayMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendOnewayMessage_argsTupleSchemeFactory());
    }

    public AuthSignature sig; // required
    public ReqSendMessage req; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIG((short)1, "sig"),
      REQ((short)2, "req");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIG
            return SIG;
          case 2: // REQ
            return REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIG, new org.apache.thrift.meta_data.FieldMetaData("sig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthSignature.class)));
      tmpMap.put(_Fields.REQ, new org.apache.thrift.meta_data.FieldMetaData("req", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReqSendMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendOnewayMessage_args.class, metaDataMap);
    }

    public sendOnewayMessage_args() {
    }

    public sendOnewayMessage_args(
      AuthSignature sig,
      ReqSendMessage req)
    {
      this();
      this.sig = sig;
      this.req = req;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendOnewayMessage_args(sendOnewayMessage_args other) {
      if (other.isSetSig()) {
        this.sig = new AuthSignature(other.sig);
      }
      if (other.isSetReq()) {
        this.req = new ReqSendMessage(other.req);
      }
    }

    public sendOnewayMessage_args deepCopy() {
      return new sendOnewayMessage_args(this);
    }

    @Override
    public void clear() {
      this.sig = null;
      this.req = null;
    }

    public AuthSignature getSig() {
      return this.sig;
    }

    public sendOnewayMessage_args setSig(AuthSignature sig) {
      this.sig = sig;
      return this;
    }

    public void unsetSig() {
      this.sig = null;
    }

    /** Returns true if field sig is set (has been assigned a value) and false otherwise */
    public boolean isSetSig() {
      return this.sig != null;
    }

    public void setSigIsSet(boolean value) {
      if (!value) {
        this.sig = null;
      }
    }

    public ReqSendMessage getReq() {
      return this.req;
    }

    public sendOnewayMessage_args setReq(ReqSendMessage req) {
      this.req = req;
      return this;
    }

    public void unsetReq() {
      this.req = null;
    }

    /** Returns true if field req is set (has been assigned a value) and false otherwise */
    public boolean isSetReq() {
      return this.req != null;
    }

    public void setReqIsSet(boolean value) {
      if (!value) {
        this.req = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIG:
        if (value == null) {
          unsetSig();
        } else {
          setSig((AuthSignature)value);
        }
        break;

      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          setReq((ReqSendMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIG:
        return getSig();

      case REQ:
        return getReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIG:
        return isSetSig();
      case REQ:
        return isSetReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendOnewayMessage_args)
        return this.equals((sendOnewayMessage_args)that);
      return false;
    }

    public boolean equals(sendOnewayMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_sig = true && this.isSetSig();
      boolean that_present_sig = true && that.isSetSig();
      if (this_present_sig || that_present_sig) {
        if (!(this_present_sig && that_present_sig))
          return false;
        if (!this.sig.equals(that.sig))
          return false;
      }

      boolean this_present_req = true && this.isSetReq();
      boolean that_present_req = true && that.isSetReq();
      if (this_present_req || that_present_req) {
        if (!(this_present_req && that_present_req))
          return false;
        if (!this.req.equals(that.req))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sendOnewayMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sendOnewayMessage_args typedOther = (sendOnewayMessage_args)other;

      lastComparison = Boolean.valueOf(isSetSig()).compareTo(typedOther.isSetSig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sig, typedOther.sig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.req, typedOther.req);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendOnewayMessage_args(");
      boolean first = true;

      sb.append("sig:");
      if (this.sig == null) {
        sb.append("null");
      } else {
        sb.append(this.sig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("req:");
      if (this.req == null) {
        sb.append("null");
      } else {
        sb.append(this.req);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sig != null) {
        sig.validate();
      }
      if (req != null) {
        req.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendOnewayMessage_argsStandardSchemeFactory implements SchemeFactory {
      public sendOnewayMessage_argsStandardScheme getScheme() {
        return new sendOnewayMessage_argsStandardScheme();
      }
    }

    private static class sendOnewayMessage_argsStandardScheme extends StandardScheme<sendOnewayMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendOnewayMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sig = new AuthSignature();
                struct.sig.read(iprot);
                struct.setSigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.req = new ReqSendMessage();
                struct.req.read(iprot);
                struct.setReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendOnewayMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sig != null) {
          oprot.writeFieldBegin(SIG_FIELD_DESC);
          struct.sig.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.req != null) {
          oprot.writeFieldBegin(REQ_FIELD_DESC);
          struct.req.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendOnewayMessage_argsTupleSchemeFactory implements SchemeFactory {
      public sendOnewayMessage_argsTupleScheme getScheme() {
        return new sendOnewayMessage_argsTupleScheme();
      }
    }

    private static class sendOnewayMessage_argsTupleScheme extends TupleScheme<sendOnewayMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendOnewayMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSig()) {
          optionals.set(0);
        }
        if (struct.isSetReq()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSig()) {
          struct.sig.write(oprot);
        }
        if (struct.isSetReq()) {
          struct.req.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendOnewayMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sig = new AuthSignature();
          struct.sig.read(iprot);
          struct.setSigIsSet(true);
        }
        if (incoming.get(1)) {
          struct.req = new ReqSendMessage();
          struct.req.read(iprot);
          struct.setReqIsSet(true);
        }
      }
    }

  }

  public static class pullMessages_args implements org.apache.thrift.TBase<pullMessages_args, pullMessages_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pullMessages_args");

    private static final org.apache.thrift.protocol.TField SIG_FIELD_DESC = new org.apache.thrift.protocol.TField("sig", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("req", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pullMessages_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pullMessages_argsTupleSchemeFactory());
    }

    public AuthSignature sig; // required
    public ReqPullMessages req; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIG((short)1, "sig"),
      REQ((short)2, "req");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIG
            return SIG;
          case 2: // REQ
            return REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIG, new org.apache.thrift.meta_data.FieldMetaData("sig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthSignature.class)));
      tmpMap.put(_Fields.REQ, new org.apache.thrift.meta_data.FieldMetaData("req", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReqPullMessages.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pullMessages_args.class, metaDataMap);
    }

    public pullMessages_args() {
    }

    public pullMessages_args(
      AuthSignature sig,
      ReqPullMessages req)
    {
      this();
      this.sig = sig;
      this.req = req;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pullMessages_args(pullMessages_args other) {
      if (other.isSetSig()) {
        this.sig = new AuthSignature(other.sig);
      }
      if (other.isSetReq()) {
        this.req = new ReqPullMessages(other.req);
      }
    }

    public pullMessages_args deepCopy() {
      return new pullMessages_args(this);
    }

    @Override
    public void clear() {
      this.sig = null;
      this.req = null;
    }

    public AuthSignature getSig() {
      return this.sig;
    }

    public pullMessages_args setSig(AuthSignature sig) {
      this.sig = sig;
      return this;
    }

    public void unsetSig() {
      this.sig = null;
    }

    /** Returns true if field sig is set (has been assigned a value) and false otherwise */
    public boolean isSetSig() {
      return this.sig != null;
    }

    public void setSigIsSet(boolean value) {
      if (!value) {
        this.sig = null;
      }
    }

    public ReqPullMessages getReq() {
      return this.req;
    }

    public pullMessages_args setReq(ReqPullMessages req) {
      this.req = req;
      return this;
    }

    public void unsetReq() {
      this.req = null;
    }

    /** Returns true if field req is set (has been assigned a value) and false otherwise */
    public boolean isSetReq() {
      return this.req != null;
    }

    public void setReqIsSet(boolean value) {
      if (!value) {
        this.req = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIG:
        if (value == null) {
          unsetSig();
        } else {
          setSig((AuthSignature)value);
        }
        break;

      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          setReq((ReqPullMessages)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIG:
        return getSig();

      case REQ:
        return getReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIG:
        return isSetSig();
      case REQ:
        return isSetReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pullMessages_args)
        return this.equals((pullMessages_args)that);
      return false;
    }

    public boolean equals(pullMessages_args that) {
      if (that == null)
        return false;

      boolean this_present_sig = true && this.isSetSig();
      boolean that_present_sig = true && that.isSetSig();
      if (this_present_sig || that_present_sig) {
        if (!(this_present_sig && that_present_sig))
          return false;
        if (!this.sig.equals(that.sig))
          return false;
      }

      boolean this_present_req = true && this.isSetReq();
      boolean that_present_req = true && that.isSetReq();
      if (this_present_req || that_present_req) {
        if (!(this_present_req && that_present_req))
          return false;
        if (!this.req.equals(that.req))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(pullMessages_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pullMessages_args typedOther = (pullMessages_args)other;

      lastComparison = Boolean.valueOf(isSetSig()).compareTo(typedOther.isSetSig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sig, typedOther.sig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.req, typedOther.req);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pullMessages_args(");
      boolean first = true;

      sb.append("sig:");
      if (this.sig == null) {
        sb.append("null");
      } else {
        sb.append(this.sig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("req:");
      if (this.req == null) {
        sb.append("null");
      } else {
        sb.append(this.req);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sig != null) {
        sig.validate();
      }
      if (req != null) {
        req.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pullMessages_argsStandardSchemeFactory implements SchemeFactory {
      public pullMessages_argsStandardScheme getScheme() {
        return new pullMessages_argsStandardScheme();
      }
    }

    private static class pullMessages_argsStandardScheme extends StandardScheme<pullMessages_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pullMessages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sig = new AuthSignature();
                struct.sig.read(iprot);
                struct.setSigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.req = new ReqPullMessages();
                struct.req.read(iprot);
                struct.setReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pullMessages_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sig != null) {
          oprot.writeFieldBegin(SIG_FIELD_DESC);
          struct.sig.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.req != null) {
          oprot.writeFieldBegin(REQ_FIELD_DESC);
          struct.req.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pullMessages_argsTupleSchemeFactory implements SchemeFactory {
      public pullMessages_argsTupleScheme getScheme() {
        return new pullMessages_argsTupleScheme();
      }
    }

    private static class pullMessages_argsTupleScheme extends TupleScheme<pullMessages_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pullMessages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSig()) {
          optionals.set(0);
        }
        if (struct.isSetReq()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSig()) {
          struct.sig.write(oprot);
        }
        if (struct.isSetReq()) {
          struct.req.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pullMessages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sig = new AuthSignature();
          struct.sig.read(iprot);
          struct.setSigIsSet(true);
        }
        if (incoming.get(1)) {
          struct.req = new ReqPullMessages();
          struct.req.read(iprot);
          struct.setReqIsSet(true);
        }
      }
    }

  }

  public static class pullMessages_result implements org.apache.thrift.TBase<pullMessages_result, pullMessages_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pullMessages_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pullMessages_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pullMessages_resultTupleSchemeFactory());
    }

    public ResPullMessages success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResPullMessages.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pullMessages_result.class, metaDataMap);
    }

    public pullMessages_result() {
    }

    public pullMessages_result(
      ResPullMessages success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pullMessages_result(pullMessages_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResPullMessages(other.success);
      }
    }

    public pullMessages_result deepCopy() {
      return new pullMessages_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResPullMessages getSuccess() {
      return this.success;
    }

    public pullMessages_result setSuccess(ResPullMessages success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResPullMessages)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pullMessages_result)
        return this.equals((pullMessages_result)that);
      return false;
    }

    public boolean equals(pullMessages_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(pullMessages_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pullMessages_result typedOther = (pullMessages_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pullMessages_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pullMessages_resultStandardSchemeFactory implements SchemeFactory {
      public pullMessages_resultStandardScheme getScheme() {
        return new pullMessages_resultStandardScheme();
      }
    }

    private static class pullMessages_resultStandardScheme extends StandardScheme<pullMessages_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pullMessages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResPullMessages();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pullMessages_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pullMessages_resultTupleSchemeFactory implements SchemeFactory {
      public pullMessages_resultTupleScheme getScheme() {
        return new pullMessages_resultTupleScheme();
      }
    }

    private static class pullMessages_resultTupleScheme extends TupleScheme<pullMessages_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pullMessages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pullMessages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResPullMessages();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class evalMessage_args implements org.apache.thrift.TBase<evalMessage_args, evalMessage_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("evalMessage_args");

    private static final org.apache.thrift.protocol.TField SIG_FIELD_DESC = new org.apache.thrift.protocol.TField("sig", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("req", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new evalMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new evalMessage_argsTupleSchemeFactory());
    }

    public AuthSignature sig; // required
    public ReqEvalMessage req; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIG((short)1, "sig"),
      REQ((short)2, "req");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIG
            return SIG;
          case 2: // REQ
            return REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIG, new org.apache.thrift.meta_data.FieldMetaData("sig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthSignature.class)));
      tmpMap.put(_Fields.REQ, new org.apache.thrift.meta_data.FieldMetaData("req", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReqEvalMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(evalMessage_args.class, metaDataMap);
    }

    public evalMessage_args() {
    }

    public evalMessage_args(
      AuthSignature sig,
      ReqEvalMessage req)
    {
      this();
      this.sig = sig;
      this.req = req;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public evalMessage_args(evalMessage_args other) {
      if (other.isSetSig()) {
        this.sig = new AuthSignature(other.sig);
      }
      if (other.isSetReq()) {
        this.req = new ReqEvalMessage(other.req);
      }
    }

    public evalMessage_args deepCopy() {
      return new evalMessage_args(this);
    }

    @Override
    public void clear() {
      this.sig = null;
      this.req = null;
    }

    public AuthSignature getSig() {
      return this.sig;
    }

    public evalMessage_args setSig(AuthSignature sig) {
      this.sig = sig;
      return this;
    }

    public void unsetSig() {
      this.sig = null;
    }

    /** Returns true if field sig is set (has been assigned a value) and false otherwise */
    public boolean isSetSig() {
      return this.sig != null;
    }

    public void setSigIsSet(boolean value) {
      if (!value) {
        this.sig = null;
      }
    }

    public ReqEvalMessage getReq() {
      return this.req;
    }

    public evalMessage_args setReq(ReqEvalMessage req) {
      this.req = req;
      return this;
    }

    public void unsetReq() {
      this.req = null;
    }

    /** Returns true if field req is set (has been assigned a value) and false otherwise */
    public boolean isSetReq() {
      return this.req != null;
    }

    public void setReqIsSet(boolean value) {
      if (!value) {
        this.req = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIG:
        if (value == null) {
          unsetSig();
        } else {
          setSig((AuthSignature)value);
        }
        break;

      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          setReq((ReqEvalMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIG:
        return getSig();

      case REQ:
        return getReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIG:
        return isSetSig();
      case REQ:
        return isSetReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof evalMessage_args)
        return this.equals((evalMessage_args)that);
      return false;
    }

    public boolean equals(evalMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_sig = true && this.isSetSig();
      boolean that_present_sig = true && that.isSetSig();
      if (this_present_sig || that_present_sig) {
        if (!(this_present_sig && that_present_sig))
          return false;
        if (!this.sig.equals(that.sig))
          return false;
      }

      boolean this_present_req = true && this.isSetReq();
      boolean that_present_req = true && that.isSetReq();
      if (this_present_req || that_present_req) {
        if (!(this_present_req && that_present_req))
          return false;
        if (!this.req.equals(that.req))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(evalMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      evalMessage_args typedOther = (evalMessage_args)other;

      lastComparison = Boolean.valueOf(isSetSig()).compareTo(typedOther.isSetSig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sig, typedOther.sig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.req, typedOther.req);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("evalMessage_args(");
      boolean first = true;

      sb.append("sig:");
      if (this.sig == null) {
        sb.append("null");
      } else {
        sb.append(this.sig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("req:");
      if (this.req == null) {
        sb.append("null");
      } else {
        sb.append(this.req);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sig != null) {
        sig.validate();
      }
      if (req != null) {
        req.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class evalMessage_argsStandardSchemeFactory implements SchemeFactory {
      public evalMessage_argsStandardScheme getScheme() {
        return new evalMessage_argsStandardScheme();
      }
    }

    private static class evalMessage_argsStandardScheme extends StandardScheme<evalMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, evalMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sig = new AuthSignature();
                struct.sig.read(iprot);
                struct.setSigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.req = new ReqEvalMessage();
                struct.req.read(iprot);
                struct.setReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, evalMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sig != null) {
          oprot.writeFieldBegin(SIG_FIELD_DESC);
          struct.sig.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.req != null) {
          oprot.writeFieldBegin(REQ_FIELD_DESC);
          struct.req.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class evalMessage_argsTupleSchemeFactory implements SchemeFactory {
      public evalMessage_argsTupleScheme getScheme() {
        return new evalMessage_argsTupleScheme();
      }
    }

    private static class evalMessage_argsTupleScheme extends TupleScheme<evalMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, evalMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSig()) {
          optionals.set(0);
        }
        if (struct.isSetReq()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSig()) {
          struct.sig.write(oprot);
        }
        if (struct.isSetReq()) {
          struct.req.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, evalMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sig = new AuthSignature();
          struct.sig.read(iprot);
          struct.setSigIsSet(true);
        }
        if (incoming.get(1)) {
          struct.req = new ReqEvalMessage();
          struct.req.read(iprot);
          struct.setReqIsSet(true);
        }
      }
    }

  }

  public static class evalMessage_result implements org.apache.thrift.TBase<evalMessage_result, evalMessage_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("evalMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new evalMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new evalMessage_resultTupleSchemeFactory());
    }

    public ResEvalMessage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResEvalMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(evalMessage_result.class, metaDataMap);
    }

    public evalMessage_result() {
    }

    public evalMessage_result(
      ResEvalMessage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public evalMessage_result(evalMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResEvalMessage(other.success);
      }
    }

    public evalMessage_result deepCopy() {
      return new evalMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResEvalMessage getSuccess() {
      return this.success;
    }

    public evalMessage_result setSuccess(ResEvalMessage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResEvalMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof evalMessage_result)
        return this.equals((evalMessage_result)that);
      return false;
    }

    public boolean equals(evalMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(evalMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      evalMessage_result typedOther = (evalMessage_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("evalMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class evalMessage_resultStandardSchemeFactory implements SchemeFactory {
      public evalMessage_resultStandardScheme getScheme() {
        return new evalMessage_resultStandardScheme();
      }
    }

    private static class evalMessage_resultStandardScheme extends StandardScheme<evalMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, evalMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResEvalMessage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, evalMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class evalMessage_resultTupleSchemeFactory implements SchemeFactory {
      public evalMessage_resultTupleScheme getScheme() {
        return new evalMessage_resultTupleScheme();
      }
    }

    private static class evalMessage_resultTupleScheme extends TupleScheme<evalMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, evalMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, evalMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResEvalMessage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class commentMessage_args implements org.apache.thrift.TBase<commentMessage_args, commentMessage_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("commentMessage_args");

    private static final org.apache.thrift.protocol.TField SIG_FIELD_DESC = new org.apache.thrift.protocol.TField("sig", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("req", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new commentMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new commentMessage_argsTupleSchemeFactory());
    }

    public AuthSignature sig; // required
    public ReqCommentMessage req; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIG((short)1, "sig"),
      REQ((short)2, "req");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIG
            return SIG;
          case 2: // REQ
            return REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIG, new org.apache.thrift.meta_data.FieldMetaData("sig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthSignature.class)));
      tmpMap.put(_Fields.REQ, new org.apache.thrift.meta_data.FieldMetaData("req", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReqCommentMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(commentMessage_args.class, metaDataMap);
    }

    public commentMessage_args() {
    }

    public commentMessage_args(
      AuthSignature sig,
      ReqCommentMessage req)
    {
      this();
      this.sig = sig;
      this.req = req;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commentMessage_args(commentMessage_args other) {
      if (other.isSetSig()) {
        this.sig = new AuthSignature(other.sig);
      }
      if (other.isSetReq()) {
        this.req = new ReqCommentMessage(other.req);
      }
    }

    public commentMessage_args deepCopy() {
      return new commentMessage_args(this);
    }

    @Override
    public void clear() {
      this.sig = null;
      this.req = null;
    }

    public AuthSignature getSig() {
      return this.sig;
    }

    public commentMessage_args setSig(AuthSignature sig) {
      this.sig = sig;
      return this;
    }

    public void unsetSig() {
      this.sig = null;
    }

    /** Returns true if field sig is set (has been assigned a value) and false otherwise */
    public boolean isSetSig() {
      return this.sig != null;
    }

    public void setSigIsSet(boolean value) {
      if (!value) {
        this.sig = null;
      }
    }

    public ReqCommentMessage getReq() {
      return this.req;
    }

    public commentMessage_args setReq(ReqCommentMessage req) {
      this.req = req;
      return this;
    }

    public void unsetReq() {
      this.req = null;
    }

    /** Returns true if field req is set (has been assigned a value) and false otherwise */
    public boolean isSetReq() {
      return this.req != null;
    }

    public void setReqIsSet(boolean value) {
      if (!value) {
        this.req = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIG:
        if (value == null) {
          unsetSig();
        } else {
          setSig((AuthSignature)value);
        }
        break;

      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          setReq((ReqCommentMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIG:
        return getSig();

      case REQ:
        return getReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIG:
        return isSetSig();
      case REQ:
        return isSetReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commentMessage_args)
        return this.equals((commentMessage_args)that);
      return false;
    }

    public boolean equals(commentMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_sig = true && this.isSetSig();
      boolean that_present_sig = true && that.isSetSig();
      if (this_present_sig || that_present_sig) {
        if (!(this_present_sig && that_present_sig))
          return false;
        if (!this.sig.equals(that.sig))
          return false;
      }

      boolean this_present_req = true && this.isSetReq();
      boolean that_present_req = true && that.isSetReq();
      if (this_present_req || that_present_req) {
        if (!(this_present_req && that_present_req))
          return false;
        if (!this.req.equals(that.req))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(commentMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      commentMessage_args typedOther = (commentMessage_args)other;

      lastComparison = Boolean.valueOf(isSetSig()).compareTo(typedOther.isSetSig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sig, typedOther.sig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.req, typedOther.req);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("commentMessage_args(");
      boolean first = true;

      sb.append("sig:");
      if (this.sig == null) {
        sb.append("null");
      } else {
        sb.append(this.sig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("req:");
      if (this.req == null) {
        sb.append("null");
      } else {
        sb.append(this.req);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sig != null) {
        sig.validate();
      }
      if (req != null) {
        req.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class commentMessage_argsStandardSchemeFactory implements SchemeFactory {
      public commentMessage_argsStandardScheme getScheme() {
        return new commentMessage_argsStandardScheme();
      }
    }

    private static class commentMessage_argsStandardScheme extends StandardScheme<commentMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, commentMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sig = new AuthSignature();
                struct.sig.read(iprot);
                struct.setSigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.req = new ReqCommentMessage();
                struct.req.read(iprot);
                struct.setReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, commentMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sig != null) {
          oprot.writeFieldBegin(SIG_FIELD_DESC);
          struct.sig.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.req != null) {
          oprot.writeFieldBegin(REQ_FIELD_DESC);
          struct.req.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class commentMessage_argsTupleSchemeFactory implements SchemeFactory {
      public commentMessage_argsTupleScheme getScheme() {
        return new commentMessage_argsTupleScheme();
      }
    }

    private static class commentMessage_argsTupleScheme extends TupleScheme<commentMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, commentMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSig()) {
          optionals.set(0);
        }
        if (struct.isSetReq()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSig()) {
          struct.sig.write(oprot);
        }
        if (struct.isSetReq()) {
          struct.req.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, commentMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sig = new AuthSignature();
          struct.sig.read(iprot);
          struct.setSigIsSet(true);
        }
        if (incoming.get(1)) {
          struct.req = new ReqCommentMessage();
          struct.req.read(iprot);
          struct.setReqIsSet(true);
        }
      }
    }

  }

  public static class commentMessage_result implements org.apache.thrift.TBase<commentMessage_result, commentMessage_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("commentMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new commentMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new commentMessage_resultTupleSchemeFactory());
    }

    public ResCommentMessage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResCommentMessage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(commentMessage_result.class, metaDataMap);
    }

    public commentMessage_result() {
    }

    public commentMessage_result(
      ResCommentMessage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commentMessage_result(commentMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResCommentMessage(other.success);
      }
    }

    public commentMessage_result deepCopy() {
      return new commentMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResCommentMessage getSuccess() {
      return this.success;
    }

    public commentMessage_result setSuccess(ResCommentMessage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResCommentMessage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commentMessage_result)
        return this.equals((commentMessage_result)that);
      return false;
    }

    public boolean equals(commentMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(commentMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      commentMessage_result typedOther = (commentMessage_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("commentMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class commentMessage_resultStandardSchemeFactory implements SchemeFactory {
      public commentMessage_resultStandardScheme getScheme() {
        return new commentMessage_resultStandardScheme();
      }
    }

    private static class commentMessage_resultStandardScheme extends StandardScheme<commentMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, commentMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResCommentMessage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, commentMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class commentMessage_resultTupleSchemeFactory implements SchemeFactory {
      public commentMessage_resultTupleScheme getScheme() {
        return new commentMessage_resultTupleScheme();
      }
    }

    private static class commentMessage_resultTupleScheme extends TupleScheme<commentMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, commentMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, commentMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResCommentMessage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadComments_args implements org.apache.thrift.TBase<loadComments_args, loadComments_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadComments_args");

    private static final org.apache.thrift.protocol.TField SIG_FIELD_DESC = new org.apache.thrift.protocol.TField("sig", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("req", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadComments_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadComments_argsTupleSchemeFactory());
    }

    public AuthSignature sig; // required
    public ReqLoadComments req; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIG((short)1, "sig"),
      REQ((short)2, "req");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIG
            return SIG;
          case 2: // REQ
            return REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIG, new org.apache.thrift.meta_data.FieldMetaData("sig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthSignature.class)));
      tmpMap.put(_Fields.REQ, new org.apache.thrift.meta_data.FieldMetaData("req", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReqLoadComments.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadComments_args.class, metaDataMap);
    }

    public loadComments_args() {
    }

    public loadComments_args(
      AuthSignature sig,
      ReqLoadComments req)
    {
      this();
      this.sig = sig;
      this.req = req;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadComments_args(loadComments_args other) {
      if (other.isSetSig()) {
        this.sig = new AuthSignature(other.sig);
      }
      if (other.isSetReq()) {
        this.req = new ReqLoadComments(other.req);
      }
    }

    public loadComments_args deepCopy() {
      return new loadComments_args(this);
    }

    @Override
    public void clear() {
      this.sig = null;
      this.req = null;
    }

    public AuthSignature getSig() {
      return this.sig;
    }

    public loadComments_args setSig(AuthSignature sig) {
      this.sig = sig;
      return this;
    }

    public void unsetSig() {
      this.sig = null;
    }

    /** Returns true if field sig is set (has been assigned a value) and false otherwise */
    public boolean isSetSig() {
      return this.sig != null;
    }

    public void setSigIsSet(boolean value) {
      if (!value) {
        this.sig = null;
      }
    }

    public ReqLoadComments getReq() {
      return this.req;
    }

    public loadComments_args setReq(ReqLoadComments req) {
      this.req = req;
      return this;
    }

    public void unsetReq() {
      this.req = null;
    }

    /** Returns true if field req is set (has been assigned a value) and false otherwise */
    public boolean isSetReq() {
      return this.req != null;
    }

    public void setReqIsSet(boolean value) {
      if (!value) {
        this.req = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIG:
        if (value == null) {
          unsetSig();
        } else {
          setSig((AuthSignature)value);
        }
        break;

      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          setReq((ReqLoadComments)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIG:
        return getSig();

      case REQ:
        return getReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIG:
        return isSetSig();
      case REQ:
        return isSetReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadComments_args)
        return this.equals((loadComments_args)that);
      return false;
    }

    public boolean equals(loadComments_args that) {
      if (that == null)
        return false;

      boolean this_present_sig = true && this.isSetSig();
      boolean that_present_sig = true && that.isSetSig();
      if (this_present_sig || that_present_sig) {
        if (!(this_present_sig && that_present_sig))
          return false;
        if (!this.sig.equals(that.sig))
          return false;
      }

      boolean this_present_req = true && this.isSetReq();
      boolean that_present_req = true && that.isSetReq();
      if (this_present_req || that_present_req) {
        if (!(this_present_req && that_present_req))
          return false;
        if (!this.req.equals(that.req))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(loadComments_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      loadComments_args typedOther = (loadComments_args)other;

      lastComparison = Boolean.valueOf(isSetSig()).compareTo(typedOther.isSetSig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sig, typedOther.sig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.req, typedOther.req);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadComments_args(");
      boolean first = true;

      sb.append("sig:");
      if (this.sig == null) {
        sb.append("null");
      } else {
        sb.append(this.sig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("req:");
      if (this.req == null) {
        sb.append("null");
      } else {
        sb.append(this.req);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sig != null) {
        sig.validate();
      }
      if (req != null) {
        req.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadComments_argsStandardSchemeFactory implements SchemeFactory {
      public loadComments_argsStandardScheme getScheme() {
        return new loadComments_argsStandardScheme();
      }
    }

    private static class loadComments_argsStandardScheme extends StandardScheme<loadComments_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadComments_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sig = new AuthSignature();
                struct.sig.read(iprot);
                struct.setSigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.req = new ReqLoadComments();
                struct.req.read(iprot);
                struct.setReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadComments_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sig != null) {
          oprot.writeFieldBegin(SIG_FIELD_DESC);
          struct.sig.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.req != null) {
          oprot.writeFieldBegin(REQ_FIELD_DESC);
          struct.req.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadComments_argsTupleSchemeFactory implements SchemeFactory {
      public loadComments_argsTupleScheme getScheme() {
        return new loadComments_argsTupleScheme();
      }
    }

    private static class loadComments_argsTupleScheme extends TupleScheme<loadComments_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadComments_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSig()) {
          optionals.set(0);
        }
        if (struct.isSetReq()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSig()) {
          struct.sig.write(oprot);
        }
        if (struct.isSetReq()) {
          struct.req.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadComments_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sig = new AuthSignature();
          struct.sig.read(iprot);
          struct.setSigIsSet(true);
        }
        if (incoming.get(1)) {
          struct.req = new ReqLoadComments();
          struct.req.read(iprot);
          struct.setReqIsSet(true);
        }
      }
    }

  }

  public static class loadComments_result implements org.apache.thrift.TBase<loadComments_result, loadComments_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadComments_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadComments_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadComments_resultTupleSchemeFactory());
    }

    public ResLoadComments success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResLoadComments.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadComments_result.class, metaDataMap);
    }

    public loadComments_result() {
    }

    public loadComments_result(
      ResLoadComments success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadComments_result(loadComments_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResLoadComments(other.success);
      }
    }

    public loadComments_result deepCopy() {
      return new loadComments_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResLoadComments getSuccess() {
      return this.success;
    }

    public loadComments_result setSuccess(ResLoadComments success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResLoadComments)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadComments_result)
        return this.equals((loadComments_result)that);
      return false;
    }

    public boolean equals(loadComments_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(loadComments_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      loadComments_result typedOther = (loadComments_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadComments_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadComments_resultStandardSchemeFactory implements SchemeFactory {
      public loadComments_resultStandardScheme getScheme() {
        return new loadComments_resultStandardScheme();
      }
    }

    private static class loadComments_resultStandardScheme extends StandardScheme<loadComments_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadComments_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResLoadComments();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadComments_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadComments_resultTupleSchemeFactory implements SchemeFactory {
      public loadComments_resultTupleScheme getScheme() {
        return new loadComments_resultTupleScheme();
      }
    }

    private static class loadComments_resultTupleScheme extends TupleScheme<loadComments_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadComments_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadComments_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResLoadComments();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadFollowerUIDs_args implements org.apache.thrift.TBase<loadFollowerUIDs_args, loadFollowerUIDs_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadFollowerUIDs_args");

    private static final org.apache.thrift.protocol.TField SIG_FIELD_DESC = new org.apache.thrift.protocol.TField("sig", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadFollowerUIDs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadFollowerUIDs_argsTupleSchemeFactory());
    }

    public AuthSignature sig; // required
    public String uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIG((short)1, "sig"),
      UID((short)2, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIG
            return SIG;
          case 2: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIG, new org.apache.thrift.meta_data.FieldMetaData("sig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthSignature.class)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "UID")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadFollowerUIDs_args.class, metaDataMap);
    }

    public loadFollowerUIDs_args() {
    }

    public loadFollowerUIDs_args(
      AuthSignature sig,
      String uid)
    {
      this();
      this.sig = sig;
      this.uid = uid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadFollowerUIDs_args(loadFollowerUIDs_args other) {
      if (other.isSetSig()) {
        this.sig = new AuthSignature(other.sig);
      }
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
    }

    public loadFollowerUIDs_args deepCopy() {
      return new loadFollowerUIDs_args(this);
    }

    @Override
    public void clear() {
      this.sig = null;
      this.uid = null;
    }

    public AuthSignature getSig() {
      return this.sig;
    }

    public loadFollowerUIDs_args setSig(AuthSignature sig) {
      this.sig = sig;
      return this;
    }

    public void unsetSig() {
      this.sig = null;
    }

    /** Returns true if field sig is set (has been assigned a value) and false otherwise */
    public boolean isSetSig() {
      return this.sig != null;
    }

    public void setSigIsSet(boolean value) {
      if (!value) {
        this.sig = null;
      }
    }

    public String getUid() {
      return this.uid;
    }

    public loadFollowerUIDs_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIG:
        if (value == null) {
          unsetSig();
        } else {
          setSig((AuthSignature)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIG:
        return getSig();

      case UID:
        return getUid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIG:
        return isSetSig();
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadFollowerUIDs_args)
        return this.equals((loadFollowerUIDs_args)that);
      return false;
    }

    public boolean equals(loadFollowerUIDs_args that) {
      if (that == null)
        return false;

      boolean this_present_sig = true && this.isSetSig();
      boolean that_present_sig = true && that.isSetSig();
      if (this_present_sig || that_present_sig) {
        if (!(this_present_sig && that_present_sig))
          return false;
        if (!this.sig.equals(that.sig))
          return false;
      }

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(loadFollowerUIDs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      loadFollowerUIDs_args typedOther = (loadFollowerUIDs_args)other;

      lastComparison = Boolean.valueOf(isSetSig()).compareTo(typedOther.isSetSig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sig, typedOther.sig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadFollowerUIDs_args(");
      boolean first = true;

      sb.append("sig:");
      if (this.sig == null) {
        sb.append("null");
      } else {
        sb.append(this.sig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sig != null) {
        sig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadFollowerUIDs_argsStandardSchemeFactory implements SchemeFactory {
      public loadFollowerUIDs_argsStandardScheme getScheme() {
        return new loadFollowerUIDs_argsStandardScheme();
      }
    }

    private static class loadFollowerUIDs_argsStandardScheme extends StandardScheme<loadFollowerUIDs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadFollowerUIDs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sig = new AuthSignature();
                struct.sig.read(iprot);
                struct.setSigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uid = iprot.readString();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadFollowerUIDs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sig != null) {
          oprot.writeFieldBegin(SIG_FIELD_DESC);
          struct.sig.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.uid != null) {
          oprot.writeFieldBegin(UID_FIELD_DESC);
          oprot.writeString(struct.uid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadFollowerUIDs_argsTupleSchemeFactory implements SchemeFactory {
      public loadFollowerUIDs_argsTupleScheme getScheme() {
        return new loadFollowerUIDs_argsTupleScheme();
      }
    }

    private static class loadFollowerUIDs_argsTupleScheme extends TupleScheme<loadFollowerUIDs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadFollowerUIDs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSig()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSig()) {
          struct.sig.write(oprot);
        }
        if (struct.isSetUid()) {
          oprot.writeString(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadFollowerUIDs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sig = new AuthSignature();
          struct.sig.read(iprot);
          struct.setSigIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readString();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class loadFollowerUIDs_result implements org.apache.thrift.TBase<loadFollowerUIDs_result, loadFollowerUIDs_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadFollowerUIDs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadFollowerUIDs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadFollowerUIDs_resultTupleSchemeFactory());
    }

    public ResLoadFollowerUIDs success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResLoadFollowerUIDs.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadFollowerUIDs_result.class, metaDataMap);
    }

    public loadFollowerUIDs_result() {
    }

    public loadFollowerUIDs_result(
      ResLoadFollowerUIDs success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadFollowerUIDs_result(loadFollowerUIDs_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResLoadFollowerUIDs(other.success);
      }
    }

    public loadFollowerUIDs_result deepCopy() {
      return new loadFollowerUIDs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResLoadFollowerUIDs getSuccess() {
      return this.success;
    }

    public loadFollowerUIDs_result setSuccess(ResLoadFollowerUIDs success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResLoadFollowerUIDs)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadFollowerUIDs_result)
        return this.equals((loadFollowerUIDs_result)that);
      return false;
    }

    public boolean equals(loadFollowerUIDs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(loadFollowerUIDs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      loadFollowerUIDs_result typedOther = (loadFollowerUIDs_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadFollowerUIDs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadFollowerUIDs_resultStandardSchemeFactory implements SchemeFactory {
      public loadFollowerUIDs_resultStandardScheme getScheme() {
        return new loadFollowerUIDs_resultStandardScheme();
      }
    }

    private static class loadFollowerUIDs_resultStandardScheme extends StandardScheme<loadFollowerUIDs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadFollowerUIDs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResLoadFollowerUIDs();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadFollowerUIDs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadFollowerUIDs_resultTupleSchemeFactory implements SchemeFactory {
      public loadFollowerUIDs_resultTupleScheme getScheme() {
        return new loadFollowerUIDs_resultTupleScheme();
      }
    }

    private static class loadFollowerUIDs_resultTupleScheme extends TupleScheme<loadFollowerUIDs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadFollowerUIDs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadFollowerUIDs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResLoadFollowerUIDs();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
