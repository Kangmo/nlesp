/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thxsoft.vds.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MessageComment implements org.apache.thrift.TBase<MessageComment, MessageComment._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageComment");

  private static final org.apache.thrift.protocol.TField COMMENTER_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("commenterUID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COMMENT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("commentTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MessageCommentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MessageCommentTupleSchemeFactory());
  }

  public String commenterUID; // required
  public long commentTime; // required
  public ByteBuffer comment; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMENTER_UID((short)1, "commenterUID"),
    COMMENT_TIME((short)2, "commentTime"),
    COMMENT((short)3, "comment");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMENTER_UID
          return COMMENTER_UID;
        case 2: // COMMENT_TIME
          return COMMENT_TIME;
        case 3: // COMMENT
          return COMMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMMENTTIME_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMENTER_UID, new org.apache.thrift.meta_data.FieldMetaData("commenterUID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UID")));
    tmpMap.put(_Fields.COMMENT_TIME, new org.apache.thrift.meta_data.FieldMetaData("commentTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageComment.class, metaDataMap);
  }

  public MessageComment() {
  }

  public MessageComment(
    String commenterUID,
    long commentTime,
    ByteBuffer comment)
  {
    this();
    this.commenterUID = commenterUID;
    this.commentTime = commentTime;
    setCommentTimeIsSet(true);
    this.comment = comment;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MessageComment(MessageComment other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCommenterUID()) {
      this.commenterUID = other.commenterUID;
    }
    this.commentTime = other.commentTime;
    if (other.isSetComment()) {
      this.comment = org.apache.thrift.TBaseHelper.copyBinary(other.comment);
;
    }
  }

  public MessageComment deepCopy() {
    return new MessageComment(this);
  }

  @Override
  public void clear() {
    this.commenterUID = null;
    setCommentTimeIsSet(false);
    this.commentTime = 0;
    this.comment = null;
  }

  public String getCommenterUID() {
    return this.commenterUID;
  }

  public MessageComment setCommenterUID(String commenterUID) {
    this.commenterUID = commenterUID;
    return this;
  }

  public void unsetCommenterUID() {
    this.commenterUID = null;
  }

  /** Returns true if field commenterUID is set (has been assigned a value) and false otherwise */
  public boolean isSetCommenterUID() {
    return this.commenterUID != null;
  }

  public void setCommenterUIDIsSet(boolean value) {
    if (!value) {
      this.commenterUID = null;
    }
  }

  public long getCommentTime() {
    return this.commentTime;
  }

  public MessageComment setCommentTime(long commentTime) {
    this.commentTime = commentTime;
    setCommentTimeIsSet(true);
    return this;
  }

  public void unsetCommentTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMENTTIME_ISSET_ID);
  }

  /** Returns true if field commentTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentTime() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMENTTIME_ISSET_ID);
  }

  public void setCommentTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMENTTIME_ISSET_ID, value);
  }

  public byte[] getComment() {
    setComment(org.apache.thrift.TBaseHelper.rightSize(comment));
    return comment == null ? null : comment.array();
  }

  public ByteBuffer bufferForComment() {
    return comment;
  }

  public MessageComment setComment(byte[] comment) {
    setComment(comment == null ? (ByteBuffer)null : ByteBuffer.wrap(comment));
    return this;
  }

  public MessageComment setComment(ByteBuffer comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMMENTER_UID:
      if (value == null) {
        unsetCommenterUID();
      } else {
        setCommenterUID((String)value);
      }
      break;

    case COMMENT_TIME:
      if (value == null) {
        unsetCommentTime();
      } else {
        setCommentTime((Long)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMENTER_UID:
      return getCommenterUID();

    case COMMENT_TIME:
      return Long.valueOf(getCommentTime());

    case COMMENT:
      return getComment();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMMENTER_UID:
      return isSetCommenterUID();
    case COMMENT_TIME:
      return isSetCommentTime();
    case COMMENT:
      return isSetComment();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MessageComment)
      return this.equals((MessageComment)that);
    return false;
  }

  public boolean equals(MessageComment that) {
    if (that == null)
      return false;

    boolean this_present_commenterUID = true && this.isSetCommenterUID();
    boolean that_present_commenterUID = true && that.isSetCommenterUID();
    if (this_present_commenterUID || that_present_commenterUID) {
      if (!(this_present_commenterUID && that_present_commenterUID))
        return false;
      if (!this.commenterUID.equals(that.commenterUID))
        return false;
    }

    boolean this_present_commentTime = true;
    boolean that_present_commentTime = true;
    if (this_present_commentTime || that_present_commentTime) {
      if (!(this_present_commentTime && that_present_commentTime))
        return false;
      if (this.commentTime != that.commentTime)
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MessageComment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MessageComment typedOther = (MessageComment)other;

    lastComparison = Boolean.valueOf(isSetCommenterUID()).compareTo(typedOther.isSetCommenterUID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommenterUID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commenterUID, typedOther.commenterUID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentTime()).compareTo(typedOther.isSetCommentTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentTime, typedOther.commentTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(typedOther.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, typedOther.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MessageComment(");
    boolean first = true;

    sb.append("commenterUID:");
    if (this.commenterUID == null) {
      sb.append("null");
    } else {
      sb.append(this.commenterUID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("commentTime:");
    sb.append(this.commentTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("comment:");
    if (this.comment == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.comment, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageCommentStandardSchemeFactory implements SchemeFactory {
    public MessageCommentStandardScheme getScheme() {
      return new MessageCommentStandardScheme();
    }
  }

  private static class MessageCommentStandardScheme extends StandardScheme<MessageComment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MessageComment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMENTER_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commenterUID = iprot.readString();
              struct.setCommenterUIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMMENT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.commentTime = iprot.readI64();
              struct.setCommentTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readBinary();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MessageComment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.commenterUID != null) {
        oprot.writeFieldBegin(COMMENTER_UID_FIELD_DESC);
        oprot.writeString(struct.commenterUID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COMMENT_TIME_FIELD_DESC);
      oprot.writeI64(struct.commentTime);
      oprot.writeFieldEnd();
      if (struct.comment != null) {
        oprot.writeFieldBegin(COMMENT_FIELD_DESC);
        oprot.writeBinary(struct.comment);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageCommentTupleSchemeFactory implements SchemeFactory {
    public MessageCommentTupleScheme getScheme() {
      return new MessageCommentTupleScheme();
    }
  }

  private static class MessageCommentTupleScheme extends TupleScheme<MessageComment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MessageComment struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCommenterUID()) {
        optionals.set(0);
      }
      if (struct.isSetCommentTime()) {
        optionals.set(1);
      }
      if (struct.isSetComment()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCommenterUID()) {
        oprot.writeString(struct.commenterUID);
      }
      if (struct.isSetCommentTime()) {
        oprot.writeI64(struct.commentTime);
      }
      if (struct.isSetComment()) {
        oprot.writeBinary(struct.comment);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MessageComment struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.commenterUID = iprot.readString();
        struct.setCommenterUIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.commentTime = iprot.readI64();
        struct.setCommentTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.comment = iprot.readBinary();
        struct.setCommentIsSet(true);
      }
    }
  }

}

