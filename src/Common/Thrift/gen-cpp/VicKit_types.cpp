/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "VicKit_types.h"

#include <algorithm>

namespace VicKit {

int _kErrorCodeValues[] = {
  ErrorCode::VKSuccess,
  ErrorCode::VKErrorUnknown,
  ErrorCode::VKErrorCancelled,
  ErrorCode::VKErrorCommunicationsFailure,
  ErrorCode::VKErrorUserDenied,
  ErrorCode::VKErrorInvalidCredentials,
  ErrorCode::VKErrorNotAuthenticated,
  ErrorCode::VKErrorAuthenticationInProgress,
  ErrorCode::VKErrorInvalidPlayer,
  ErrorCode::VKErrorScoreNotSet,
  ErrorCode::VKErrorParentalControlsBlocked,
  ErrorCode::VKErrorPlayerStatusExceedsMaximumLength,
  ErrorCode::VKErrorPlayerStatusInvalid,
  ErrorCode::VKErrorMatchRequestInvalid,
  ErrorCode::VKErrorUnderage,
  ErrorCode::VKErrorGameUnrecognized,
  ErrorCode::VKErrorNotSupported,
  ErrorCode::VKErrorInvalidParameter,
  ErrorCode::VKErrorUnexpectedConnection,
  ErrorCode::VKErrorChallengeInvalid,
  ErrorCode::VKErrorTurnBasedMatchDataTooLarge,
  ErrorCode::VKErrorTurnBasedTooManySessions,
  ErrorCode::VKErrorTurnBasedInvalidParticipant,
  ErrorCode::VKErrorTurnBasedInvalidTurn,
  ErrorCode::VKErrorTurnBasedInvalidState
};
const char* _kErrorCodeNames[] = {
  "VKSuccess",
  "VKErrorUnknown",
  "VKErrorCancelled",
  "VKErrorCommunicationsFailure",
  "VKErrorUserDenied",
  "VKErrorInvalidCredentials",
  "VKErrorNotAuthenticated",
  "VKErrorAuthenticationInProgress",
  "VKErrorInvalidPlayer",
  "VKErrorScoreNotSet",
  "VKErrorParentalControlsBlocked",
  "VKErrorPlayerStatusExceedsMaximumLength",
  "VKErrorPlayerStatusInvalid",
  "VKErrorMatchRequestInvalid",
  "VKErrorUnderage",
  "VKErrorGameUnrecognized",
  "VKErrorNotSupported",
  "VKErrorInvalidParameter",
  "VKErrorUnexpectedConnection",
  "VKErrorChallengeInvalid",
  "VKErrorTurnBasedMatchDataTooLarge",
  "VKErrorTurnBasedTooManySessions",
  "VKErrorTurnBasedInvalidParticipant",
  "VKErrorTurnBasedInvalidTurn",
  "VKErrorTurnBasedInvalidState"
};
const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(25, _kErrorCodeValues, _kErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDetailedErrorCodeValues[] = {
  DetailedErrorCode::VKErrorDetailUserNotFound,
  DetailedErrorCode::VKErrorDetailInvalidUserIdentifierFormat,
  DetailedErrorCode::VKErrorDetailFriendIsRequester,
  DetailedErrorCode::VKErrorDetailEmailNotFound,
  DetailedErrorCode::VKErrorDetailInvalidPassword,
  DetailedErrorCode::VKErrorDetailEmptyEmailOnUserProfile,
  DetailedErrorCode::VKErrorDetailEmptyPasswordOnUserProfile,
  DetailedErrorCode::VKErrorDetailEmptyUserIdentifierOnUserProfile,
  DetailedErrorCode::VKErrorDetailEmailAlreadyExists,
  DetailedErrorCode::VKErrorDetailUnableToUpdateOtherUserProfile,
  DetailedErrorCode::VKErrorDetailUnableToChangeEmail,
  DetailedErrorCode::VKErrorDetailInvalidContextIdentifier,
  DetailedErrorCode::VKErrorDetailContextNotFound,
  DetailedErrorCode::VKErrorDetailExceedMaxUsers,
  DetailedErrorCode::VKErrorDetailTooLowClientVersion
};
const char* _kDetailedErrorCodeNames[] = {
  "VKErrorDetailUserNotFound",
  "VKErrorDetailInvalidUserIdentifierFormat",
  "VKErrorDetailFriendIsRequester",
  "VKErrorDetailEmailNotFound",
  "VKErrorDetailInvalidPassword",
  "VKErrorDetailEmptyEmailOnUserProfile",
  "VKErrorDetailEmptyPasswordOnUserProfile",
  "VKErrorDetailEmptyUserIdentifierOnUserProfile",
  "VKErrorDetailEmailAlreadyExists",
  "VKErrorDetailUnableToUpdateOtherUserProfile",
  "VKErrorDetailUnableToChangeEmail",
  "VKErrorDetailInvalidContextIdentifier",
  "VKErrorDetailContextNotFound",
  "VKErrorDetailExceedMaxUsers",
  "VKErrorDetailTooLowClientVersion"
};
const std::map<int, const char*> _DetailedErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(15, _kDetailedErrorCodeValues, _kDetailedErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMessageTypeValues[] = {
  MessageType::MT_CONTEXT_INVITATION,
  MessageType::MT_FRIEND_REQUEST,
  MessageType::MT_PERSONAL_MESSAGE,
  MessageType::MT_CONTEXT_MESSAGE
};
const char* _kMessageTypeNames[] = {
  "MT_CONTEXT_INVITATION",
  "MT_FRIEND_REQUEST",
  "MT_PERSONAL_MESSAGE",
  "MT_CONTEXT_MESSAGE"
};
const std::map<int, const char*> _MessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kMessageTypeValues, _kMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMessageEvaluationTypeValues[] = {
  MessageEvaluationType::Like,
  MessageEvaluationType::Dislike,
  MessageEvaluationType::CancelLike,
  MessageEvaluationType::CancelDislike
};
const char* _kMessageEvaluationTypeNames[] = {
  "Like",
  "Dislike",
  "CancelLike",
  "CancelDislike"
};
const std::map<int, const char*> _MessageEvaluationType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kMessageEvaluationTypeValues, _kMessageEvaluationTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* ErrorDetail::ascii_fingerprint = "D121591FCC85D0E17C727CA264A5F46D";
const uint8_t ErrorDetail::binary_fingerprint[16] = {0xD1,0x21,0x59,0x1F,0xCC,0x85,0xD0,0xE1,0x7C,0x72,0x7C,0xA2,0x64,0xA5,0xF4,0x6D};

uint32_t ErrorDetail::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->detailedCode = (DetailedErrorCode::type)ecast0;
          this->__isset.detailedCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->detailedMessageFormat);
          this->__isset.detailedMessageFormat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->detailedMessageArgs.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->detailedMessageArgs.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += iprot->readString(this->detailedMessageArgs[_i5]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.detailedMessageArgs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ErrorDetail::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ErrorDetail");

  xfer += oprot->writeFieldBegin("detailedCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->detailedCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("detailedMessageFormat", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->detailedMessageFormat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("detailedMessageArgs", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->detailedMessageArgs.size()));
    std::vector<std::string> ::const_iterator _iter6;
    for (_iter6 = this->detailedMessageArgs.begin(); _iter6 != this->detailedMessageArgs.end(); ++_iter6)
    {
      xfer += oprot->writeString((*_iter6));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ErrorDetail &a, ErrorDetail &b) {
  using ::std::swap;
  swap(a.detailedCode, b.detailedCode);
  swap(a.detailedMessageFormat, b.detailedMessageFormat);
  swap(a.detailedMessageArgs, b.detailedMessageArgs);
  swap(a.__isset, b.__isset);
}

const char* ErrorDesc::ascii_fingerprint = "040B452B3394430288A81F0BF195438F";
const uint8_t ErrorDesc::binary_fingerprint[16] = {0x04,0x0B,0x45,0x2B,0x33,0x94,0x43,0x02,0x88,0xA8,0x1F,0x0B,0xF1,0x95,0x43,0x8F};

uint32_t ErrorDesc::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast7;
          xfer += iprot->readI32(ecast7);
          this->code = (ErrorCode::type)ecast7;
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->detail.read(iprot);
          this->__isset.detail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ErrorDesc::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ErrorDesc");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("detail", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->detail.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ErrorDesc &a, ErrorDesc &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.message, b.message);
  swap(a.detail, b.detail);
  swap(a.__isset, b.__isset);
}

const char* UserProfile::ascii_fingerprint = "873CB9E5A4C10A7ECE7476FD192F55EE";
const uint8_t UserProfile::binary_fingerprint[16] = {0x87,0x3C,0xB9,0xE5,0xA4,0xC1,0x0A,0x7E,0xCE,0x74,0x76,0xFD,0x19,0x2F,0x55,0xEE};

uint32_t UserProfile::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->encryptedPassword);
          this->__isset.encryptedPassword = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->statusMessage);
          this->__isset.statusMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->photo);
          this->__isset.photo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserProfile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UserProfile");

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("encryptedPassword", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->encryptedPassword);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statusMessage", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->statusMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("photo", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeBinary(this->photo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserProfile &a, UserProfile &b) {
  using ::std::swap;
  swap(a.uid, b.uid);
  swap(a.email, b.email);
  swap(a.encryptedPassword, b.encryptedPassword);
  swap(a.name, b.name);
  swap(a.statusMessage, b.statusMessage);
  swap(a.photo, b.photo);
  swap(a.__isset, b.__isset);
}

const char* ReqAuthenticateUser::ascii_fingerprint = "A0ED90CE9B69D7A0FCE24E26CAECD2AF";
const uint8_t ReqAuthenticateUser::binary_fingerprint[16] = {0xA0,0xED,0x90,0xCE,0x9B,0x69,0xD7,0xA0,0xFC,0xE2,0x4E,0x26,0xCA,0xEC,0xD2,0xAF};

uint32_t ReqAuthenticateUser::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->encryptedPassword);
          this->__isset.encryptedPassword = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->clientVersion);
          this->__isset.clientVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReqAuthenticateUser::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ReqAuthenticateUser");

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("encryptedPassword", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->encryptedPassword);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clientVersion", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->clientVersion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReqAuthenticateUser &a, ReqAuthenticateUser &b) {
  using ::std::swap;
  swap(a.email, b.email);
  swap(a.encryptedPassword, b.encryptedPassword);
  swap(a.clientVersion, b.clientVersion);
  swap(a.__isset, b.__isset);
}

const char* AuthSignature::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t AuthSignature::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t AuthSignature::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->signature);
          this->__isset.signature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AuthSignature::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AuthSignature");

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("signature", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->signature);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AuthSignature &a, AuthSignature &b) {
  using ::std::swap;
  swap(a.uid, b.uid);
  swap(a.signature, b.signature);
  swap(a.__isset, b.__isset);
}

const char* ReqSendMessage::ascii_fingerprint = "727CAEA8265A5DE67DBC931F55CD8753";
const uint8_t ReqSendMessage::binary_fingerprint[16] = {0x72,0x7C,0xAE,0xA8,0x26,0x5A,0x5D,0xE6,0x7D,0xBC,0x93,0x1F,0x55,0xCD,0x87,0x53};

uint32_t ReqSendMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cid);
          this->__isset.cid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReqSendMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ReqSendMessage");

  xfer += oprot->writeFieldBegin("cid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->cid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReqSendMessage &a, ReqSendMessage &b) {
  using ::std::swap;
  swap(a.cid, b.cid);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

const char* ReqPullMessages::ascii_fingerprint = "F33135321253DAEB67B0E79E416CA831";
const uint8_t ReqPullMessages::binary_fingerprint[16] = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

uint32_t ReqPullMessages::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startMessageID);
          this->__isset.startMessageID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->stopMessageID);
          this->__isset.stopMessageID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReqPullMessages::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ReqPullMessages");

  xfer += oprot->writeFieldBegin("startMessageID", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->startMessageID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stopMessageID", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->stopMessageID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReqPullMessages &a, ReqPullMessages &b) {
  using ::std::swap;
  swap(a.startMessageID, b.startMessageID);
  swap(a.stopMessageID, b.stopMessageID);
  swap(a.__isset, b.__isset);
}

const char* ContextInvitationMessage::ascii_fingerprint = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
const uint8_t ContextInvitationMessage::binary_fingerprint[16] = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

uint32_t ContextInvitationMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->playersToInvite.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            xfer += iprot->readListBegin(_etype11, _size8);
            this->playersToInvite.resize(_size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              xfer += iprot->readString(this->playersToInvite[_i12]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.playersToInvite = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ContextInvitationMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ContextInvitationMessage");

  xfer += oprot->writeFieldBegin("playersToInvite", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->playersToInvite.size()));
    std::vector<UID> ::const_iterator _iter13;
    for (_iter13 = this->playersToInvite.begin(); _iter13 != this->playersToInvite.end(); ++_iter13)
    {
      xfer += oprot->writeString((*_iter13));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ContextInvitationMessage &a, ContextInvitationMessage &b) {
  using ::std::swap;
  swap(a.playersToInvite, b.playersToInvite);
  swap(a.__isset, b.__isset);
}

const char* ContextMessageContent::ascii_fingerprint = "335B2DCF77BA3E783C9F2E378937BB97";
const uint8_t ContextMessageContent::binary_fingerprint[16] = {0x33,0x5B,0x2D,0xCF,0x77,0xBA,0x3E,0x78,0x3C,0x9F,0x2E,0x37,0x89,0x37,0xBB,0x97};

uint32_t ContextMessageContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->senderContextId);
          this->__isset.senderContextId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->senderMessageId);
          this->__isset.senderMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->senderUID);
          this->__isset.senderUID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sentTime);
          this->__isset.sentTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast14;
          xfer += iprot->readI32(ecast14);
          this->messageType = (MessageType::type)ecast14;
          this->__isset.messageType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ContextMessageContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ContextMessageContent");

  xfer += oprot->writeFieldBegin("senderContextId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->senderContextId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("senderMessageId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->senderMessageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("senderUID", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->senderUID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sentTime", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->sentTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageType", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->messageType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeBinary(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ContextMessageContent &a, ContextMessageContent &b) {
  using ::std::swap;
  swap(a.senderContextId, b.senderContextId);
  swap(a.senderMessageId, b.senderMessageId);
  swap(a.senderUID, b.senderUID);
  swap(a.sentTime, b.sentTime);
  swap(a.messageType, b.messageType);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

const char* ContextMessage::ascii_fingerprint = "BD87BF25B54441568DF26984013C7974";
const uint8_t ContextMessage::binary_fingerprint[16] = {0xBD,0x87,0xBF,0x25,0xB5,0x44,0x41,0x56,0x8D,0xF2,0x69,0x84,0x01,0x3C,0x79,0x74};

uint32_t ContextMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->messageContent.read(iprot);
          this->__isset.messageContent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->messageID);
          this->__isset.messageID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->commentCount);
          this->__isset.commentCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->likeCount);
          this->__isset.likeCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dislikeCount);
          this->__isset.dislikeCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ContextMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ContextMessage");

  xfer += oprot->writeFieldBegin("messageContent", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->messageContent.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageID", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->messageID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commentCount", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->commentCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("likeCount", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->likeCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dislikeCount", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->dislikeCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ContextMessage &a, ContextMessage &b) {
  using ::std::swap;
  swap(a.messageContent, b.messageContent);
  swap(a.messageID, b.messageID);
  swap(a.commentCount, b.commentCount);
  swap(a.likeCount, b.likeCount);
  swap(a.dislikeCount, b.dislikeCount);
  swap(a.__isset, b.__isset);
}

const char* ResAuthenticateUser::ascii_fingerprint = "647D755E82CE2BB3D8B19699B183E1AD";
const uint8_t ResAuthenticateUser::binary_fingerprint[16] = {0x64,0x7D,0x75,0x5E,0x82,0xCE,0x2B,0xB3,0xD8,0xB1,0x96,0x99,0xB1,0x83,0xE1,0xAD};

uint32_t ResAuthenticateUser::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->userProfile.read(iprot);
          this->__isset.userProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->authSignature.read(iprot);
          this->__isset.authSignature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResAuthenticateUser::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ResAuthenticateUser");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userProfile", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->userProfile.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("authSignature", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->authSignature.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResAuthenticateUser &a, ResAuthenticateUser &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.userProfile, b.userProfile);
  swap(a.authSignature, b.authSignature);
  swap(a.__isset, b.__isset);
}

const char* ResCreateUserProfile::ascii_fingerprint = "6DB0179F3F86832C254FDFF185C10DFC";
const uint8_t ResCreateUserProfile::binary_fingerprint[16] = {0x6D,0xB0,0x17,0x9F,0x3F,0x86,0x83,0x2C,0x25,0x4F,0xDF,0xF1,0x85,0xC1,0x0D,0xFC};

uint32_t ResCreateUserProfile::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->createdUserId);
          this->__isset.createdUserId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResCreateUserProfile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ResCreateUserProfile");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdUserId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->createdUserId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResCreateUserProfile &a, ResCreateUserProfile &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.createdUserId, b.createdUserId);
  swap(a.__isset, b.__isset);
}

const char* ResUpdateUserProfile::ascii_fingerprint = "FF4B6ED920BC7240E80FDE40D8C08F4F";
const uint8_t ResUpdateUserProfile::binary_fingerprint[16] = {0xFF,0x4B,0x6E,0xD9,0x20,0xBC,0x72,0x40,0xE8,0x0F,0xDE,0x40,0xD8,0xC0,0x8F,0x4F};

uint32_t ResUpdateUserProfile::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResUpdateUserProfile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ResUpdateUserProfile");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResUpdateUserProfile &a, ResUpdateUserProfile &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.__isset, b.__isset);
}

const char* ResLoadUserProfiles::ascii_fingerprint = "19F5F72C1ED413ACC82D155050F29A71";
const uint8_t ResLoadUserProfiles::binary_fingerprint[16] = {0x19,0xF5,0xF7,0x2C,0x1E,0xD4,0x13,0xAC,0xC8,0x2D,0x15,0x50,0x50,0xF2,0x9A,0x71};

uint32_t ResLoadUserProfiles::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->userProfiles.clear();
            uint32_t _size15;
            ::apache::thrift::protocol::TType _etype18;
            xfer += iprot->readListBegin(_etype18, _size15);
            this->userProfiles.resize(_size15);
            uint32_t _i19;
            for (_i19 = 0; _i19 < _size15; ++_i19)
            {
              xfer += this->userProfiles[_i19].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.userProfiles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResLoadUserProfiles::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ResLoadUserProfiles");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userProfiles", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->userProfiles.size()));
    std::vector<UserProfile> ::const_iterator _iter20;
    for (_iter20 = this->userProfiles.begin(); _iter20 != this->userProfiles.end(); ++_iter20)
    {
      xfer += (*_iter20).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResLoadUserProfiles &a, ResLoadUserProfiles &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.userProfiles, b.userProfiles);
  swap(a.__isset, b.__isset);
}

const char* ResLoadFriendProfiles::ascii_fingerprint = "19F5F72C1ED413ACC82D155050F29A71";
const uint8_t ResLoadFriendProfiles::binary_fingerprint[16] = {0x19,0xF5,0xF7,0x2C,0x1E,0xD4,0x13,0xAC,0xC8,0x2D,0x15,0x50,0x50,0xF2,0x9A,0x71};

uint32_t ResLoadFriendProfiles::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->friendProfiles.clear();
            uint32_t _size21;
            ::apache::thrift::protocol::TType _etype24;
            xfer += iprot->readListBegin(_etype24, _size21);
            this->friendProfiles.resize(_size21);
            uint32_t _i25;
            for (_i25 = 0; _i25 < _size21; ++_i25)
            {
              xfer += this->friendProfiles[_i25].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.friendProfiles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResLoadFriendProfiles::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ResLoadFriendProfiles");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friendProfiles", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->friendProfiles.size()));
    std::vector<UserProfile> ::const_iterator _iter26;
    for (_iter26 = this->friendProfiles.begin(); _iter26 != this->friendProfiles.end(); ++_iter26)
    {
      xfer += (*_iter26).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResLoadFriendProfiles &a, ResLoadFriendProfiles &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.friendProfiles, b.friendProfiles);
  swap(a.__isset, b.__isset);
}

const char* ResLoadFriendUIDs::ascii_fingerprint = "B454485740DBB46F7F80F23EE0D26E05";
const uint8_t ResLoadFriendUIDs::binary_fingerprint[16] = {0xB4,0x54,0x48,0x57,0x40,0xDB,0xB4,0x6F,0x7F,0x80,0xF2,0x3E,0xE0,0xD2,0x6E,0x05};

uint32_t ResLoadFriendUIDs::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->friendUIDs.clear();
            uint32_t _size27;
            ::apache::thrift::protocol::TType _etype30;
            xfer += iprot->readListBegin(_etype30, _size27);
            this->friendUIDs.resize(_size27);
            uint32_t _i31;
            for (_i31 = 0; _i31 < _size27; ++_i31)
            {
              xfer += iprot->readString(this->friendUIDs[_i31]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.friendUIDs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResLoadFriendUIDs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ResLoadFriendUIDs");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friendUIDs", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->friendUIDs.size()));
    std::vector<UID> ::const_iterator _iter32;
    for (_iter32 = this->friendUIDs.begin(); _iter32 != this->friendUIDs.end(); ++_iter32)
    {
      xfer += oprot->writeString((*_iter32));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResLoadFriendUIDs &a, ResLoadFriendUIDs &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.friendUIDs, b.friendUIDs);
  swap(a.__isset, b.__isset);
}

const char* ResRequestFriend::ascii_fingerprint = "78629E0B6492BA4BA4865C3F60548F39";
const uint8_t ResRequestFriend::binary_fingerprint[16] = {0x78,0x62,0x9E,0x0B,0x64,0x92,0xBA,0x4B,0xA4,0x86,0x5C,0x3F,0x60,0x54,0x8F,0x39};

uint32_t ResRequestFriend::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->friendProfile.read(iprot);
          this->__isset.friendProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResRequestFriend::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ResRequestFriend");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("friendProfile", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->friendProfile.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResRequestFriend &a, ResRequestFriend &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.friendProfile, b.friendProfile);
  swap(a.__isset, b.__isset);
}

const char* ResCancelFriend::ascii_fingerprint = "78629E0B6492BA4BA4865C3F60548F39";
const uint8_t ResCancelFriend::binary_fingerprint[16] = {0x78,0x62,0x9E,0x0B,0x64,0x92,0xBA,0x4B,0xA4,0x86,0x5C,0x3F,0x60,0x54,0x8F,0x39};

uint32_t ResCancelFriend::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->canceldFriendProfile.read(iprot);
          this->__isset.canceldFriendProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResCancelFriend::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ResCancelFriend");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("canceldFriendProfile", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->canceldFriendProfile.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResCancelFriend &a, ResCancelFriend &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.canceldFriendProfile, b.canceldFriendProfile);
  swap(a.__isset, b.__isset);
}

const char* ResSearchUsers::ascii_fingerprint = "19F5F72C1ED413ACC82D155050F29A71";
const uint8_t ResSearchUsers::binary_fingerprint[16] = {0x19,0xF5,0xF7,0x2C,0x1E,0xD4,0x13,0xAC,0xC8,0x2D,0x15,0x50,0x50,0xF2,0x9A,0x71};

uint32_t ResSearchUsers::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->userProfiles.clear();
            uint32_t _size33;
            ::apache::thrift::protocol::TType _etype36;
            xfer += iprot->readListBegin(_etype36, _size33);
            this->userProfiles.resize(_size33);
            uint32_t _i37;
            for (_i37 = 0; _i37 < _size33; ++_i37)
            {
              xfer += this->userProfiles[_i37].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.userProfiles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResSearchUsers::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ResSearchUsers");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userProfiles", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->userProfiles.size()));
    std::vector<UserProfile> ::const_iterator _iter38;
    for (_iter38 = this->userProfiles.begin(); _iter38 != this->userProfiles.end(); ++_iter38)
    {
      xfer += (*_iter38).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResSearchUsers &a, ResSearchUsers &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.userProfiles, b.userProfiles);
  swap(a.__isset, b.__isset);
}

const char* ResCreateContext::ascii_fingerprint = "60493BA5C873F3623AF402892A633B1F";
const uint8_t ResCreateContext::binary_fingerprint[16] = {0x60,0x49,0x3B,0xA5,0xC8,0x73,0xF3,0x62,0x3A,0xF4,0x02,0x89,0x2A,0x63,0x3B,0x1F};

uint32_t ResCreateContext::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdContextId);
          this->__isset.createdContextId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResCreateContext::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ResCreateContext");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdContextId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->createdContextId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResCreateContext &a, ResCreateContext &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.createdContextId, b.createdContextId);
  swap(a.__isset, b.__isset);
}

const char* ResSendMessage::ascii_fingerprint = "60493BA5C873F3623AF402892A633B1F";
const uint8_t ResSendMessage::binary_fingerprint[16] = {0x60,0x49,0x3B,0xA5,0xC8,0x73,0xF3,0x62,0x3A,0xF4,0x02,0x89,0x2A,0x63,0x3B,0x1F};

uint32_t ResSendMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createdMessageId);
          this->__isset.createdMessageId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResSendMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ResSendMessage");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createdMessageId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->createdMessageId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResSendMessage &a, ResSendMessage &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.createdMessageId, b.createdMessageId);
  swap(a.__isset, b.__isset);
}

const char* ResPullMessages::ascii_fingerprint = "6757F5544C34A67014CC3B5DC1568059";
const uint8_t ResPullMessages::binary_fingerprint[16] = {0x67,0x57,0xF5,0x54,0x4C,0x34,0xA6,0x70,0x14,0xCC,0x3B,0x5D,0xC1,0x56,0x80,0x59};

uint32_t ResPullMessages::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->maxMessageID);
          this->__isset.maxMessageID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->messageList.clear();
            uint32_t _size39;
            ::apache::thrift::protocol::TType _etype42;
            xfer += iprot->readListBegin(_etype42, _size39);
            this->messageList.resize(_size39);
            uint32_t _i43;
            for (_i43 = 0; _i43 < _size39; ++_i43)
            {
              xfer += this->messageList[_i43].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.messageList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResPullMessages::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ResPullMessages");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxMessageID", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->maxMessageID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->messageList.size()));
    std::vector<ContextMessage> ::const_iterator _iter44;
    for (_iter44 = this->messageList.begin(); _iter44 != this->messageList.end(); ++_iter44)
    {
      xfer += (*_iter44).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResPullMessages &a, ResPullMessages &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.maxMessageID, b.maxMessageID);
  swap(a.messageList, b.messageList);
  swap(a.__isset, b.__isset);
}

const char* MessageReplyContent::ascii_fingerprint = "727CAEA8265A5DE67DBC931F55CD8753";
const uint8_t MessageReplyContent::binary_fingerprint[16] = {0x72,0x7C,0xAE,0xA8,0x26,0x5A,0x5D,0xE6,0x7D,0xBC,0x93,0x1F,0x55,0xCD,0x87,0x53};

uint32_t MessageReplyContent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->authorUserId);
          this->__isset.authorUserId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->reply);
          this->__isset.reply = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageReplyContent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageReplyContent");

  xfer += oprot->writeFieldBegin("authorUserId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->authorUserId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reply", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->reply);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageReplyContent &a, MessageReplyContent &b) {
  using ::std::swap;
  swap(a.authorUserId, b.authorUserId);
  swap(a.reply, b.reply);
  swap(a.__isset, b.__isset);
}

const char* ReqEvalMessage::ascii_fingerprint = "9F551022D4DF184E86CC5DB9186FAC79";
const uint8_t ReqEvalMessage::binary_fingerprint[16] = {0x9F,0x55,0x10,0x22,0xD4,0xDF,0x18,0x4E,0x86,0xCC,0x5D,0xB9,0x18,0x6F,0xAC,0x79};

uint32_t ReqEvalMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->contextID);
          this->__isset.contextID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->messageID);
          this->__isset.messageID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast45;
          xfer += iprot->readI32(ecast45);
          this->type = (MessageEvaluationType::type)ecast45;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReqEvalMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ReqEvalMessage");

  xfer += oprot->writeFieldBegin("contextID", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->contextID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageID", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->messageID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReqEvalMessage &a, ReqEvalMessage &b) {
  using ::std::swap;
  swap(a.contextID, b.contextID);
  swap(a.messageID, b.messageID);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

const char* ResEvalMessage::ascii_fingerprint = "FF4B6ED920BC7240E80FDE40D8C08F4F";
const uint8_t ResEvalMessage::binary_fingerprint[16] = {0xFF,0x4B,0x6E,0xD9,0x20,0xBC,0x72,0x40,0xE8,0x0F,0xDE,0x40,0xD8,0xC0,0x8F,0x4F};

uint32_t ResEvalMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResEvalMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ResEvalMessage");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResEvalMessage &a, ResEvalMessage &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.__isset, b.__isset);
}

const char* ReqCommentMessage::ascii_fingerprint = "6B0CD68886A371B59CE1B9EDCF067801";
const uint8_t ReqCommentMessage::binary_fingerprint[16] = {0x6B,0x0C,0xD6,0x88,0x86,0xA3,0x71,0xB5,0x9C,0xE1,0xB9,0xED,0xCF,0x06,0x78,0x01};

uint32_t ReqCommentMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->contextID);
          this->__isset.contextID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->messageID);
          this->__isset.messageID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReqCommentMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ReqCommentMessage");

  xfer += oprot->writeFieldBegin("contextID", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->contextID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messageID", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->messageID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReqCommentMessage &a, ReqCommentMessage &b) {
  using ::std::swap;
  swap(a.contextID, b.contextID);
  swap(a.messageID, b.messageID);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

const char* ResCommentMessage::ascii_fingerprint = "FF4B6ED920BC7240E80FDE40D8C08F4F";
const uint8_t ResCommentMessage::binary_fingerprint[16] = {0xFF,0x4B,0x6E,0xD9,0x20,0xBC,0x72,0x40,0xE8,0x0F,0xDE,0x40,0xD8,0xC0,0x8F,0x4F};

uint32_t ResCommentMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResCommentMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ResCommentMessage");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResCommentMessage &a, ResCommentMessage &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.__isset, b.__isset);
}

const char* ReqLoadComments::ascii_fingerprint = "F33135321253DAEB67B0E79E416CA831";
const uint8_t ReqLoadComments::binary_fingerprint[16] = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

uint32_t ReqLoadComments::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->senderContextID);
          this->__isset.senderContextID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->senderMessageID);
          this->__isset.senderMessageID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReqLoadComments::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ReqLoadComments");

  xfer += oprot->writeFieldBegin("senderContextID", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->senderContextID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("senderMessageID", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->senderMessageID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReqLoadComments &a, ReqLoadComments &b) {
  using ::std::swap;
  swap(a.senderContextID, b.senderContextID);
  swap(a.senderMessageID, b.senderMessageID);
  swap(a.__isset, b.__isset);
}

const char* MessageComment::ascii_fingerprint = "FA35BEC6F4D26D79A7E0AD1366489BCC";
const uint8_t MessageComment::binary_fingerprint[16] = {0xFA,0x35,0xBE,0xC6,0xF4,0xD2,0x6D,0x79,0xA7,0xE0,0xAD,0x13,0x66,0x48,0x9B,0xCC};

uint32_t MessageComment::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->commenterUID);
          this->__isset.commenterUID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->commentTime);
          this->__isset.commentTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageComment::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageComment");

  xfer += oprot->writeFieldBegin("commenterUID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->commenterUID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commentTime", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->commentTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageComment &a, MessageComment &b) {
  using ::std::swap;
  swap(a.commenterUID, b.commenterUID);
  swap(a.commentTime, b.commentTime);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

const char* ResLoadComments::ascii_fingerprint = "A82FD857D959CD1D57B82CA9EEA34BD4";
const uint8_t ResLoadComments::binary_fingerprint[16] = {0xA8,0x2F,0xD8,0x57,0xD9,0x59,0xCD,0x1D,0x57,0xB8,0x2C,0xA9,0xEE,0xA3,0x4B,0xD4};

uint32_t ResLoadComments::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->senderContextID);
          this->__isset.senderContextID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->senderMessageID);
          this->__isset.senderMessageID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->commentList.clear();
            uint32_t _size46;
            ::apache::thrift::protocol::TType _etype49;
            xfer += iprot->readListBegin(_etype49, _size46);
            this->commentList.resize(_size46);
            uint32_t _i50;
            for (_i50 = 0; _i50 < _size46; ++_i50)
            {
              xfer += this->commentList[_i50].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.commentList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResLoadComments::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ResLoadComments");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("senderContextID", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->senderContextID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("senderMessageID", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->senderMessageID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commentList", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->commentList.size()));
    std::vector<MessageComment> ::const_iterator _iter51;
    for (_iter51 = this->commentList.begin(); _iter51 != this->commentList.end(); ++_iter51)
    {
      xfer += (*_iter51).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResLoadComments &a, ResLoadComments &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.senderContextID, b.senderContextID);
  swap(a.senderMessageID, b.senderMessageID);
  swap(a.commentList, b.commentList);
  swap(a.__isset, b.__isset);
}

const char* ResLoadFollowerUIDs::ascii_fingerprint = "B454485740DBB46F7F80F23EE0D26E05";
const uint8_t ResLoadFollowerUIDs::binary_fingerprint[16] = {0xB4,0x54,0x48,0x57,0x40,0xDB,0xB4,0x6F,0x7F,0x80,0xF2,0x3E,0xE0,0xD2,0x6E,0x05};

uint32_t ResLoadFollowerUIDs::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->followerUIDs.clear();
            uint32_t _size52;
            ::apache::thrift::protocol::TType _etype55;
            xfer += iprot->readListBegin(_etype55, _size52);
            this->followerUIDs.resize(_size52);
            uint32_t _i56;
            for (_i56 = 0; _i56 < _size52; ++_i56)
            {
              xfer += iprot->readString(this->followerUIDs[_i56]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.followerUIDs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResLoadFollowerUIDs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ResLoadFollowerUIDs");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("followerUIDs", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->followerUIDs.size()));
    std::vector<UID> ::const_iterator _iter57;
    for (_iter57 = this->followerUIDs.begin(); _iter57 != this->followerUIDs.end(); ++_iter57)
    {
      xfer += oprot->writeString((*_iter57));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResLoadFollowerUIDs &a, ResLoadFollowerUIDs &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.followerUIDs, b.followerUIDs);
  swap(a.__isset, b.__isset);
}

} // namespace
