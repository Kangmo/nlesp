/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef VicDataService_H
#define VicDataService_H

#include <thrift/transport/TBufferTransports.h>
#include <boost/functional.hpp>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include "VicKit_types.h"

namespace VicKit {

class VicDataServiceIf {
 public:
  virtual ~VicDataServiceIf() {}
  virtual void authenticateUser(ResAuthenticateUser& _return, const AuthSignature& sig, const ReqAuthenticateUser& authReq) = 0;
  virtual void createUserProfile(ResCreateUserProfile& _return, const AuthSignature& sig, const UserProfile& profile) = 0;
  virtual void updateUserProfile(ResUpdateUserProfile& _return, const AuthSignature& sig, const UserProfile& profile) = 0;
  virtual void loadUserProfiles(ResLoadUserProfiles& _return, const AuthSignature& sig, const std::vector<UID> & uids) = 0;
  virtual void loadFriendProfiles(ResLoadFriendProfiles& _return, const AuthSignature& sig, const UID& uid) = 0;
  virtual void loadFriendUIDs(ResLoadFriendUIDs& _return, const AuthSignature& sig, const UID& uid) = 0;
  virtual void requestFriend(ResRequestFriend& _return, const AuthSignature& sig, const UID& uid) = 0;
  virtual void cancelFriend(ResCancelFriend& _return, const AuthSignature& sig, const UID& uid) = 0;
  virtual void searchUserByEmail(ResSearchUsers& _return, const AuthSignature& sig, const std::string& email) = 0;
  virtual void createContext(ResCreateContext& _return, const AuthSignature& sig, const std::vector<UID> & uids) = 0;
  virtual void sendMessage(ResSendMessage& _return, const AuthSignature& sig, const ReqSendMessage& req) = 0;
  virtual void sendOnewayMessage(const AuthSignature& sig, const ReqSendMessage& req) = 0;
  virtual void pullMessages(ResPullMessages& _return, const AuthSignature& sig, const ReqPullMessages& req) = 0;
  virtual void evalMessage(ResEvalMessage& _return, const AuthSignature& sig, const ReqEvalMessage& req) = 0;
  virtual void commentMessage(ResCommentMessage& _return, const AuthSignature& sig, const ReqCommentMessage& req) = 0;
  virtual void loadComments(ResLoadComments& _return, const AuthSignature& sig, const ReqLoadComments& req) = 0;
  virtual void loadFollowerUIDs(ResLoadFollowerUIDs& _return, const AuthSignature& sig, const UID& uid) = 0;
};

class VicDataServiceIfFactory {
 public:
  typedef VicDataServiceIf Handler;

  virtual ~VicDataServiceIfFactory() {}

  virtual VicDataServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(VicDataServiceIf* /* handler */) = 0;
};

class VicDataServiceIfSingletonFactory : virtual public VicDataServiceIfFactory {
 public:
  VicDataServiceIfSingletonFactory(const boost::shared_ptr<VicDataServiceIf>& iface) : iface_(iface) {}
  virtual ~VicDataServiceIfSingletonFactory() {}

  virtual VicDataServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(VicDataServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<VicDataServiceIf> iface_;
};

class VicDataServiceNull : virtual public VicDataServiceIf {
 public:
  virtual ~VicDataServiceNull() {}
  void authenticateUser(ResAuthenticateUser& /* _return */, const AuthSignature& /* sig */, const ReqAuthenticateUser& /* authReq */) {
    return;
  }
  void createUserProfile(ResCreateUserProfile& /* _return */, const AuthSignature& /* sig */, const UserProfile& /* profile */) {
    return;
  }
  void updateUserProfile(ResUpdateUserProfile& /* _return */, const AuthSignature& /* sig */, const UserProfile& /* profile */) {
    return;
  }
  void loadUserProfiles(ResLoadUserProfiles& /* _return */, const AuthSignature& /* sig */, const std::vector<UID> & /* uids */) {
    return;
  }
  void loadFriendProfiles(ResLoadFriendProfiles& /* _return */, const AuthSignature& /* sig */, const UID& /* uid */) {
    return;
  }
  void loadFriendUIDs(ResLoadFriendUIDs& /* _return */, const AuthSignature& /* sig */, const UID& /* uid */) {
    return;
  }
  void requestFriend(ResRequestFriend& /* _return */, const AuthSignature& /* sig */, const UID& /* uid */) {
    return;
  }
  void cancelFriend(ResCancelFriend& /* _return */, const AuthSignature& /* sig */, const UID& /* uid */) {
    return;
  }
  void searchUserByEmail(ResSearchUsers& /* _return */, const AuthSignature& /* sig */, const std::string& /* email */) {
    return;
  }
  void createContext(ResCreateContext& /* _return */, const AuthSignature& /* sig */, const std::vector<UID> & /* uids */) {
    return;
  }
  void sendMessage(ResSendMessage& /* _return */, const AuthSignature& /* sig */, const ReqSendMessage& /* req */) {
    return;
  }
  void sendOnewayMessage(const AuthSignature& /* sig */, const ReqSendMessage& /* req */) {
    return;
  }
  void pullMessages(ResPullMessages& /* _return */, const AuthSignature& /* sig */, const ReqPullMessages& /* req */) {
    return;
  }
  void evalMessage(ResEvalMessage& /* _return */, const AuthSignature& /* sig */, const ReqEvalMessage& /* req */) {
    return;
  }
  void commentMessage(ResCommentMessage& /* _return */, const AuthSignature& /* sig */, const ReqCommentMessage& /* req */) {
    return;
  }
  void loadComments(ResLoadComments& /* _return */, const AuthSignature& /* sig */, const ReqLoadComments& /* req */) {
    return;
  }
  void loadFollowerUIDs(ResLoadFollowerUIDs& /* _return */, const AuthSignature& /* sig */, const UID& /* uid */) {
    return;
  }
};

typedef struct _VicDataService_authenticateUser_args__isset {
  _VicDataService_authenticateUser_args__isset() : sig(false), authReq(false) {}
  bool sig;
  bool authReq;
} _VicDataService_authenticateUser_args__isset;

class VicDataService_authenticateUser_args {
 public:

  VicDataService_authenticateUser_args() {
  }

  virtual ~VicDataService_authenticateUser_args() throw() {}

  AuthSignature sig;
  ReqAuthenticateUser authReq;

  _VicDataService_authenticateUser_args__isset __isset;

  void __set_sig(const AuthSignature& val) {
    sig = val;
  }

  void __set_authReq(const ReqAuthenticateUser& val) {
    authReq = val;
  }

  bool operator == (const VicDataService_authenticateUser_args & rhs) const
  {
    if (!(sig == rhs.sig))
      return false;
    if (!(authReq == rhs.authReq))
      return false;
    return true;
  }
  bool operator != (const VicDataService_authenticateUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_authenticateUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VicDataService_authenticateUser_pargs {
 public:


  virtual ~VicDataService_authenticateUser_pargs() throw() {}

  const AuthSignature* sig;
  const ReqAuthenticateUser* authReq;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_authenticateUser_result__isset {
  _VicDataService_authenticateUser_result__isset() : success(false) {}
  bool success;
} _VicDataService_authenticateUser_result__isset;

class VicDataService_authenticateUser_result {
 public:

  VicDataService_authenticateUser_result() {
  }

  virtual ~VicDataService_authenticateUser_result() throw() {}

  ResAuthenticateUser success;

  _VicDataService_authenticateUser_result__isset __isset;

  void __set_success(const ResAuthenticateUser& val) {
    success = val;
  }

  bool operator == (const VicDataService_authenticateUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VicDataService_authenticateUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_authenticateUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_authenticateUser_presult__isset {
  _VicDataService_authenticateUser_presult__isset() : success(false) {}
  bool success;
} _VicDataService_authenticateUser_presult__isset;

class VicDataService_authenticateUser_presult {
 public:


  virtual ~VicDataService_authenticateUser_presult() throw() {}

  ResAuthenticateUser* success;

  _VicDataService_authenticateUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_createUserProfile_args__isset {
  _VicDataService_createUserProfile_args__isset() : sig(false), profile(false) {}
  bool sig;
  bool profile;
} _VicDataService_createUserProfile_args__isset;

class VicDataService_createUserProfile_args {
 public:

  VicDataService_createUserProfile_args() {
  }

  virtual ~VicDataService_createUserProfile_args() throw() {}

  AuthSignature sig;
  UserProfile profile;

  _VicDataService_createUserProfile_args__isset __isset;

  void __set_sig(const AuthSignature& val) {
    sig = val;
  }

  void __set_profile(const UserProfile& val) {
    profile = val;
  }

  bool operator == (const VicDataService_createUserProfile_args & rhs) const
  {
    if (!(sig == rhs.sig))
      return false;
    if (!(profile == rhs.profile))
      return false;
    return true;
  }
  bool operator != (const VicDataService_createUserProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_createUserProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VicDataService_createUserProfile_pargs {
 public:


  virtual ~VicDataService_createUserProfile_pargs() throw() {}

  const AuthSignature* sig;
  const UserProfile* profile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_createUserProfile_result__isset {
  _VicDataService_createUserProfile_result__isset() : success(false) {}
  bool success;
} _VicDataService_createUserProfile_result__isset;

class VicDataService_createUserProfile_result {
 public:

  VicDataService_createUserProfile_result() {
  }

  virtual ~VicDataService_createUserProfile_result() throw() {}

  ResCreateUserProfile success;

  _VicDataService_createUserProfile_result__isset __isset;

  void __set_success(const ResCreateUserProfile& val) {
    success = val;
  }

  bool operator == (const VicDataService_createUserProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VicDataService_createUserProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_createUserProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_createUserProfile_presult__isset {
  _VicDataService_createUserProfile_presult__isset() : success(false) {}
  bool success;
} _VicDataService_createUserProfile_presult__isset;

class VicDataService_createUserProfile_presult {
 public:


  virtual ~VicDataService_createUserProfile_presult() throw() {}

  ResCreateUserProfile* success;

  _VicDataService_createUserProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_updateUserProfile_args__isset {
  _VicDataService_updateUserProfile_args__isset() : sig(false), profile(false) {}
  bool sig;
  bool profile;
} _VicDataService_updateUserProfile_args__isset;

class VicDataService_updateUserProfile_args {
 public:

  VicDataService_updateUserProfile_args() {
  }

  virtual ~VicDataService_updateUserProfile_args() throw() {}

  AuthSignature sig;
  UserProfile profile;

  _VicDataService_updateUserProfile_args__isset __isset;

  void __set_sig(const AuthSignature& val) {
    sig = val;
  }

  void __set_profile(const UserProfile& val) {
    profile = val;
  }

  bool operator == (const VicDataService_updateUserProfile_args & rhs) const
  {
    if (!(sig == rhs.sig))
      return false;
    if (!(profile == rhs.profile))
      return false;
    return true;
  }
  bool operator != (const VicDataService_updateUserProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_updateUserProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VicDataService_updateUserProfile_pargs {
 public:


  virtual ~VicDataService_updateUserProfile_pargs() throw() {}

  const AuthSignature* sig;
  const UserProfile* profile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_updateUserProfile_result__isset {
  _VicDataService_updateUserProfile_result__isset() : success(false) {}
  bool success;
} _VicDataService_updateUserProfile_result__isset;

class VicDataService_updateUserProfile_result {
 public:

  VicDataService_updateUserProfile_result() {
  }

  virtual ~VicDataService_updateUserProfile_result() throw() {}

  ResUpdateUserProfile success;

  _VicDataService_updateUserProfile_result__isset __isset;

  void __set_success(const ResUpdateUserProfile& val) {
    success = val;
  }

  bool operator == (const VicDataService_updateUserProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VicDataService_updateUserProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_updateUserProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_updateUserProfile_presult__isset {
  _VicDataService_updateUserProfile_presult__isset() : success(false) {}
  bool success;
} _VicDataService_updateUserProfile_presult__isset;

class VicDataService_updateUserProfile_presult {
 public:


  virtual ~VicDataService_updateUserProfile_presult() throw() {}

  ResUpdateUserProfile* success;

  _VicDataService_updateUserProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_loadUserProfiles_args__isset {
  _VicDataService_loadUserProfiles_args__isset() : sig(false), uids(false) {}
  bool sig;
  bool uids;
} _VicDataService_loadUserProfiles_args__isset;

class VicDataService_loadUserProfiles_args {
 public:

  VicDataService_loadUserProfiles_args() {
  }

  virtual ~VicDataService_loadUserProfiles_args() throw() {}

  AuthSignature sig;
  std::vector<UID>  uids;

  _VicDataService_loadUserProfiles_args__isset __isset;

  void __set_sig(const AuthSignature& val) {
    sig = val;
  }

  void __set_uids(const std::vector<UID> & val) {
    uids = val;
  }

  bool operator == (const VicDataService_loadUserProfiles_args & rhs) const
  {
    if (!(sig == rhs.sig))
      return false;
    if (!(uids == rhs.uids))
      return false;
    return true;
  }
  bool operator != (const VicDataService_loadUserProfiles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_loadUserProfiles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VicDataService_loadUserProfiles_pargs {
 public:


  virtual ~VicDataService_loadUserProfiles_pargs() throw() {}

  const AuthSignature* sig;
  const std::vector<UID> * uids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_loadUserProfiles_result__isset {
  _VicDataService_loadUserProfiles_result__isset() : success(false) {}
  bool success;
} _VicDataService_loadUserProfiles_result__isset;

class VicDataService_loadUserProfiles_result {
 public:

  VicDataService_loadUserProfiles_result() {
  }

  virtual ~VicDataService_loadUserProfiles_result() throw() {}

  ResLoadUserProfiles success;

  _VicDataService_loadUserProfiles_result__isset __isset;

  void __set_success(const ResLoadUserProfiles& val) {
    success = val;
  }

  bool operator == (const VicDataService_loadUserProfiles_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VicDataService_loadUserProfiles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_loadUserProfiles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_loadUserProfiles_presult__isset {
  _VicDataService_loadUserProfiles_presult__isset() : success(false) {}
  bool success;
} _VicDataService_loadUserProfiles_presult__isset;

class VicDataService_loadUserProfiles_presult {
 public:


  virtual ~VicDataService_loadUserProfiles_presult() throw() {}

  ResLoadUserProfiles* success;

  _VicDataService_loadUserProfiles_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_loadFriendProfiles_args__isset {
  _VicDataService_loadFriendProfiles_args__isset() : sig(false), uid(false) {}
  bool sig;
  bool uid;
} _VicDataService_loadFriendProfiles_args__isset;

class VicDataService_loadFriendProfiles_args {
 public:

  VicDataService_loadFriendProfiles_args() : uid() {
  }

  virtual ~VicDataService_loadFriendProfiles_args() throw() {}

  AuthSignature sig;
  UID uid;

  _VicDataService_loadFriendProfiles_args__isset __isset;

  void __set_sig(const AuthSignature& val) {
    sig = val;
  }

  void __set_uid(const UID& val) {
    uid = val;
  }

  bool operator == (const VicDataService_loadFriendProfiles_args & rhs) const
  {
    if (!(sig == rhs.sig))
      return false;
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const VicDataService_loadFriendProfiles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_loadFriendProfiles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VicDataService_loadFriendProfiles_pargs {
 public:


  virtual ~VicDataService_loadFriendProfiles_pargs() throw() {}

  const AuthSignature* sig;
  const UID* uid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_loadFriendProfiles_result__isset {
  _VicDataService_loadFriendProfiles_result__isset() : success(false) {}
  bool success;
} _VicDataService_loadFriendProfiles_result__isset;

class VicDataService_loadFriendProfiles_result {
 public:

  VicDataService_loadFriendProfiles_result() {
  }

  virtual ~VicDataService_loadFriendProfiles_result() throw() {}

  ResLoadFriendProfiles success;

  _VicDataService_loadFriendProfiles_result__isset __isset;

  void __set_success(const ResLoadFriendProfiles& val) {
    success = val;
  }

  bool operator == (const VicDataService_loadFriendProfiles_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VicDataService_loadFriendProfiles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_loadFriendProfiles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_loadFriendProfiles_presult__isset {
  _VicDataService_loadFriendProfiles_presult__isset() : success(false) {}
  bool success;
} _VicDataService_loadFriendProfiles_presult__isset;

class VicDataService_loadFriendProfiles_presult {
 public:


  virtual ~VicDataService_loadFriendProfiles_presult() throw() {}

  ResLoadFriendProfiles* success;

  _VicDataService_loadFriendProfiles_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_loadFriendUIDs_args__isset {
  _VicDataService_loadFriendUIDs_args__isset() : sig(false), uid(false) {}
  bool sig;
  bool uid;
} _VicDataService_loadFriendUIDs_args__isset;

class VicDataService_loadFriendUIDs_args {
 public:

  VicDataService_loadFriendUIDs_args() : uid() {
  }

  virtual ~VicDataService_loadFriendUIDs_args() throw() {}

  AuthSignature sig;
  UID uid;

  _VicDataService_loadFriendUIDs_args__isset __isset;

  void __set_sig(const AuthSignature& val) {
    sig = val;
  }

  void __set_uid(const UID& val) {
    uid = val;
  }

  bool operator == (const VicDataService_loadFriendUIDs_args & rhs) const
  {
    if (!(sig == rhs.sig))
      return false;
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const VicDataService_loadFriendUIDs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_loadFriendUIDs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VicDataService_loadFriendUIDs_pargs {
 public:


  virtual ~VicDataService_loadFriendUIDs_pargs() throw() {}

  const AuthSignature* sig;
  const UID* uid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_loadFriendUIDs_result__isset {
  _VicDataService_loadFriendUIDs_result__isset() : success(false) {}
  bool success;
} _VicDataService_loadFriendUIDs_result__isset;

class VicDataService_loadFriendUIDs_result {
 public:

  VicDataService_loadFriendUIDs_result() {
  }

  virtual ~VicDataService_loadFriendUIDs_result() throw() {}

  ResLoadFriendUIDs success;

  _VicDataService_loadFriendUIDs_result__isset __isset;

  void __set_success(const ResLoadFriendUIDs& val) {
    success = val;
  }

  bool operator == (const VicDataService_loadFriendUIDs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VicDataService_loadFriendUIDs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_loadFriendUIDs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_loadFriendUIDs_presult__isset {
  _VicDataService_loadFriendUIDs_presult__isset() : success(false) {}
  bool success;
} _VicDataService_loadFriendUIDs_presult__isset;

class VicDataService_loadFriendUIDs_presult {
 public:


  virtual ~VicDataService_loadFriendUIDs_presult() throw() {}

  ResLoadFriendUIDs* success;

  _VicDataService_loadFriendUIDs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_requestFriend_args__isset {
  _VicDataService_requestFriend_args__isset() : sig(false), uid(false) {}
  bool sig;
  bool uid;
} _VicDataService_requestFriend_args__isset;

class VicDataService_requestFriend_args {
 public:

  VicDataService_requestFriend_args() : uid() {
  }

  virtual ~VicDataService_requestFriend_args() throw() {}

  AuthSignature sig;
  UID uid;

  _VicDataService_requestFriend_args__isset __isset;

  void __set_sig(const AuthSignature& val) {
    sig = val;
  }

  void __set_uid(const UID& val) {
    uid = val;
  }

  bool operator == (const VicDataService_requestFriend_args & rhs) const
  {
    if (!(sig == rhs.sig))
      return false;
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const VicDataService_requestFriend_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_requestFriend_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VicDataService_requestFriend_pargs {
 public:


  virtual ~VicDataService_requestFriend_pargs() throw() {}

  const AuthSignature* sig;
  const UID* uid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_requestFriend_result__isset {
  _VicDataService_requestFriend_result__isset() : success(false) {}
  bool success;
} _VicDataService_requestFriend_result__isset;

class VicDataService_requestFriend_result {
 public:

  VicDataService_requestFriend_result() {
  }

  virtual ~VicDataService_requestFriend_result() throw() {}

  ResRequestFriend success;

  _VicDataService_requestFriend_result__isset __isset;

  void __set_success(const ResRequestFriend& val) {
    success = val;
  }

  bool operator == (const VicDataService_requestFriend_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VicDataService_requestFriend_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_requestFriend_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_requestFriend_presult__isset {
  _VicDataService_requestFriend_presult__isset() : success(false) {}
  bool success;
} _VicDataService_requestFriend_presult__isset;

class VicDataService_requestFriend_presult {
 public:


  virtual ~VicDataService_requestFriend_presult() throw() {}

  ResRequestFriend* success;

  _VicDataService_requestFriend_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_cancelFriend_args__isset {
  _VicDataService_cancelFriend_args__isset() : sig(false), uid(false) {}
  bool sig;
  bool uid;
} _VicDataService_cancelFriend_args__isset;

class VicDataService_cancelFriend_args {
 public:

  VicDataService_cancelFriend_args() : uid() {
  }

  virtual ~VicDataService_cancelFriend_args() throw() {}

  AuthSignature sig;
  UID uid;

  _VicDataService_cancelFriend_args__isset __isset;

  void __set_sig(const AuthSignature& val) {
    sig = val;
  }

  void __set_uid(const UID& val) {
    uid = val;
  }

  bool operator == (const VicDataService_cancelFriend_args & rhs) const
  {
    if (!(sig == rhs.sig))
      return false;
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const VicDataService_cancelFriend_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_cancelFriend_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VicDataService_cancelFriend_pargs {
 public:


  virtual ~VicDataService_cancelFriend_pargs() throw() {}

  const AuthSignature* sig;
  const UID* uid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_cancelFriend_result__isset {
  _VicDataService_cancelFriend_result__isset() : success(false) {}
  bool success;
} _VicDataService_cancelFriend_result__isset;

class VicDataService_cancelFriend_result {
 public:

  VicDataService_cancelFriend_result() {
  }

  virtual ~VicDataService_cancelFriend_result() throw() {}

  ResCancelFriend success;

  _VicDataService_cancelFriend_result__isset __isset;

  void __set_success(const ResCancelFriend& val) {
    success = val;
  }

  bool operator == (const VicDataService_cancelFriend_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VicDataService_cancelFriend_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_cancelFriend_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_cancelFriend_presult__isset {
  _VicDataService_cancelFriend_presult__isset() : success(false) {}
  bool success;
} _VicDataService_cancelFriend_presult__isset;

class VicDataService_cancelFriend_presult {
 public:


  virtual ~VicDataService_cancelFriend_presult() throw() {}

  ResCancelFriend* success;

  _VicDataService_cancelFriend_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_searchUserByEmail_args__isset {
  _VicDataService_searchUserByEmail_args__isset() : sig(false), email(false) {}
  bool sig;
  bool email;
} _VicDataService_searchUserByEmail_args__isset;

class VicDataService_searchUserByEmail_args {
 public:

  VicDataService_searchUserByEmail_args() : email() {
  }

  virtual ~VicDataService_searchUserByEmail_args() throw() {}

  AuthSignature sig;
  std::string email;

  _VicDataService_searchUserByEmail_args__isset __isset;

  void __set_sig(const AuthSignature& val) {
    sig = val;
  }

  void __set_email(const std::string& val) {
    email = val;
  }

  bool operator == (const VicDataService_searchUserByEmail_args & rhs) const
  {
    if (!(sig == rhs.sig))
      return false;
    if (!(email == rhs.email))
      return false;
    return true;
  }
  bool operator != (const VicDataService_searchUserByEmail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_searchUserByEmail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VicDataService_searchUserByEmail_pargs {
 public:


  virtual ~VicDataService_searchUserByEmail_pargs() throw() {}

  const AuthSignature* sig;
  const std::string* email;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_searchUserByEmail_result__isset {
  _VicDataService_searchUserByEmail_result__isset() : success(false) {}
  bool success;
} _VicDataService_searchUserByEmail_result__isset;

class VicDataService_searchUserByEmail_result {
 public:

  VicDataService_searchUserByEmail_result() {
  }

  virtual ~VicDataService_searchUserByEmail_result() throw() {}

  ResSearchUsers success;

  _VicDataService_searchUserByEmail_result__isset __isset;

  void __set_success(const ResSearchUsers& val) {
    success = val;
  }

  bool operator == (const VicDataService_searchUserByEmail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VicDataService_searchUserByEmail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_searchUserByEmail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_searchUserByEmail_presult__isset {
  _VicDataService_searchUserByEmail_presult__isset() : success(false) {}
  bool success;
} _VicDataService_searchUserByEmail_presult__isset;

class VicDataService_searchUserByEmail_presult {
 public:


  virtual ~VicDataService_searchUserByEmail_presult() throw() {}

  ResSearchUsers* success;

  _VicDataService_searchUserByEmail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_createContext_args__isset {
  _VicDataService_createContext_args__isset() : sig(false), uids(false) {}
  bool sig;
  bool uids;
} _VicDataService_createContext_args__isset;

class VicDataService_createContext_args {
 public:

  VicDataService_createContext_args() {
  }

  virtual ~VicDataService_createContext_args() throw() {}

  AuthSignature sig;
  std::vector<UID>  uids;

  _VicDataService_createContext_args__isset __isset;

  void __set_sig(const AuthSignature& val) {
    sig = val;
  }

  void __set_uids(const std::vector<UID> & val) {
    uids = val;
  }

  bool operator == (const VicDataService_createContext_args & rhs) const
  {
    if (!(sig == rhs.sig))
      return false;
    if (!(uids == rhs.uids))
      return false;
    return true;
  }
  bool operator != (const VicDataService_createContext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_createContext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VicDataService_createContext_pargs {
 public:


  virtual ~VicDataService_createContext_pargs() throw() {}

  const AuthSignature* sig;
  const std::vector<UID> * uids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_createContext_result__isset {
  _VicDataService_createContext_result__isset() : success(false) {}
  bool success;
} _VicDataService_createContext_result__isset;

class VicDataService_createContext_result {
 public:

  VicDataService_createContext_result() {
  }

  virtual ~VicDataService_createContext_result() throw() {}

  ResCreateContext success;

  _VicDataService_createContext_result__isset __isset;

  void __set_success(const ResCreateContext& val) {
    success = val;
  }

  bool operator == (const VicDataService_createContext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VicDataService_createContext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_createContext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_createContext_presult__isset {
  _VicDataService_createContext_presult__isset() : success(false) {}
  bool success;
} _VicDataService_createContext_presult__isset;

class VicDataService_createContext_presult {
 public:


  virtual ~VicDataService_createContext_presult() throw() {}

  ResCreateContext* success;

  _VicDataService_createContext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_sendMessage_args__isset {
  _VicDataService_sendMessage_args__isset() : sig(false), req(false) {}
  bool sig;
  bool req;
} _VicDataService_sendMessage_args__isset;

class VicDataService_sendMessage_args {
 public:

  VicDataService_sendMessage_args() {
  }

  virtual ~VicDataService_sendMessage_args() throw() {}

  AuthSignature sig;
  ReqSendMessage req;

  _VicDataService_sendMessage_args__isset __isset;

  void __set_sig(const AuthSignature& val) {
    sig = val;
  }

  void __set_req(const ReqSendMessage& val) {
    req = val;
  }

  bool operator == (const VicDataService_sendMessage_args & rhs) const
  {
    if (!(sig == rhs.sig))
      return false;
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const VicDataService_sendMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_sendMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VicDataService_sendMessage_pargs {
 public:


  virtual ~VicDataService_sendMessage_pargs() throw() {}

  const AuthSignature* sig;
  const ReqSendMessage* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_sendMessage_result__isset {
  _VicDataService_sendMessage_result__isset() : success(false) {}
  bool success;
} _VicDataService_sendMessage_result__isset;

class VicDataService_sendMessage_result {
 public:

  VicDataService_sendMessage_result() {
  }

  virtual ~VicDataService_sendMessage_result() throw() {}

  ResSendMessage success;

  _VicDataService_sendMessage_result__isset __isset;

  void __set_success(const ResSendMessage& val) {
    success = val;
  }

  bool operator == (const VicDataService_sendMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VicDataService_sendMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_sendMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_sendMessage_presult__isset {
  _VicDataService_sendMessage_presult__isset() : success(false) {}
  bool success;
} _VicDataService_sendMessage_presult__isset;

class VicDataService_sendMessage_presult {
 public:


  virtual ~VicDataService_sendMessage_presult() throw() {}

  ResSendMessage* success;

  _VicDataService_sendMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_sendOnewayMessage_args__isset {
  _VicDataService_sendOnewayMessage_args__isset() : sig(false), req(false) {}
  bool sig;
  bool req;
} _VicDataService_sendOnewayMessage_args__isset;

class VicDataService_sendOnewayMessage_args {
 public:

  VicDataService_sendOnewayMessage_args() {
  }

  virtual ~VicDataService_sendOnewayMessage_args() throw() {}

  AuthSignature sig;
  ReqSendMessage req;

  _VicDataService_sendOnewayMessage_args__isset __isset;

  void __set_sig(const AuthSignature& val) {
    sig = val;
  }

  void __set_req(const ReqSendMessage& val) {
    req = val;
  }

  bool operator == (const VicDataService_sendOnewayMessage_args & rhs) const
  {
    if (!(sig == rhs.sig))
      return false;
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const VicDataService_sendOnewayMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_sendOnewayMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VicDataService_sendOnewayMessage_pargs {
 public:


  virtual ~VicDataService_sendOnewayMessage_pargs() throw() {}

  const AuthSignature* sig;
  const ReqSendMessage* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_pullMessages_args__isset {
  _VicDataService_pullMessages_args__isset() : sig(false), req(false) {}
  bool sig;
  bool req;
} _VicDataService_pullMessages_args__isset;

class VicDataService_pullMessages_args {
 public:

  VicDataService_pullMessages_args() {
  }

  virtual ~VicDataService_pullMessages_args() throw() {}

  AuthSignature sig;
  ReqPullMessages req;

  _VicDataService_pullMessages_args__isset __isset;

  void __set_sig(const AuthSignature& val) {
    sig = val;
  }

  void __set_req(const ReqPullMessages& val) {
    req = val;
  }

  bool operator == (const VicDataService_pullMessages_args & rhs) const
  {
    if (!(sig == rhs.sig))
      return false;
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const VicDataService_pullMessages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_pullMessages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VicDataService_pullMessages_pargs {
 public:


  virtual ~VicDataService_pullMessages_pargs() throw() {}

  const AuthSignature* sig;
  const ReqPullMessages* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_pullMessages_result__isset {
  _VicDataService_pullMessages_result__isset() : success(false) {}
  bool success;
} _VicDataService_pullMessages_result__isset;

class VicDataService_pullMessages_result {
 public:

  VicDataService_pullMessages_result() {
  }

  virtual ~VicDataService_pullMessages_result() throw() {}

  ResPullMessages success;

  _VicDataService_pullMessages_result__isset __isset;

  void __set_success(const ResPullMessages& val) {
    success = val;
  }

  bool operator == (const VicDataService_pullMessages_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VicDataService_pullMessages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_pullMessages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_pullMessages_presult__isset {
  _VicDataService_pullMessages_presult__isset() : success(false) {}
  bool success;
} _VicDataService_pullMessages_presult__isset;

class VicDataService_pullMessages_presult {
 public:


  virtual ~VicDataService_pullMessages_presult() throw() {}

  ResPullMessages* success;

  _VicDataService_pullMessages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_evalMessage_args__isset {
  _VicDataService_evalMessage_args__isset() : sig(false), req(false) {}
  bool sig;
  bool req;
} _VicDataService_evalMessage_args__isset;

class VicDataService_evalMessage_args {
 public:

  VicDataService_evalMessage_args() {
  }

  virtual ~VicDataService_evalMessage_args() throw() {}

  AuthSignature sig;
  ReqEvalMessage req;

  _VicDataService_evalMessage_args__isset __isset;

  void __set_sig(const AuthSignature& val) {
    sig = val;
  }

  void __set_req(const ReqEvalMessage& val) {
    req = val;
  }

  bool operator == (const VicDataService_evalMessage_args & rhs) const
  {
    if (!(sig == rhs.sig))
      return false;
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const VicDataService_evalMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_evalMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VicDataService_evalMessage_pargs {
 public:


  virtual ~VicDataService_evalMessage_pargs() throw() {}

  const AuthSignature* sig;
  const ReqEvalMessage* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_evalMessage_result__isset {
  _VicDataService_evalMessage_result__isset() : success(false) {}
  bool success;
} _VicDataService_evalMessage_result__isset;

class VicDataService_evalMessage_result {
 public:

  VicDataService_evalMessage_result() {
  }

  virtual ~VicDataService_evalMessage_result() throw() {}

  ResEvalMessage success;

  _VicDataService_evalMessage_result__isset __isset;

  void __set_success(const ResEvalMessage& val) {
    success = val;
  }

  bool operator == (const VicDataService_evalMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VicDataService_evalMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_evalMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_evalMessage_presult__isset {
  _VicDataService_evalMessage_presult__isset() : success(false) {}
  bool success;
} _VicDataService_evalMessage_presult__isset;

class VicDataService_evalMessage_presult {
 public:


  virtual ~VicDataService_evalMessage_presult() throw() {}

  ResEvalMessage* success;

  _VicDataService_evalMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_commentMessage_args__isset {
  _VicDataService_commentMessage_args__isset() : sig(false), req(false) {}
  bool sig;
  bool req;
} _VicDataService_commentMessage_args__isset;

class VicDataService_commentMessage_args {
 public:

  VicDataService_commentMessage_args() {
  }

  virtual ~VicDataService_commentMessage_args() throw() {}

  AuthSignature sig;
  ReqCommentMessage req;

  _VicDataService_commentMessage_args__isset __isset;

  void __set_sig(const AuthSignature& val) {
    sig = val;
  }

  void __set_req(const ReqCommentMessage& val) {
    req = val;
  }

  bool operator == (const VicDataService_commentMessage_args & rhs) const
  {
    if (!(sig == rhs.sig))
      return false;
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const VicDataService_commentMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_commentMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VicDataService_commentMessage_pargs {
 public:


  virtual ~VicDataService_commentMessage_pargs() throw() {}

  const AuthSignature* sig;
  const ReqCommentMessage* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_commentMessage_result__isset {
  _VicDataService_commentMessage_result__isset() : success(false) {}
  bool success;
} _VicDataService_commentMessage_result__isset;

class VicDataService_commentMessage_result {
 public:

  VicDataService_commentMessage_result() {
  }

  virtual ~VicDataService_commentMessage_result() throw() {}

  ResCommentMessage success;

  _VicDataService_commentMessage_result__isset __isset;

  void __set_success(const ResCommentMessage& val) {
    success = val;
  }

  bool operator == (const VicDataService_commentMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VicDataService_commentMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_commentMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_commentMessage_presult__isset {
  _VicDataService_commentMessage_presult__isset() : success(false) {}
  bool success;
} _VicDataService_commentMessage_presult__isset;

class VicDataService_commentMessage_presult {
 public:


  virtual ~VicDataService_commentMessage_presult() throw() {}

  ResCommentMessage* success;

  _VicDataService_commentMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_loadComments_args__isset {
  _VicDataService_loadComments_args__isset() : sig(false), req(false) {}
  bool sig;
  bool req;
} _VicDataService_loadComments_args__isset;

class VicDataService_loadComments_args {
 public:

  VicDataService_loadComments_args() {
  }

  virtual ~VicDataService_loadComments_args() throw() {}

  AuthSignature sig;
  ReqLoadComments req;

  _VicDataService_loadComments_args__isset __isset;

  void __set_sig(const AuthSignature& val) {
    sig = val;
  }

  void __set_req(const ReqLoadComments& val) {
    req = val;
  }

  bool operator == (const VicDataService_loadComments_args & rhs) const
  {
    if (!(sig == rhs.sig))
      return false;
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const VicDataService_loadComments_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_loadComments_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VicDataService_loadComments_pargs {
 public:


  virtual ~VicDataService_loadComments_pargs() throw() {}

  const AuthSignature* sig;
  const ReqLoadComments* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_loadComments_result__isset {
  _VicDataService_loadComments_result__isset() : success(false) {}
  bool success;
} _VicDataService_loadComments_result__isset;

class VicDataService_loadComments_result {
 public:

  VicDataService_loadComments_result() {
  }

  virtual ~VicDataService_loadComments_result() throw() {}

  ResLoadComments success;

  _VicDataService_loadComments_result__isset __isset;

  void __set_success(const ResLoadComments& val) {
    success = val;
  }

  bool operator == (const VicDataService_loadComments_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VicDataService_loadComments_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_loadComments_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_loadComments_presult__isset {
  _VicDataService_loadComments_presult__isset() : success(false) {}
  bool success;
} _VicDataService_loadComments_presult__isset;

class VicDataService_loadComments_presult {
 public:


  virtual ~VicDataService_loadComments_presult() throw() {}

  ResLoadComments* success;

  _VicDataService_loadComments_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_loadFollowerUIDs_args__isset {
  _VicDataService_loadFollowerUIDs_args__isset() : sig(false), uid(false) {}
  bool sig;
  bool uid;
} _VicDataService_loadFollowerUIDs_args__isset;

class VicDataService_loadFollowerUIDs_args {
 public:

  VicDataService_loadFollowerUIDs_args() : uid() {
  }

  virtual ~VicDataService_loadFollowerUIDs_args() throw() {}

  AuthSignature sig;
  UID uid;

  _VicDataService_loadFollowerUIDs_args__isset __isset;

  void __set_sig(const AuthSignature& val) {
    sig = val;
  }

  void __set_uid(const UID& val) {
    uid = val;
  }

  bool operator == (const VicDataService_loadFollowerUIDs_args & rhs) const
  {
    if (!(sig == rhs.sig))
      return false;
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const VicDataService_loadFollowerUIDs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_loadFollowerUIDs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VicDataService_loadFollowerUIDs_pargs {
 public:


  virtual ~VicDataService_loadFollowerUIDs_pargs() throw() {}

  const AuthSignature* sig;
  const UID* uid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_loadFollowerUIDs_result__isset {
  _VicDataService_loadFollowerUIDs_result__isset() : success(false) {}
  bool success;
} _VicDataService_loadFollowerUIDs_result__isset;

class VicDataService_loadFollowerUIDs_result {
 public:

  VicDataService_loadFollowerUIDs_result() {
  }

  virtual ~VicDataService_loadFollowerUIDs_result() throw() {}

  ResLoadFollowerUIDs success;

  _VicDataService_loadFollowerUIDs_result__isset __isset;

  void __set_success(const ResLoadFollowerUIDs& val) {
    success = val;
  }

  bool operator == (const VicDataService_loadFollowerUIDs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VicDataService_loadFollowerUIDs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VicDataService_loadFollowerUIDs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VicDataService_loadFollowerUIDs_presult__isset {
  _VicDataService_loadFollowerUIDs_presult__isset() : success(false) {}
  bool success;
} _VicDataService_loadFollowerUIDs_presult__isset;

class VicDataService_loadFollowerUIDs_presult {
 public:


  virtual ~VicDataService_loadFollowerUIDs_presult() throw() {}

  ResLoadFollowerUIDs* success;

  _VicDataService_loadFollowerUIDs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class VicDataServiceClient : virtual public VicDataServiceIf {
 public:
  VicDataServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  VicDataServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void authenticateUser(ResAuthenticateUser& _return, const AuthSignature& sig, const ReqAuthenticateUser& authReq);
  void send_authenticateUser(const AuthSignature& sig, const ReqAuthenticateUser& authReq);
  void recv_authenticateUser(ResAuthenticateUser& _return);
  void createUserProfile(ResCreateUserProfile& _return, const AuthSignature& sig, const UserProfile& profile);
  void send_createUserProfile(const AuthSignature& sig, const UserProfile& profile);
  void recv_createUserProfile(ResCreateUserProfile& _return);
  void updateUserProfile(ResUpdateUserProfile& _return, const AuthSignature& sig, const UserProfile& profile);
  void send_updateUserProfile(const AuthSignature& sig, const UserProfile& profile);
  void recv_updateUserProfile(ResUpdateUserProfile& _return);
  void loadUserProfiles(ResLoadUserProfiles& _return, const AuthSignature& sig, const std::vector<UID> & uids);
  void send_loadUserProfiles(const AuthSignature& sig, const std::vector<UID> & uids);
  void recv_loadUserProfiles(ResLoadUserProfiles& _return);
  void loadFriendProfiles(ResLoadFriendProfiles& _return, const AuthSignature& sig, const UID& uid);
  void send_loadFriendProfiles(const AuthSignature& sig, const UID& uid);
  void recv_loadFriendProfiles(ResLoadFriendProfiles& _return);
  void loadFriendUIDs(ResLoadFriendUIDs& _return, const AuthSignature& sig, const UID& uid);
  void send_loadFriendUIDs(const AuthSignature& sig, const UID& uid);
  void recv_loadFriendUIDs(ResLoadFriendUIDs& _return);
  void requestFriend(ResRequestFriend& _return, const AuthSignature& sig, const UID& uid);
  void send_requestFriend(const AuthSignature& sig, const UID& uid);
  void recv_requestFriend(ResRequestFriend& _return);
  void cancelFriend(ResCancelFriend& _return, const AuthSignature& sig, const UID& uid);
  void send_cancelFriend(const AuthSignature& sig, const UID& uid);
  void recv_cancelFriend(ResCancelFriend& _return);
  void searchUserByEmail(ResSearchUsers& _return, const AuthSignature& sig, const std::string& email);
  void send_searchUserByEmail(const AuthSignature& sig, const std::string& email);
  void recv_searchUserByEmail(ResSearchUsers& _return);
  void createContext(ResCreateContext& _return, const AuthSignature& sig, const std::vector<UID> & uids);
  void send_createContext(const AuthSignature& sig, const std::vector<UID> & uids);
  void recv_createContext(ResCreateContext& _return);
  void sendMessage(ResSendMessage& _return, const AuthSignature& sig, const ReqSendMessage& req);
  void send_sendMessage(const AuthSignature& sig, const ReqSendMessage& req);
  void recv_sendMessage(ResSendMessage& _return);
  void sendOnewayMessage(const AuthSignature& sig, const ReqSendMessage& req);
  void send_sendOnewayMessage(const AuthSignature& sig, const ReqSendMessage& req);
  void pullMessages(ResPullMessages& _return, const AuthSignature& sig, const ReqPullMessages& req);
  void send_pullMessages(const AuthSignature& sig, const ReqPullMessages& req);
  void recv_pullMessages(ResPullMessages& _return);
  void evalMessage(ResEvalMessage& _return, const AuthSignature& sig, const ReqEvalMessage& req);
  void send_evalMessage(const AuthSignature& sig, const ReqEvalMessage& req);
  void recv_evalMessage(ResEvalMessage& _return);
  void commentMessage(ResCommentMessage& _return, const AuthSignature& sig, const ReqCommentMessage& req);
  void send_commentMessage(const AuthSignature& sig, const ReqCommentMessage& req);
  void recv_commentMessage(ResCommentMessage& _return);
  void loadComments(ResLoadComments& _return, const AuthSignature& sig, const ReqLoadComments& req);
  void send_loadComments(const AuthSignature& sig, const ReqLoadComments& req);
  void recv_loadComments(ResLoadComments& _return);
  void loadFollowerUIDs(ResLoadFollowerUIDs& _return, const AuthSignature& sig, const UID& uid);
  void send_loadFollowerUIDs(const AuthSignature& sig, const UID& uid);
  void recv_loadFollowerUIDs(ResLoadFollowerUIDs& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class VicDataServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<VicDataServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (VicDataServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_authenticateUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createUserProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateUserProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadUserProfiles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadFriendProfiles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadFriendUIDs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_requestFriend(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cancelFriend(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_searchUserByEmail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createContext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendOnewayMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pullMessages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_evalMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commentMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadComments(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadFollowerUIDs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  VicDataServiceProcessor(boost::shared_ptr<VicDataServiceIf> iface) :
    iface_(iface) {
    processMap_["authenticateUser"] = &VicDataServiceProcessor::process_authenticateUser;
    processMap_["createUserProfile"] = &VicDataServiceProcessor::process_createUserProfile;
    processMap_["updateUserProfile"] = &VicDataServiceProcessor::process_updateUserProfile;
    processMap_["loadUserProfiles"] = &VicDataServiceProcessor::process_loadUserProfiles;
    processMap_["loadFriendProfiles"] = &VicDataServiceProcessor::process_loadFriendProfiles;
    processMap_["loadFriendUIDs"] = &VicDataServiceProcessor::process_loadFriendUIDs;
    processMap_["requestFriend"] = &VicDataServiceProcessor::process_requestFriend;
    processMap_["cancelFriend"] = &VicDataServiceProcessor::process_cancelFriend;
    processMap_["searchUserByEmail"] = &VicDataServiceProcessor::process_searchUserByEmail;
    processMap_["createContext"] = &VicDataServiceProcessor::process_createContext;
    processMap_["sendMessage"] = &VicDataServiceProcessor::process_sendMessage;
    processMap_["sendOnewayMessage"] = &VicDataServiceProcessor::process_sendOnewayMessage;
    processMap_["pullMessages"] = &VicDataServiceProcessor::process_pullMessages;
    processMap_["evalMessage"] = &VicDataServiceProcessor::process_evalMessage;
    processMap_["commentMessage"] = &VicDataServiceProcessor::process_commentMessage;
    processMap_["loadComments"] = &VicDataServiceProcessor::process_loadComments;
    processMap_["loadFollowerUIDs"] = &VicDataServiceProcessor::process_loadFollowerUIDs;
  }

  virtual ~VicDataServiceProcessor() {}
};

class VicDataServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  VicDataServiceProcessorFactory(const ::boost::shared_ptr< VicDataServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< VicDataServiceIfFactory > handlerFactory_;
};

class VicDataServiceMultiface : virtual public VicDataServiceIf {
 public:
  VicDataServiceMultiface(std::vector<boost::shared_ptr<VicDataServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~VicDataServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<VicDataServiceIf> > ifaces_;
  VicDataServiceMultiface() {}
  void add(boost::shared_ptr<VicDataServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void authenticateUser(ResAuthenticateUser& _return, const AuthSignature& sig, const ReqAuthenticateUser& authReq) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->authenticateUser(_return, sig, authReq);
    }
    ifaces_[i]->authenticateUser(_return, sig, authReq);
    return;
  }

  void createUserProfile(ResCreateUserProfile& _return, const AuthSignature& sig, const UserProfile& profile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createUserProfile(_return, sig, profile);
    }
    ifaces_[i]->createUserProfile(_return, sig, profile);
    return;
  }

  void updateUserProfile(ResUpdateUserProfile& _return, const AuthSignature& sig, const UserProfile& profile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateUserProfile(_return, sig, profile);
    }
    ifaces_[i]->updateUserProfile(_return, sig, profile);
    return;
  }

  void loadUserProfiles(ResLoadUserProfiles& _return, const AuthSignature& sig, const std::vector<UID> & uids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadUserProfiles(_return, sig, uids);
    }
    ifaces_[i]->loadUserProfiles(_return, sig, uids);
    return;
  }

  void loadFriendProfiles(ResLoadFriendProfiles& _return, const AuthSignature& sig, const UID& uid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadFriendProfiles(_return, sig, uid);
    }
    ifaces_[i]->loadFriendProfiles(_return, sig, uid);
    return;
  }

  void loadFriendUIDs(ResLoadFriendUIDs& _return, const AuthSignature& sig, const UID& uid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadFriendUIDs(_return, sig, uid);
    }
    ifaces_[i]->loadFriendUIDs(_return, sig, uid);
    return;
  }

  void requestFriend(ResRequestFriend& _return, const AuthSignature& sig, const UID& uid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->requestFriend(_return, sig, uid);
    }
    ifaces_[i]->requestFriend(_return, sig, uid);
    return;
  }

  void cancelFriend(ResCancelFriend& _return, const AuthSignature& sig, const UID& uid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cancelFriend(_return, sig, uid);
    }
    ifaces_[i]->cancelFriend(_return, sig, uid);
    return;
  }

  void searchUserByEmail(ResSearchUsers& _return, const AuthSignature& sig, const std::string& email) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->searchUserByEmail(_return, sig, email);
    }
    ifaces_[i]->searchUserByEmail(_return, sig, email);
    return;
  }

  void createContext(ResCreateContext& _return, const AuthSignature& sig, const std::vector<UID> & uids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createContext(_return, sig, uids);
    }
    ifaces_[i]->createContext(_return, sig, uids);
    return;
  }

  void sendMessage(ResSendMessage& _return, const AuthSignature& sig, const ReqSendMessage& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendMessage(_return, sig, req);
    }
    ifaces_[i]->sendMessage(_return, sig, req);
    return;
  }

  void sendOnewayMessage(const AuthSignature& sig, const ReqSendMessage& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendOnewayMessage(sig, req);
    }
    ifaces_[i]->sendOnewayMessage(sig, req);
  }

  void pullMessages(ResPullMessages& _return, const AuthSignature& sig, const ReqPullMessages& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pullMessages(_return, sig, req);
    }
    ifaces_[i]->pullMessages(_return, sig, req);
    return;
  }

  void evalMessage(ResEvalMessage& _return, const AuthSignature& sig, const ReqEvalMessage& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->evalMessage(_return, sig, req);
    }
    ifaces_[i]->evalMessage(_return, sig, req);
    return;
  }

  void commentMessage(ResCommentMessage& _return, const AuthSignature& sig, const ReqCommentMessage& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commentMessage(_return, sig, req);
    }
    ifaces_[i]->commentMessage(_return, sig, req);
    return;
  }

  void loadComments(ResLoadComments& _return, const AuthSignature& sig, const ReqLoadComments& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadComments(_return, sig, req);
    }
    ifaces_[i]->loadComments(_return, sig, req);
    return;
  }

  void loadFollowerUIDs(ResLoadFollowerUIDs& _return, const AuthSignature& sig, const UID& uid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadFollowerUIDs(_return, sig, uid);
    }
    ifaces_[i]->loadFollowerUIDs(_return, sig, uid);
    return;
  }

};

class VicDataServiceCobClient;

class VicDataServiceCobClIf {
 public:
  virtual ~VicDataServiceCobClIf() {}
  virtual void authenticateUser(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const ReqAuthenticateUser& authReq) = 0;
  virtual void createUserProfile(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const UserProfile& profile) = 0;
  virtual void updateUserProfile(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const UserProfile& profile) = 0;
  virtual void loadUserProfiles(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const std::vector<UID> & uids) = 0;
  virtual void loadFriendProfiles(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const UID& uid) = 0;
  virtual void loadFriendUIDs(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const UID& uid) = 0;
  virtual void requestFriend(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const UID& uid) = 0;
  virtual void cancelFriend(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const UID& uid) = 0;
  virtual void searchUserByEmail(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const std::string& email) = 0;
  virtual void createContext(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const std::vector<UID> & uids) = 0;
  virtual void sendMessage(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const ReqSendMessage& req) = 0;
  virtual void sendOnewayMessage(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const ReqSendMessage& req) = 0;
  virtual void pullMessages(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const ReqPullMessages& req) = 0;
  virtual void evalMessage(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const ReqEvalMessage& req) = 0;
  virtual void commentMessage(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const ReqCommentMessage& req) = 0;
  virtual void loadComments(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const ReqLoadComments& req) = 0;
  virtual void loadFollowerUIDs(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const UID& uid) = 0;
};

class VicDataServiceCobSvIf {
 public:
  virtual ~VicDataServiceCobSvIf() {}
  virtual void authenticateUser(std::tr1::function<void(ResAuthenticateUser const& _return)> cob, const AuthSignature& sig, const ReqAuthenticateUser& authReq) = 0;
  virtual void createUserProfile(std::tr1::function<void(ResCreateUserProfile const& _return)> cob, const AuthSignature& sig, const UserProfile& profile) = 0;
  virtual void updateUserProfile(std::tr1::function<void(ResUpdateUserProfile const& _return)> cob, const AuthSignature& sig, const UserProfile& profile) = 0;
  virtual void loadUserProfiles(std::tr1::function<void(ResLoadUserProfiles const& _return)> cob, const AuthSignature& sig, const std::vector<UID> & uids) = 0;
  virtual void loadFriendProfiles(std::tr1::function<void(ResLoadFriendProfiles const& _return)> cob, const AuthSignature& sig, const UID& uid) = 0;
  virtual void loadFriendUIDs(std::tr1::function<void(ResLoadFriendUIDs const& _return)> cob, const AuthSignature& sig, const UID& uid) = 0;
  virtual void requestFriend(std::tr1::function<void(ResRequestFriend const& _return)> cob, const AuthSignature& sig, const UID& uid) = 0;
  virtual void cancelFriend(std::tr1::function<void(ResCancelFriend const& _return)> cob, const AuthSignature& sig, const UID& uid) = 0;
  virtual void searchUserByEmail(std::tr1::function<void(ResSearchUsers const& _return)> cob, const AuthSignature& sig, const std::string& email) = 0;
  virtual void createContext(std::tr1::function<void(ResCreateContext const& _return)> cob, const AuthSignature& sig, const std::vector<UID> & uids) = 0;
  virtual void sendMessage(std::tr1::function<void(ResSendMessage const& _return)> cob, const AuthSignature& sig, const ReqSendMessage& req) = 0;
  virtual void sendOnewayMessage(std::tr1::function<void()> cob, const AuthSignature& sig, const ReqSendMessage& req) = 0;
  virtual void pullMessages(std::tr1::function<void(ResPullMessages const& _return)> cob, const AuthSignature& sig, const ReqPullMessages& req) = 0;
  virtual void evalMessage(std::tr1::function<void(ResEvalMessage const& _return)> cob, const AuthSignature& sig, const ReqEvalMessage& req) = 0;
  virtual void commentMessage(std::tr1::function<void(ResCommentMessage const& _return)> cob, const AuthSignature& sig, const ReqCommentMessage& req) = 0;
  virtual void loadComments(std::tr1::function<void(ResLoadComments const& _return)> cob, const AuthSignature& sig, const ReqLoadComments& req) = 0;
  virtual void loadFollowerUIDs(std::tr1::function<void(ResLoadFollowerUIDs const& _return)> cob, const AuthSignature& sig, const UID& uid) = 0;
};

class VicDataServiceCobSvIfFactory {
 public:
  typedef VicDataServiceCobSvIf Handler;

  virtual ~VicDataServiceCobSvIfFactory() {}

  virtual VicDataServiceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(VicDataServiceCobSvIf* /* handler */) = 0;
};

class VicDataServiceCobSvIfSingletonFactory : virtual public VicDataServiceCobSvIfFactory {
 public:
  VicDataServiceCobSvIfSingletonFactory(const boost::shared_ptr<VicDataServiceCobSvIf>& iface) : iface_(iface) {}
  virtual ~VicDataServiceCobSvIfSingletonFactory() {}

  virtual VicDataServiceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(VicDataServiceCobSvIf* /* handler */) {}

 protected:
  boost::shared_ptr<VicDataServiceCobSvIf> iface_;
};

class VicDataServiceCobSvNull : virtual public VicDataServiceCobSvIf {
 public:
  virtual ~VicDataServiceCobSvNull() {}
  void authenticateUser(std::tr1::function<void(ResAuthenticateUser const& _return)> cob, const AuthSignature& /* sig */, const ReqAuthenticateUser& /* authReq */) {
    ResAuthenticateUser _return;
    return cob(_return);
  }
  void createUserProfile(std::tr1::function<void(ResCreateUserProfile const& _return)> cob, const AuthSignature& /* sig */, const UserProfile& /* profile */) {
    ResCreateUserProfile _return;
    return cob(_return);
  }
  void updateUserProfile(std::tr1::function<void(ResUpdateUserProfile const& _return)> cob, const AuthSignature& /* sig */, const UserProfile& /* profile */) {
    ResUpdateUserProfile _return;
    return cob(_return);
  }
  void loadUserProfiles(std::tr1::function<void(ResLoadUserProfiles const& _return)> cob, const AuthSignature& /* sig */, const std::vector<UID> & /* uids */) {
    ResLoadUserProfiles _return;
    return cob(_return);
  }
  void loadFriendProfiles(std::tr1::function<void(ResLoadFriendProfiles const& _return)> cob, const AuthSignature& /* sig */, const UID& /* uid */) {
    ResLoadFriendProfiles _return;
    return cob(_return);
  }
  void loadFriendUIDs(std::tr1::function<void(ResLoadFriendUIDs const& _return)> cob, const AuthSignature& /* sig */, const UID& /* uid */) {
    ResLoadFriendUIDs _return;
    return cob(_return);
  }
  void requestFriend(std::tr1::function<void(ResRequestFriend const& _return)> cob, const AuthSignature& /* sig */, const UID& /* uid */) {
    ResRequestFriend _return;
    return cob(_return);
  }
  void cancelFriend(std::tr1::function<void(ResCancelFriend const& _return)> cob, const AuthSignature& /* sig */, const UID& /* uid */) {
    ResCancelFriend _return;
    return cob(_return);
  }
  void searchUserByEmail(std::tr1::function<void(ResSearchUsers const& _return)> cob, const AuthSignature& /* sig */, const std::string& /* email */) {
    ResSearchUsers _return;
    return cob(_return);
  }
  void createContext(std::tr1::function<void(ResCreateContext const& _return)> cob, const AuthSignature& /* sig */, const std::vector<UID> & /* uids */) {
    ResCreateContext _return;
    return cob(_return);
  }
  void sendMessage(std::tr1::function<void(ResSendMessage const& _return)> cob, const AuthSignature& /* sig */, const ReqSendMessage& /* req */) {
    ResSendMessage _return;
    return cob(_return);
  }
  void sendOnewayMessage(std::tr1::function<void()> cob, const AuthSignature& /* sig */, const ReqSendMessage& /* req */) {
    return cob();
  }
  void pullMessages(std::tr1::function<void(ResPullMessages const& _return)> cob, const AuthSignature& /* sig */, const ReqPullMessages& /* req */) {
    ResPullMessages _return;
    return cob(_return);
  }
  void evalMessage(std::tr1::function<void(ResEvalMessage const& _return)> cob, const AuthSignature& /* sig */, const ReqEvalMessage& /* req */) {
    ResEvalMessage _return;
    return cob(_return);
  }
  void commentMessage(std::tr1::function<void(ResCommentMessage const& _return)> cob, const AuthSignature& /* sig */, const ReqCommentMessage& /* req */) {
    ResCommentMessage _return;
    return cob(_return);
  }
  void loadComments(std::tr1::function<void(ResLoadComments const& _return)> cob, const AuthSignature& /* sig */, const ReqLoadComments& /* req */) {
    ResLoadComments _return;
    return cob(_return);
  }
  void loadFollowerUIDs(std::tr1::function<void(ResLoadFollowerUIDs const& _return)> cob, const AuthSignature& /* sig */, const UID& /* uid */) {
    ResLoadFollowerUIDs _return;
    return cob(_return);
  }
};

class VicDataServiceCobClient : virtual public VicDataServiceCobClIf {
 public:
  VicDataServiceCobClient(boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    channel_(channel),
    itrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    otrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    piprot_(protocolFactory->getProtocol(itrans_)),
    poprot_(protocolFactory->getProtocol(otrans_)) {
    iprot_ = piprot_.get();
    oprot_ = poprot_.get();
  }
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void authenticateUser(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const ReqAuthenticateUser& authReq);
  void send_authenticateUser(const AuthSignature& sig, const ReqAuthenticateUser& authReq);
  void recv_authenticateUser(ResAuthenticateUser& _return);
  void createUserProfile(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const UserProfile& profile);
  void send_createUserProfile(const AuthSignature& sig, const UserProfile& profile);
  void recv_createUserProfile(ResCreateUserProfile& _return);
  void updateUserProfile(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const UserProfile& profile);
  void send_updateUserProfile(const AuthSignature& sig, const UserProfile& profile);
  void recv_updateUserProfile(ResUpdateUserProfile& _return);
  void loadUserProfiles(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const std::vector<UID> & uids);
  void send_loadUserProfiles(const AuthSignature& sig, const std::vector<UID> & uids);
  void recv_loadUserProfiles(ResLoadUserProfiles& _return);
  void loadFriendProfiles(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const UID& uid);
  void send_loadFriendProfiles(const AuthSignature& sig, const UID& uid);
  void recv_loadFriendProfiles(ResLoadFriendProfiles& _return);
  void loadFriendUIDs(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const UID& uid);
  void send_loadFriendUIDs(const AuthSignature& sig, const UID& uid);
  void recv_loadFriendUIDs(ResLoadFriendUIDs& _return);
  void requestFriend(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const UID& uid);
  void send_requestFriend(const AuthSignature& sig, const UID& uid);
  void recv_requestFriend(ResRequestFriend& _return);
  void cancelFriend(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const UID& uid);
  void send_cancelFriend(const AuthSignature& sig, const UID& uid);
  void recv_cancelFriend(ResCancelFriend& _return);
  void searchUserByEmail(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const std::string& email);
  void send_searchUserByEmail(const AuthSignature& sig, const std::string& email);
  void recv_searchUserByEmail(ResSearchUsers& _return);
  void createContext(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const std::vector<UID> & uids);
  void send_createContext(const AuthSignature& sig, const std::vector<UID> & uids);
  void recv_createContext(ResCreateContext& _return);
  void sendMessage(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const ReqSendMessage& req);
  void send_sendMessage(const AuthSignature& sig, const ReqSendMessage& req);
  void recv_sendMessage(ResSendMessage& _return);
  void sendOnewayMessage(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const ReqSendMessage& req);
  void send_sendOnewayMessage(const AuthSignature& sig, const ReqSendMessage& req);
  void pullMessages(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const ReqPullMessages& req);
  void send_pullMessages(const AuthSignature& sig, const ReqPullMessages& req);
  void recv_pullMessages(ResPullMessages& _return);
  void evalMessage(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const ReqEvalMessage& req);
  void send_evalMessage(const AuthSignature& sig, const ReqEvalMessage& req);
  void recv_evalMessage(ResEvalMessage& _return);
  void commentMessage(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const ReqCommentMessage& req);
  void send_commentMessage(const AuthSignature& sig, const ReqCommentMessage& req);
  void recv_commentMessage(ResCommentMessage& _return);
  void loadComments(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const ReqLoadComments& req);
  void send_loadComments(const AuthSignature& sig, const ReqLoadComments& req);
  void recv_loadComments(ResLoadComments& _return);
  void loadFollowerUIDs(std::tr1::function<void(VicDataServiceCobClient* client)> cob, const AuthSignature& sig, const UID& uid);
  void send_loadFollowerUIDs(const AuthSignature& sig, const UID& uid);
  void recv_loadFollowerUIDs(ResLoadFollowerUIDs& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> itrans_;
  boost::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> otrans_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class VicDataServiceAsyncProcessor : public ::apache::thrift::async::TAsyncDispatchProcessor {
 protected:
  boost::shared_ptr<VicDataServiceCobSvIf> iface_;
  virtual void dispatchCall(std::tr1::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (VicDataServiceAsyncProcessor::*ProcessFunction)(std::tr1::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_authenticateUser(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_authenticateUser(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ResAuthenticateUser& _return);
  void throw_authenticateUser(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_createUserProfile(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_createUserProfile(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ResCreateUserProfile& _return);
  void throw_createUserProfile(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_updateUserProfile(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_updateUserProfile(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ResUpdateUserProfile& _return);
  void throw_updateUserProfile(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_loadUserProfiles(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_loadUserProfiles(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ResLoadUserProfiles& _return);
  void throw_loadUserProfiles(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_loadFriendProfiles(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_loadFriendProfiles(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ResLoadFriendProfiles& _return);
  void throw_loadFriendProfiles(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_loadFriendUIDs(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_loadFriendUIDs(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ResLoadFriendUIDs& _return);
  void throw_loadFriendUIDs(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_requestFriend(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_requestFriend(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ResRequestFriend& _return);
  void throw_requestFriend(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_cancelFriend(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_cancelFriend(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ResCancelFriend& _return);
  void throw_cancelFriend(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_searchUserByEmail(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_searchUserByEmail(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ResSearchUsers& _return);
  void throw_searchUserByEmail(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_createContext(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_createContext(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ResCreateContext& _return);
  void throw_createContext(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_sendMessage(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_sendMessage(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ResSendMessage& _return);
  void throw_sendMessage(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_sendOnewayMessage(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_sendOnewayMessage(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx);
  void throw_sendOnewayMessage(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_pullMessages(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_pullMessages(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ResPullMessages& _return);
  void throw_pullMessages(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_evalMessage(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_evalMessage(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ResEvalMessage& _return);
  void throw_evalMessage(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_commentMessage(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_commentMessage(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ResCommentMessage& _return);
  void throw_commentMessage(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_loadComments(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_loadComments(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ResLoadComments& _return);
  void throw_loadComments(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
  void process_loadFollowerUIDs(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_loadFollowerUIDs(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const ResLoadFollowerUIDs& _return);
  void throw_loadFollowerUIDs(std::tr1::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  VicDataServiceAsyncProcessor(boost::shared_ptr<VicDataServiceCobSvIf> iface) :
    iface_(iface) {
    processMap_["authenticateUser"] = &VicDataServiceAsyncProcessor::process_authenticateUser;
    processMap_["createUserProfile"] = &VicDataServiceAsyncProcessor::process_createUserProfile;
    processMap_["updateUserProfile"] = &VicDataServiceAsyncProcessor::process_updateUserProfile;
    processMap_["loadUserProfiles"] = &VicDataServiceAsyncProcessor::process_loadUserProfiles;
    processMap_["loadFriendProfiles"] = &VicDataServiceAsyncProcessor::process_loadFriendProfiles;
    processMap_["loadFriendUIDs"] = &VicDataServiceAsyncProcessor::process_loadFriendUIDs;
    processMap_["requestFriend"] = &VicDataServiceAsyncProcessor::process_requestFriend;
    processMap_["cancelFriend"] = &VicDataServiceAsyncProcessor::process_cancelFriend;
    processMap_["searchUserByEmail"] = &VicDataServiceAsyncProcessor::process_searchUserByEmail;
    processMap_["createContext"] = &VicDataServiceAsyncProcessor::process_createContext;
    processMap_["sendMessage"] = &VicDataServiceAsyncProcessor::process_sendMessage;
    processMap_["sendOnewayMessage"] = &VicDataServiceAsyncProcessor::process_sendOnewayMessage;
    processMap_["pullMessages"] = &VicDataServiceAsyncProcessor::process_pullMessages;
    processMap_["evalMessage"] = &VicDataServiceAsyncProcessor::process_evalMessage;
    processMap_["commentMessage"] = &VicDataServiceAsyncProcessor::process_commentMessage;
    processMap_["loadComments"] = &VicDataServiceAsyncProcessor::process_loadComments;
    processMap_["loadFollowerUIDs"] = &VicDataServiceAsyncProcessor::process_loadFollowerUIDs;
  }

  virtual ~VicDataServiceAsyncProcessor() {}
};

class VicDataServiceAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  VicDataServiceAsyncProcessorFactory(const ::boost::shared_ptr< VicDataServiceCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< VicDataServiceCobSvIfFactory > handlerFactory_;
};

} // namespace

#endif
