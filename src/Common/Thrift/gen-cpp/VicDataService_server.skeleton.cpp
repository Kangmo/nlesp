// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "VicDataService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::VicKit;

class VicDataServiceHandler : virtual public VicDataServiceIf {
 public:
  VicDataServiceHandler() {
    // Your initialization goes here
  }

  void authenticateUser(ResAuthenticateUser& _return, const AuthSignature& sig, const ReqAuthenticateUser& authReq) {
    // Your implementation goes here
    printf("authenticateUser\n");
  }

  void createUserProfile(ResCreateUserProfile& _return, const AuthSignature& sig, const UserProfile& profile) {
    // Your implementation goes here
    printf("createUserProfile\n");
  }

  void updateUserProfile(ResUpdateUserProfile& _return, const AuthSignature& sig, const UserProfile& profile) {
    // Your implementation goes here
    printf("updateUserProfile\n");
  }

  void loadUserProfiles(ResLoadUserProfiles& _return, const AuthSignature& sig, const std::vector<UID> & uids) {
    // Your implementation goes here
    printf("loadUserProfiles\n");
  }

  void loadFriendProfiles(ResLoadFriendProfiles& _return, const AuthSignature& sig, const UID& uid) {
    // Your implementation goes here
    printf("loadFriendProfiles\n");
  }

  void loadFriendUIDs(ResLoadFriendUIDs& _return, const AuthSignature& sig, const UID& uid) {
    // Your implementation goes here
    printf("loadFriendUIDs\n");
  }

  void requestFriend(ResRequestFriend& _return, const AuthSignature& sig, const UID& uid) {
    // Your implementation goes here
    printf("requestFriend\n");
  }

  void cancelFriend(ResCancelFriend& _return, const AuthSignature& sig, const UID& uid) {
    // Your implementation goes here
    printf("cancelFriend\n");
  }

  void searchUserByEmail(ResSearchUsers& _return, const AuthSignature& sig, const std::string& email) {
    // Your implementation goes here
    printf("searchUserByEmail\n");
  }

  void createContext(ResCreateContext& _return, const AuthSignature& sig, const std::vector<UID> & uids) {
    // Your implementation goes here
    printf("createContext\n");
  }

  void sendMessage(ResSendMessage& _return, const AuthSignature& sig, const ReqSendMessage& req) {
    // Your implementation goes here
    printf("sendMessage\n");
  }

  void sendOnewayMessage(const AuthSignature& sig, const ReqSendMessage& req) {
    // Your implementation goes here
    printf("sendOnewayMessage\n");
  }

  void pullMessages(ResPullMessages& _return, const AuthSignature& sig, const ReqPullMessages& req) {
    // Your implementation goes here
    printf("pullMessages\n");
  }

  void evalMessage(ResEvalMessage& _return, const AuthSignature& sig, const ReqEvalMessage& req) {
    // Your implementation goes here
    printf("evalMessage\n");
  }

  void commentMessage(ResCommentMessage& _return, const AuthSignature& sig, const ReqCommentMessage& req) {
    // Your implementation goes here
    printf("commentMessage\n");
  }

  void loadComments(ResLoadComments& _return, const AuthSignature& sig, const ReqLoadComments& req) {
    // Your implementation goes here
    printf("loadComments\n");
  }

  void loadFollowerUIDs(ResLoadFollowerUIDs& _return, const AuthSignature& sig, const UID& uid) {
    // Your implementation goes here
    printf("loadFollowerUIDs\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<VicDataServiceHandler> handler(new VicDataServiceHandler());
  shared_ptr<TProcessor> processor(new VicDataServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

