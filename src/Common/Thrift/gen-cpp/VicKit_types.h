/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef VicKit_TYPES_H
#define VicKit_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace VicKit {

struct ErrorCode {
  enum type {
    VKSuccess = 0,
    VKErrorUnknown = 1,
    VKErrorCancelled = 2,
    VKErrorCommunicationsFailure = 3,
    VKErrorUserDenied = 4,
    VKErrorInvalidCredentials = 5,
    VKErrorNotAuthenticated = 6,
    VKErrorAuthenticationInProgress = 7,
    VKErrorInvalidPlayer = 8,
    VKErrorScoreNotSet = 9,
    VKErrorParentalControlsBlocked = 10,
    VKErrorPlayerStatusExceedsMaximumLength = 11,
    VKErrorPlayerStatusInvalid = 12,
    VKErrorMatchRequestInvalid = 13,
    VKErrorUnderage = 14,
    VKErrorGameUnrecognized = 15,
    VKErrorNotSupported = 16,
    VKErrorInvalidParameter = 17,
    VKErrorUnexpectedConnection = 18,
    VKErrorChallengeInvalid = 19,
    VKErrorTurnBasedMatchDataTooLarge = 20,
    VKErrorTurnBasedTooManySessions = 21,
    VKErrorTurnBasedInvalidParticipant = 22,
    VKErrorTurnBasedInvalidTurn = 23,
    VKErrorTurnBasedInvalidState = 24
  };
};

extern const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES;

struct DetailedErrorCode {
  enum type {
    VKErrorDetailUserNotFound = 1001,
    VKErrorDetailInvalidUserIdentifierFormat = 1002,
    VKErrorDetailFriendIsRequester = 1003,
    VKErrorDetailEmailNotFound = 1004,
    VKErrorDetailInvalidPassword = 1005,
    VKErrorDetailEmptyEmailOnUserProfile = 1006,
    VKErrorDetailEmptyPasswordOnUserProfile = 1007,
    VKErrorDetailEmptyUserIdentifierOnUserProfile = 1008,
    VKErrorDetailEmailAlreadyExists = 1009,
    VKErrorDetailUnableToUpdateOtherUserProfile = 1010,
    VKErrorDetailUnableToChangeEmail = 1011,
    VKErrorDetailInvalidContextIdentifier = 1012,
    VKErrorDetailContextNotFound = 1013,
    VKErrorDetailExceedMaxUsers = 1014,
    VKErrorDetailTooLowClientVersion = 1015
  };
};

extern const std::map<int, const char*> _DetailedErrorCode_VALUES_TO_NAMES;

struct MessageType {
  enum type {
    MT_CONTEXT_INVITATION = 1,
    MT_FRIEND_REQUEST = 2,
    MT_PERSONAL_MESSAGE = 3,
    MT_CONTEXT_MESSAGE = 4
  };
};

extern const std::map<int, const char*> _MessageType_VALUES_TO_NAMES;

struct MessageEvaluationType {
  enum type {
    Like = 1,
    Dislike = 2,
    CancelLike = 3,
    CancelDislike = 4
  };
};

extern const std::map<int, const char*> _MessageEvaluationType_VALUES_TO_NAMES;

typedef std::string UID;

typedef int64_t ContextID;

typedef int64_t Timestamp;

typedef int64_t MessageID;

typedef int64_t VersionNumber;

typedef int64_t VoteCount;

typedef struct _ErrorDetail__isset {
  _ErrorDetail__isset() : detailedCode(false), detailedMessageFormat(false), detailedMessageArgs(false) {}
  bool detailedCode;
  bool detailedMessageFormat;
  bool detailedMessageArgs;
} _ErrorDetail__isset;

class ErrorDetail {
 public:

  static const char* ascii_fingerprint; // = "D121591FCC85D0E17C727CA264A5F46D";
  static const uint8_t binary_fingerprint[16]; // = {0xD1,0x21,0x59,0x1F,0xCC,0x85,0xD0,0xE1,0x7C,0x72,0x7C,0xA2,0x64,0xA5,0xF4,0x6D};

  ErrorDetail() : detailedCode((DetailedErrorCode::type)0), detailedMessageFormat() {
  }

  virtual ~ErrorDetail() throw() {}

  DetailedErrorCode::type detailedCode;
  std::string detailedMessageFormat;
  std::vector<std::string>  detailedMessageArgs;

  _ErrorDetail__isset __isset;

  void __set_detailedCode(const DetailedErrorCode::type val) {
    detailedCode = val;
  }

  void __set_detailedMessageFormat(const std::string& val) {
    detailedMessageFormat = val;
  }

  void __set_detailedMessageArgs(const std::vector<std::string> & val) {
    detailedMessageArgs = val;
  }

  bool operator == (const ErrorDetail & rhs) const
  {
    if (!(detailedCode == rhs.detailedCode))
      return false;
    if (!(detailedMessageFormat == rhs.detailedMessageFormat))
      return false;
    if (!(detailedMessageArgs == rhs.detailedMessageArgs))
      return false;
    return true;
  }
  bool operator != (const ErrorDetail &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ErrorDetail & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ErrorDetail &a, ErrorDetail &b);

typedef struct _ErrorDesc__isset {
  _ErrorDesc__isset() : code(false), message(false), detail(false) {}
  bool code;
  bool message;
  bool detail;
} _ErrorDesc__isset;

class ErrorDesc {
 public:

  static const char* ascii_fingerprint; // = "040B452B3394430288A81F0BF195438F";
  static const uint8_t binary_fingerprint[16]; // = {0x04,0x0B,0x45,0x2B,0x33,0x94,0x43,0x02,0x88,0xA8,0x1F,0x0B,0xF1,0x95,0x43,0x8F};

  ErrorDesc() : code((ErrorCode::type)0), message() {
  }

  virtual ~ErrorDesc() throw() {}

  ErrorCode::type code;
  std::string message;
  ErrorDetail detail;

  _ErrorDesc__isset __isset;

  void __set_code(const ErrorCode::type val) {
    code = val;
  }

  void __set_message(const std::string& val) {
    message = val;
  }

  void __set_detail(const ErrorDetail& val) {
    detail = val;
  }

  bool operator == (const ErrorDesc & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(message == rhs.message))
      return false;
    if (!(detail == rhs.detail))
      return false;
    return true;
  }
  bool operator != (const ErrorDesc &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ErrorDesc & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ErrorDesc &a, ErrorDesc &b);

typedef struct _UserProfile__isset {
  _UserProfile__isset() : uid(false), email(false), encryptedPassword(false), name(false), statusMessage(false), photo(false) {}
  bool uid;
  bool email;
  bool encryptedPassword;
  bool name;
  bool statusMessage;
  bool photo;
} _UserProfile__isset;

class UserProfile {
 public:

  static const char* ascii_fingerprint; // = "873CB9E5A4C10A7ECE7476FD192F55EE";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0x3C,0xB9,0xE5,0xA4,0xC1,0x0A,0x7E,0xCE,0x74,0x76,0xFD,0x19,0x2F,0x55,0xEE};

  UserProfile() : uid(), email(), encryptedPassword(), name(), statusMessage(), photo() {
  }

  virtual ~UserProfile() throw() {}

  UID uid;
  std::string email;
  std::string encryptedPassword;
  std::string name;
  std::string statusMessage;
  std::string photo;

  _UserProfile__isset __isset;

  void __set_uid(const UID& val) {
    uid = val;
  }

  void __set_email(const std::string& val) {
    email = val;
  }

  void __set_encryptedPassword(const std::string& val) {
    encryptedPassword = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_statusMessage(const std::string& val) {
    statusMessage = val;
  }

  void __set_photo(const std::string& val) {
    photo = val;
  }

  bool operator == (const UserProfile & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(encryptedPassword == rhs.encryptedPassword))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(statusMessage == rhs.statusMessage))
      return false;
    if (!(photo == rhs.photo))
      return false;
    return true;
  }
  bool operator != (const UserProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UserProfile &a, UserProfile &b);

typedef struct _ReqAuthenticateUser__isset {
  _ReqAuthenticateUser__isset() : email(false), encryptedPassword(false), clientVersion(false) {}
  bool email;
  bool encryptedPassword;
  bool clientVersion;
} _ReqAuthenticateUser__isset;

class ReqAuthenticateUser {
 public:

  static const char* ascii_fingerprint; // = "A0ED90CE9B69D7A0FCE24E26CAECD2AF";
  static const uint8_t binary_fingerprint[16]; // = {0xA0,0xED,0x90,0xCE,0x9B,0x69,0xD7,0xA0,0xFC,0xE2,0x4E,0x26,0xCA,0xEC,0xD2,0xAF};

  ReqAuthenticateUser() : email(), encryptedPassword(), clientVersion(0) {
  }

  virtual ~ReqAuthenticateUser() throw() {}

  std::string email;
  std::string encryptedPassword;
  VersionNumber clientVersion;

  _ReqAuthenticateUser__isset __isset;

  void __set_email(const std::string& val) {
    email = val;
  }

  void __set_encryptedPassword(const std::string& val) {
    encryptedPassword = val;
  }

  void __set_clientVersion(const VersionNumber val) {
    clientVersion = val;
  }

  bool operator == (const ReqAuthenticateUser & rhs) const
  {
    if (!(email == rhs.email))
      return false;
    if (!(encryptedPassword == rhs.encryptedPassword))
      return false;
    if (!(clientVersion == rhs.clientVersion))
      return false;
    return true;
  }
  bool operator != (const ReqAuthenticateUser &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqAuthenticateUser & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReqAuthenticateUser &a, ReqAuthenticateUser &b);

typedef struct _AuthSignature__isset {
  _AuthSignature__isset() : uid(false), signature(false) {}
  bool uid;
  bool signature;
} _AuthSignature__isset;

class AuthSignature {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  AuthSignature() : uid(), signature() {
  }

  virtual ~AuthSignature() throw() {}

  UID uid;
  std::string signature;

  _AuthSignature__isset __isset;

  void __set_uid(const UID& val) {
    uid = val;
  }

  void __set_signature(const std::string& val) {
    signature = val;
  }

  bool operator == (const AuthSignature & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(signature == rhs.signature))
      return false;
    return true;
  }
  bool operator != (const AuthSignature &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthSignature & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AuthSignature &a, AuthSignature &b);

typedef struct _ReqSendMessage__isset {
  _ReqSendMessage__isset() : cid(false), message(false) {}
  bool cid;
  bool message;
} _ReqSendMessage__isset;

class ReqSendMessage {
 public:

  static const char* ascii_fingerprint; // = "727CAEA8265A5DE67DBC931F55CD8753";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0x7C,0xAE,0xA8,0x26,0x5A,0x5D,0xE6,0x7D,0xBC,0x93,0x1F,0x55,0xCD,0x87,0x53};

  ReqSendMessage() : cid(0), message() {
  }

  virtual ~ReqSendMessage() throw() {}

  ContextID cid;
  std::string message;

  _ReqSendMessage__isset __isset;

  void __set_cid(const ContextID val) {
    cid = val;
  }

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ReqSendMessage & rhs) const
  {
    if (!(cid == rhs.cid))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ReqSendMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqSendMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReqSendMessage &a, ReqSendMessage &b);

typedef struct _ReqPullMessages__isset {
  _ReqPullMessages__isset() : startMessageID(false), stopMessageID(false) {}
  bool startMessageID;
  bool stopMessageID;
} _ReqPullMessages__isset;

class ReqPullMessages {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  ReqPullMessages() : startMessageID(0), stopMessageID(0) {
  }

  virtual ~ReqPullMessages() throw() {}

  MessageID startMessageID;
  MessageID stopMessageID;

  _ReqPullMessages__isset __isset;

  void __set_startMessageID(const MessageID val) {
    startMessageID = val;
  }

  void __set_stopMessageID(const MessageID val) {
    stopMessageID = val;
  }

  bool operator == (const ReqPullMessages & rhs) const
  {
    if (!(startMessageID == rhs.startMessageID))
      return false;
    if (!(stopMessageID == rhs.stopMessageID))
      return false;
    return true;
  }
  bool operator != (const ReqPullMessages &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqPullMessages & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReqPullMessages &a, ReqPullMessages &b);

typedef struct _ContextInvitationMessage__isset {
  _ContextInvitationMessage__isset() : playersToInvite(false) {}
  bool playersToInvite;
} _ContextInvitationMessage__isset;

class ContextInvitationMessage {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

  ContextInvitationMessage() {
  }

  virtual ~ContextInvitationMessage() throw() {}

  std::vector<UID>  playersToInvite;

  _ContextInvitationMessage__isset __isset;

  void __set_playersToInvite(const std::vector<UID> & val) {
    playersToInvite = val;
  }

  bool operator == (const ContextInvitationMessage & rhs) const
  {
    if (!(playersToInvite == rhs.playersToInvite))
      return false;
    return true;
  }
  bool operator != (const ContextInvitationMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContextInvitationMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ContextInvitationMessage &a, ContextInvitationMessage &b);

typedef struct _ContextMessageContent__isset {
  _ContextMessageContent__isset() : senderContextId(false), senderMessageId(false), senderUID(false), sentTime(false), messageType(false), message(false) {}
  bool senderContextId;
  bool senderMessageId;
  bool senderUID;
  bool sentTime;
  bool messageType;
  bool message;
} _ContextMessageContent__isset;

class ContextMessageContent {
 public:

  static const char* ascii_fingerprint; // = "335B2DCF77BA3E783C9F2E378937BB97";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x5B,0x2D,0xCF,0x77,0xBA,0x3E,0x78,0x3C,0x9F,0x2E,0x37,0x89,0x37,0xBB,0x97};

  ContextMessageContent() : senderContextId(0), senderMessageId(0), senderUID(), sentTime(0), messageType((MessageType::type)0), message() {
  }

  virtual ~ContextMessageContent() throw() {}

  ContextID senderContextId;
  MessageID senderMessageId;
  UID senderUID;
  Timestamp sentTime;
  MessageType::type messageType;
  std::string message;

  _ContextMessageContent__isset __isset;

  void __set_senderContextId(const ContextID val) {
    senderContextId = val;
  }

  void __set_senderMessageId(const MessageID val) {
    senderMessageId = val;
  }

  void __set_senderUID(const UID& val) {
    senderUID = val;
  }

  void __set_sentTime(const Timestamp val) {
    sentTime = val;
  }

  void __set_messageType(const MessageType::type val) {
    messageType = val;
  }

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ContextMessageContent & rhs) const
  {
    if (!(senderContextId == rhs.senderContextId))
      return false;
    if (!(senderMessageId == rhs.senderMessageId))
      return false;
    if (!(senderUID == rhs.senderUID))
      return false;
    if (!(sentTime == rhs.sentTime))
      return false;
    if (!(messageType == rhs.messageType))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ContextMessageContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContextMessageContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ContextMessageContent &a, ContextMessageContent &b);

typedef struct _ContextMessage__isset {
  _ContextMessage__isset() : messageContent(false), messageID(false), commentCount(false), likeCount(false), dislikeCount(false) {}
  bool messageContent;
  bool messageID;
  bool commentCount;
  bool likeCount;
  bool dislikeCount;
} _ContextMessage__isset;

class ContextMessage {
 public:

  static const char* ascii_fingerprint; // = "BD87BF25B54441568DF26984013C7974";
  static const uint8_t binary_fingerprint[16]; // = {0xBD,0x87,0xBF,0x25,0xB5,0x44,0x41,0x56,0x8D,0xF2,0x69,0x84,0x01,0x3C,0x79,0x74};

  ContextMessage() : messageID(0), commentCount(0), likeCount(0), dislikeCount(0) {
  }

  virtual ~ContextMessage() throw() {}

  ContextMessageContent messageContent;
  MessageID messageID;
  VoteCount commentCount;
  VoteCount likeCount;
  VoteCount dislikeCount;

  _ContextMessage__isset __isset;

  void __set_messageContent(const ContextMessageContent& val) {
    messageContent = val;
  }

  void __set_messageID(const MessageID val) {
    messageID = val;
  }

  void __set_commentCount(const VoteCount val) {
    commentCount = val;
  }

  void __set_likeCount(const VoteCount val) {
    likeCount = val;
  }

  void __set_dislikeCount(const VoteCount val) {
    dislikeCount = val;
  }

  bool operator == (const ContextMessage & rhs) const
  {
    if (!(messageContent == rhs.messageContent))
      return false;
    if (!(messageID == rhs.messageID))
      return false;
    if (!(commentCount == rhs.commentCount))
      return false;
    if (!(likeCount == rhs.likeCount))
      return false;
    if (!(dislikeCount == rhs.dislikeCount))
      return false;
    return true;
  }
  bool operator != (const ContextMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContextMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ContextMessage &a, ContextMessage &b);

typedef struct _ResAuthenticateUser__isset {
  _ResAuthenticateUser__isset() : error(false), userProfile(false), authSignature(false) {}
  bool error;
  bool userProfile;
  bool authSignature;
} _ResAuthenticateUser__isset;

class ResAuthenticateUser {
 public:

  static const char* ascii_fingerprint; // = "647D755E82CE2BB3D8B19699B183E1AD";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x7D,0x75,0x5E,0x82,0xCE,0x2B,0xB3,0xD8,0xB1,0x96,0x99,0xB1,0x83,0xE1,0xAD};

  ResAuthenticateUser() {
  }

  virtual ~ResAuthenticateUser() throw() {}

  ErrorDesc error;
  UserProfile userProfile;
  AuthSignature authSignature;

  _ResAuthenticateUser__isset __isset;

  void __set_error(const ErrorDesc& val) {
    error = val;
  }

  void __set_userProfile(const UserProfile& val) {
    userProfile = val;
  }

  void __set_authSignature(const AuthSignature& val) {
    authSignature = val;
  }

  bool operator == (const ResAuthenticateUser & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(userProfile == rhs.userProfile))
      return false;
    if (!(authSignature == rhs.authSignature))
      return false;
    return true;
  }
  bool operator != (const ResAuthenticateUser &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResAuthenticateUser & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ResAuthenticateUser &a, ResAuthenticateUser &b);

typedef struct _ResCreateUserProfile__isset {
  _ResCreateUserProfile__isset() : error(false), createdUserId(false) {}
  bool error;
  bool createdUserId;
} _ResCreateUserProfile__isset;

class ResCreateUserProfile {
 public:

  static const char* ascii_fingerprint; // = "6DB0179F3F86832C254FDFF185C10DFC";
  static const uint8_t binary_fingerprint[16]; // = {0x6D,0xB0,0x17,0x9F,0x3F,0x86,0x83,0x2C,0x25,0x4F,0xDF,0xF1,0x85,0xC1,0x0D,0xFC};

  ResCreateUserProfile() : createdUserId() {
  }

  virtual ~ResCreateUserProfile() throw() {}

  ErrorDesc error;
  UID createdUserId;

  _ResCreateUserProfile__isset __isset;

  void __set_error(const ErrorDesc& val) {
    error = val;
  }

  void __set_createdUserId(const UID& val) {
    createdUserId = val;
  }

  bool operator == (const ResCreateUserProfile & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(createdUserId == rhs.createdUserId))
      return false;
    return true;
  }
  bool operator != (const ResCreateUserProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResCreateUserProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ResCreateUserProfile &a, ResCreateUserProfile &b);

typedef struct _ResUpdateUserProfile__isset {
  _ResUpdateUserProfile__isset() : error(false) {}
  bool error;
} _ResUpdateUserProfile__isset;

class ResUpdateUserProfile {
 public:

  static const char* ascii_fingerprint; // = "FF4B6ED920BC7240E80FDE40D8C08F4F";
  static const uint8_t binary_fingerprint[16]; // = {0xFF,0x4B,0x6E,0xD9,0x20,0xBC,0x72,0x40,0xE8,0x0F,0xDE,0x40,0xD8,0xC0,0x8F,0x4F};

  ResUpdateUserProfile() {
  }

  virtual ~ResUpdateUserProfile() throw() {}

  ErrorDesc error;

  _ResUpdateUserProfile__isset __isset;

  void __set_error(const ErrorDesc& val) {
    error = val;
  }

  bool operator == (const ResUpdateUserProfile & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const ResUpdateUserProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResUpdateUserProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ResUpdateUserProfile &a, ResUpdateUserProfile &b);

typedef struct _ResLoadUserProfiles__isset {
  _ResLoadUserProfiles__isset() : error(false), userProfiles(false) {}
  bool error;
  bool userProfiles;
} _ResLoadUserProfiles__isset;

class ResLoadUserProfiles {
 public:

  static const char* ascii_fingerprint; // = "19F5F72C1ED413ACC82D155050F29A71";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xF5,0xF7,0x2C,0x1E,0xD4,0x13,0xAC,0xC8,0x2D,0x15,0x50,0x50,0xF2,0x9A,0x71};

  ResLoadUserProfiles() {
  }

  virtual ~ResLoadUserProfiles() throw() {}

  ErrorDesc error;
  std::vector<UserProfile>  userProfiles;

  _ResLoadUserProfiles__isset __isset;

  void __set_error(const ErrorDesc& val) {
    error = val;
  }

  void __set_userProfiles(const std::vector<UserProfile> & val) {
    userProfiles = val;
  }

  bool operator == (const ResLoadUserProfiles & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(userProfiles == rhs.userProfiles))
      return false;
    return true;
  }
  bool operator != (const ResLoadUserProfiles &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResLoadUserProfiles & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ResLoadUserProfiles &a, ResLoadUserProfiles &b);

typedef struct _ResLoadFriendProfiles__isset {
  _ResLoadFriendProfiles__isset() : error(false), friendProfiles(false) {}
  bool error;
  bool friendProfiles;
} _ResLoadFriendProfiles__isset;

class ResLoadFriendProfiles {
 public:

  static const char* ascii_fingerprint; // = "19F5F72C1ED413ACC82D155050F29A71";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xF5,0xF7,0x2C,0x1E,0xD4,0x13,0xAC,0xC8,0x2D,0x15,0x50,0x50,0xF2,0x9A,0x71};

  ResLoadFriendProfiles() {
  }

  virtual ~ResLoadFriendProfiles() throw() {}

  ErrorDesc error;
  std::vector<UserProfile>  friendProfiles;

  _ResLoadFriendProfiles__isset __isset;

  void __set_error(const ErrorDesc& val) {
    error = val;
  }

  void __set_friendProfiles(const std::vector<UserProfile> & val) {
    friendProfiles = val;
  }

  bool operator == (const ResLoadFriendProfiles & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(friendProfiles == rhs.friendProfiles))
      return false;
    return true;
  }
  bool operator != (const ResLoadFriendProfiles &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResLoadFriendProfiles & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ResLoadFriendProfiles &a, ResLoadFriendProfiles &b);

typedef struct _ResLoadFriendUIDs__isset {
  _ResLoadFriendUIDs__isset() : error(false), friendUIDs(false) {}
  bool error;
  bool friendUIDs;
} _ResLoadFriendUIDs__isset;

class ResLoadFriendUIDs {
 public:

  static const char* ascii_fingerprint; // = "B454485740DBB46F7F80F23EE0D26E05";
  static const uint8_t binary_fingerprint[16]; // = {0xB4,0x54,0x48,0x57,0x40,0xDB,0xB4,0x6F,0x7F,0x80,0xF2,0x3E,0xE0,0xD2,0x6E,0x05};

  ResLoadFriendUIDs() {
  }

  virtual ~ResLoadFriendUIDs() throw() {}

  ErrorDesc error;
  std::vector<UID>  friendUIDs;

  _ResLoadFriendUIDs__isset __isset;

  void __set_error(const ErrorDesc& val) {
    error = val;
  }

  void __set_friendUIDs(const std::vector<UID> & val) {
    friendUIDs = val;
  }

  bool operator == (const ResLoadFriendUIDs & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(friendUIDs == rhs.friendUIDs))
      return false;
    return true;
  }
  bool operator != (const ResLoadFriendUIDs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResLoadFriendUIDs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ResLoadFriendUIDs &a, ResLoadFriendUIDs &b);

typedef struct _ResRequestFriend__isset {
  _ResRequestFriend__isset() : error(false), friendProfile(false) {}
  bool error;
  bool friendProfile;
} _ResRequestFriend__isset;

class ResRequestFriend {
 public:

  static const char* ascii_fingerprint; // = "78629E0B6492BA4BA4865C3F60548F39";
  static const uint8_t binary_fingerprint[16]; // = {0x78,0x62,0x9E,0x0B,0x64,0x92,0xBA,0x4B,0xA4,0x86,0x5C,0x3F,0x60,0x54,0x8F,0x39};

  ResRequestFriend() {
  }

  virtual ~ResRequestFriend() throw() {}

  ErrorDesc error;
  UserProfile friendProfile;

  _ResRequestFriend__isset __isset;

  void __set_error(const ErrorDesc& val) {
    error = val;
  }

  void __set_friendProfile(const UserProfile& val) {
    friendProfile = val;
  }

  bool operator == (const ResRequestFriend & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(friendProfile == rhs.friendProfile))
      return false;
    return true;
  }
  bool operator != (const ResRequestFriend &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResRequestFriend & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ResRequestFriend &a, ResRequestFriend &b);

typedef struct _ResCancelFriend__isset {
  _ResCancelFriend__isset() : error(false), canceldFriendProfile(false) {}
  bool error;
  bool canceldFriendProfile;
} _ResCancelFriend__isset;

class ResCancelFriend {
 public:

  static const char* ascii_fingerprint; // = "78629E0B6492BA4BA4865C3F60548F39";
  static const uint8_t binary_fingerprint[16]; // = {0x78,0x62,0x9E,0x0B,0x64,0x92,0xBA,0x4B,0xA4,0x86,0x5C,0x3F,0x60,0x54,0x8F,0x39};

  ResCancelFriend() {
  }

  virtual ~ResCancelFriend() throw() {}

  ErrorDesc error;
  UserProfile canceldFriendProfile;

  _ResCancelFriend__isset __isset;

  void __set_error(const ErrorDesc& val) {
    error = val;
  }

  void __set_canceldFriendProfile(const UserProfile& val) {
    canceldFriendProfile = val;
  }

  bool operator == (const ResCancelFriend & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(canceldFriendProfile == rhs.canceldFriendProfile))
      return false;
    return true;
  }
  bool operator != (const ResCancelFriend &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResCancelFriend & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ResCancelFriend &a, ResCancelFriend &b);

typedef struct _ResSearchUsers__isset {
  _ResSearchUsers__isset() : error(false), userProfiles(false) {}
  bool error;
  bool userProfiles;
} _ResSearchUsers__isset;

class ResSearchUsers {
 public:

  static const char* ascii_fingerprint; // = "19F5F72C1ED413ACC82D155050F29A71";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xF5,0xF7,0x2C,0x1E,0xD4,0x13,0xAC,0xC8,0x2D,0x15,0x50,0x50,0xF2,0x9A,0x71};

  ResSearchUsers() {
  }

  virtual ~ResSearchUsers() throw() {}

  ErrorDesc error;
  std::vector<UserProfile>  userProfiles;

  _ResSearchUsers__isset __isset;

  void __set_error(const ErrorDesc& val) {
    error = val;
  }

  void __set_userProfiles(const std::vector<UserProfile> & val) {
    userProfiles = val;
  }

  bool operator == (const ResSearchUsers & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(userProfiles == rhs.userProfiles))
      return false;
    return true;
  }
  bool operator != (const ResSearchUsers &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResSearchUsers & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ResSearchUsers &a, ResSearchUsers &b);

typedef struct _ResCreateContext__isset {
  _ResCreateContext__isset() : error(false), createdContextId(false) {}
  bool error;
  bool createdContextId;
} _ResCreateContext__isset;

class ResCreateContext {
 public:

  static const char* ascii_fingerprint; // = "60493BA5C873F3623AF402892A633B1F";
  static const uint8_t binary_fingerprint[16]; // = {0x60,0x49,0x3B,0xA5,0xC8,0x73,0xF3,0x62,0x3A,0xF4,0x02,0x89,0x2A,0x63,0x3B,0x1F};

  ResCreateContext() : createdContextId(0) {
  }

  virtual ~ResCreateContext() throw() {}

  ErrorDesc error;
  ContextID createdContextId;

  _ResCreateContext__isset __isset;

  void __set_error(const ErrorDesc& val) {
    error = val;
  }

  void __set_createdContextId(const ContextID val) {
    createdContextId = val;
  }

  bool operator == (const ResCreateContext & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(createdContextId == rhs.createdContextId))
      return false;
    return true;
  }
  bool operator != (const ResCreateContext &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResCreateContext & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ResCreateContext &a, ResCreateContext &b);

typedef struct _ResSendMessage__isset {
  _ResSendMessage__isset() : error(false), createdMessageId(false) {}
  bool error;
  bool createdMessageId;
} _ResSendMessage__isset;

class ResSendMessage {
 public:

  static const char* ascii_fingerprint; // = "60493BA5C873F3623AF402892A633B1F";
  static const uint8_t binary_fingerprint[16]; // = {0x60,0x49,0x3B,0xA5,0xC8,0x73,0xF3,0x62,0x3A,0xF4,0x02,0x89,0x2A,0x63,0x3B,0x1F};

  ResSendMessage() : createdMessageId(0) {
  }

  virtual ~ResSendMessage() throw() {}

  ErrorDesc error;
  MessageID createdMessageId;

  _ResSendMessage__isset __isset;

  void __set_error(const ErrorDesc& val) {
    error = val;
  }

  void __set_createdMessageId(const MessageID val) {
    createdMessageId = val;
  }

  bool operator == (const ResSendMessage & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(createdMessageId == rhs.createdMessageId))
      return false;
    return true;
  }
  bool operator != (const ResSendMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResSendMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ResSendMessage &a, ResSendMessage &b);

typedef struct _ResPullMessages__isset {
  _ResPullMessages__isset() : error(false), maxMessageID(false), messageList(false) {}
  bool error;
  bool maxMessageID;
  bool messageList;
} _ResPullMessages__isset;

class ResPullMessages {
 public:

  static const char* ascii_fingerprint; // = "6757F5544C34A67014CC3B5DC1568059";
  static const uint8_t binary_fingerprint[16]; // = {0x67,0x57,0xF5,0x54,0x4C,0x34,0xA6,0x70,0x14,0xCC,0x3B,0x5D,0xC1,0x56,0x80,0x59};

  ResPullMessages() : maxMessageID(0) {
  }

  virtual ~ResPullMessages() throw() {}

  ErrorDesc error;
  MessageID maxMessageID;
  std::vector<ContextMessage>  messageList;

  _ResPullMessages__isset __isset;

  void __set_error(const ErrorDesc& val) {
    error = val;
  }

  void __set_maxMessageID(const MessageID val) {
    maxMessageID = val;
  }

  void __set_messageList(const std::vector<ContextMessage> & val) {
    messageList = val;
  }

  bool operator == (const ResPullMessages & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(maxMessageID == rhs.maxMessageID))
      return false;
    if (!(messageList == rhs.messageList))
      return false;
    return true;
  }
  bool operator != (const ResPullMessages &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResPullMessages & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ResPullMessages &a, ResPullMessages &b);

typedef struct _MessageReplyContent__isset {
  _MessageReplyContent__isset() : authorUserId(false), reply(false) {}
  bool authorUserId;
  bool reply;
} _MessageReplyContent__isset;

class MessageReplyContent {
 public:

  static const char* ascii_fingerprint; // = "727CAEA8265A5DE67DBC931F55CD8753";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0x7C,0xAE,0xA8,0x26,0x5A,0x5D,0xE6,0x7D,0xBC,0x93,0x1F,0x55,0xCD,0x87,0x53};

  MessageReplyContent() : authorUserId(0), reply() {
  }

  virtual ~MessageReplyContent() throw() {}

  int64_t authorUserId;
  std::string reply;

  _MessageReplyContent__isset __isset;

  void __set_authorUserId(const int64_t val) {
    authorUserId = val;
  }

  void __set_reply(const std::string& val) {
    reply = val;
  }

  bool operator == (const MessageReplyContent & rhs) const
  {
    if (!(authorUserId == rhs.authorUserId))
      return false;
    if (!(reply == rhs.reply))
      return false;
    return true;
  }
  bool operator != (const MessageReplyContent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageReplyContent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageReplyContent &a, MessageReplyContent &b);

typedef struct _ReqEvalMessage__isset {
  _ReqEvalMessage__isset() : contextID(false), messageID(false), type(false) {}
  bool contextID;
  bool messageID;
  bool type;
} _ReqEvalMessage__isset;

class ReqEvalMessage {
 public:

  static const char* ascii_fingerprint; // = "9F551022D4DF184E86CC5DB9186FAC79";
  static const uint8_t binary_fingerprint[16]; // = {0x9F,0x55,0x10,0x22,0xD4,0xDF,0x18,0x4E,0x86,0xCC,0x5D,0xB9,0x18,0x6F,0xAC,0x79};

  ReqEvalMessage() : contextID(0), messageID(0), type((MessageEvaluationType::type)0) {
  }

  virtual ~ReqEvalMessage() throw() {}

  ContextID contextID;
  MessageID messageID;
  MessageEvaluationType::type type;

  _ReqEvalMessage__isset __isset;

  void __set_contextID(const ContextID val) {
    contextID = val;
  }

  void __set_messageID(const MessageID val) {
    messageID = val;
  }

  void __set_type(const MessageEvaluationType::type val) {
    type = val;
  }

  bool operator == (const ReqEvalMessage & rhs) const
  {
    if (!(contextID == rhs.contextID))
      return false;
    if (!(messageID == rhs.messageID))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const ReqEvalMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqEvalMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReqEvalMessage &a, ReqEvalMessage &b);

typedef struct _ResEvalMessage__isset {
  _ResEvalMessage__isset() : error(false) {}
  bool error;
} _ResEvalMessage__isset;

class ResEvalMessage {
 public:

  static const char* ascii_fingerprint; // = "FF4B6ED920BC7240E80FDE40D8C08F4F";
  static const uint8_t binary_fingerprint[16]; // = {0xFF,0x4B,0x6E,0xD9,0x20,0xBC,0x72,0x40,0xE8,0x0F,0xDE,0x40,0xD8,0xC0,0x8F,0x4F};

  ResEvalMessage() {
  }

  virtual ~ResEvalMessage() throw() {}

  ErrorDesc error;

  _ResEvalMessage__isset __isset;

  void __set_error(const ErrorDesc& val) {
    error = val;
  }

  bool operator == (const ResEvalMessage & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const ResEvalMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResEvalMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ResEvalMessage &a, ResEvalMessage &b);

typedef struct _ReqCommentMessage__isset {
  _ReqCommentMessage__isset() : contextID(false), messageID(false), comment(false) {}
  bool contextID;
  bool messageID;
  bool comment;
} _ReqCommentMessage__isset;

class ReqCommentMessage {
 public:

  static const char* ascii_fingerprint; // = "6B0CD68886A371B59CE1B9EDCF067801";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0x0C,0xD6,0x88,0x86,0xA3,0x71,0xB5,0x9C,0xE1,0xB9,0xED,0xCF,0x06,0x78,0x01};

  ReqCommentMessage() : contextID(0), messageID(0), comment() {
  }

  virtual ~ReqCommentMessage() throw() {}

  ContextID contextID;
  MessageID messageID;
  std::string comment;

  _ReqCommentMessage__isset __isset;

  void __set_contextID(const ContextID val) {
    contextID = val;
  }

  void __set_messageID(const MessageID val) {
    messageID = val;
  }

  void __set_comment(const std::string& val) {
    comment = val;
  }

  bool operator == (const ReqCommentMessage & rhs) const
  {
    if (!(contextID == rhs.contextID))
      return false;
    if (!(messageID == rhs.messageID))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const ReqCommentMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqCommentMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReqCommentMessage &a, ReqCommentMessage &b);

typedef struct _ResCommentMessage__isset {
  _ResCommentMessage__isset() : error(false) {}
  bool error;
} _ResCommentMessage__isset;

class ResCommentMessage {
 public:

  static const char* ascii_fingerprint; // = "FF4B6ED920BC7240E80FDE40D8C08F4F";
  static const uint8_t binary_fingerprint[16]; // = {0xFF,0x4B,0x6E,0xD9,0x20,0xBC,0x72,0x40,0xE8,0x0F,0xDE,0x40,0xD8,0xC0,0x8F,0x4F};

  ResCommentMessage() {
  }

  virtual ~ResCommentMessage() throw() {}

  ErrorDesc error;

  _ResCommentMessage__isset __isset;

  void __set_error(const ErrorDesc& val) {
    error = val;
  }

  bool operator == (const ResCommentMessage & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const ResCommentMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResCommentMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ResCommentMessage &a, ResCommentMessage &b);

typedef struct _ReqLoadComments__isset {
  _ReqLoadComments__isset() : senderContextID(false), senderMessageID(false) {}
  bool senderContextID;
  bool senderMessageID;
} _ReqLoadComments__isset;

class ReqLoadComments {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  ReqLoadComments() : senderContextID(0), senderMessageID(0) {
  }

  virtual ~ReqLoadComments() throw() {}

  ContextID senderContextID;
  MessageID senderMessageID;

  _ReqLoadComments__isset __isset;

  void __set_senderContextID(const ContextID val) {
    senderContextID = val;
  }

  void __set_senderMessageID(const MessageID val) {
    senderMessageID = val;
  }

  bool operator == (const ReqLoadComments & rhs) const
  {
    if (!(senderContextID == rhs.senderContextID))
      return false;
    if (!(senderMessageID == rhs.senderMessageID))
      return false;
    return true;
  }
  bool operator != (const ReqLoadComments &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqLoadComments & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReqLoadComments &a, ReqLoadComments &b);

typedef struct _MessageComment__isset {
  _MessageComment__isset() : commenterUID(false), commentTime(false), comment(false) {}
  bool commenterUID;
  bool commentTime;
  bool comment;
} _MessageComment__isset;

class MessageComment {
 public:

  static const char* ascii_fingerprint; // = "FA35BEC6F4D26D79A7E0AD1366489BCC";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0x35,0xBE,0xC6,0xF4,0xD2,0x6D,0x79,0xA7,0xE0,0xAD,0x13,0x66,0x48,0x9B,0xCC};

  MessageComment() : commenterUID(), commentTime(0), comment() {
  }

  virtual ~MessageComment() throw() {}

  UID commenterUID;
  Timestamp commentTime;
  std::string comment;

  _MessageComment__isset __isset;

  void __set_commenterUID(const UID& val) {
    commenterUID = val;
  }

  void __set_commentTime(const Timestamp val) {
    commentTime = val;
  }

  void __set_comment(const std::string& val) {
    comment = val;
  }

  bool operator == (const MessageComment & rhs) const
  {
    if (!(commenterUID == rhs.commenterUID))
      return false;
    if (!(commentTime == rhs.commentTime))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const MessageComment &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageComment & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MessageComment &a, MessageComment &b);

typedef struct _ResLoadComments__isset {
  _ResLoadComments__isset() : error(false), senderContextID(false), senderMessageID(false), commentList(false) {}
  bool error;
  bool senderContextID;
  bool senderMessageID;
  bool commentList;
} _ResLoadComments__isset;

class ResLoadComments {
 public:

  static const char* ascii_fingerprint; // = "A82FD857D959CD1D57B82CA9EEA34BD4";
  static const uint8_t binary_fingerprint[16]; // = {0xA8,0x2F,0xD8,0x57,0xD9,0x59,0xCD,0x1D,0x57,0xB8,0x2C,0xA9,0xEE,0xA3,0x4B,0xD4};

  ResLoadComments() : senderContextID(0), senderMessageID(0) {
  }

  virtual ~ResLoadComments() throw() {}

  ErrorDesc error;
  ContextID senderContextID;
  MessageID senderMessageID;
  std::vector<MessageComment>  commentList;

  _ResLoadComments__isset __isset;

  void __set_error(const ErrorDesc& val) {
    error = val;
  }

  void __set_senderContextID(const ContextID val) {
    senderContextID = val;
  }

  void __set_senderMessageID(const MessageID val) {
    senderMessageID = val;
  }

  void __set_commentList(const std::vector<MessageComment> & val) {
    commentList = val;
  }

  bool operator == (const ResLoadComments & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(senderContextID == rhs.senderContextID))
      return false;
    if (!(senderMessageID == rhs.senderMessageID))
      return false;
    if (!(commentList == rhs.commentList))
      return false;
    return true;
  }
  bool operator != (const ResLoadComments &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResLoadComments & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ResLoadComments &a, ResLoadComments &b);

typedef struct _ResLoadFollowerUIDs__isset {
  _ResLoadFollowerUIDs__isset() : error(false), followerUIDs(false) {}
  bool error;
  bool followerUIDs;
} _ResLoadFollowerUIDs__isset;

class ResLoadFollowerUIDs {
 public:

  static const char* ascii_fingerprint; // = "B454485740DBB46F7F80F23EE0D26E05";
  static const uint8_t binary_fingerprint[16]; // = {0xB4,0x54,0x48,0x57,0x40,0xDB,0xB4,0x6F,0x7F,0x80,0xF2,0x3E,0xE0,0xD2,0x6E,0x05};

  ResLoadFollowerUIDs() {
  }

  virtual ~ResLoadFollowerUIDs() throw() {}

  ErrorDesc error;
  std::vector<UID>  followerUIDs;

  _ResLoadFollowerUIDs__isset __isset;

  void __set_error(const ErrorDesc& val) {
    error = val;
  }

  void __set_followerUIDs(const std::vector<UID> & val) {
    followerUIDs = val;
  }

  bool operator == (const ResLoadFollowerUIDs & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(followerUIDs == rhs.followerUIDs))
      return false;
    return true;
  }
  bool operator != (const ResLoadFollowerUIDs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResLoadFollowerUIDs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ResLoadFollowerUIDs &a, ResLoadFollowerUIDs &b);

typedef struct _ClientContextData__isset {
  _ClientContextData__isset() : playerUIDs(false) {}
  bool playerUIDs;
} _ClientContextData__isset;

class ClientContextData {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

  ClientContextData() {
  }

  virtual ~ClientContextData() throw() {}

  std::vector<UID>  playerUIDs;

  _ClientContextData__isset __isset;

  void __set_playerUIDs(const std::vector<UID> & val) {
    playerUIDs = val;
  }

  bool operator == (const ClientContextData & rhs) const
  {
    if (!(playerUIDs == rhs.playerUIDs))
      return false;
    return true;
  }
  bool operator != (const ClientContextData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientContextData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ClientContextData &a, ClientContextData &b);

typedef struct _ClientContextMap__isset {
  _ClientContextMap__isset() : contextMap(false) {}
  bool contextMap;
} _ClientContextMap__isset;

class ClientContextMap {
 public:

  static const char* ascii_fingerprint; // = "8C7B95C09551DEE89D2B008CAC3C6084";
  static const uint8_t binary_fingerprint[16]; // = {0x8C,0x7B,0x95,0xC0,0x95,0x51,0xDE,0xE8,0x9D,0x2B,0x00,0x8C,0xAC,0x3C,0x60,0x84};

  ClientContextMap() {
  }

  virtual ~ClientContextMap() throw() {}

  std::map<ContextID, ClientContextData>  contextMap;

  _ClientContextMap__isset __isset;

  void __set_contextMap(const std::map<ContextID, ClientContextData> & val) {
    contextMap = val;
  }

  bool operator == (const ClientContextMap & rhs) const
  {
    if (!(contextMap == rhs.contextMap))
      return false;
    return true;
  }
  bool operator != (const ClientContextMap &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientContextMap & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ClientContextMap &a, ClientContextMap &b);

} // namespace

#endif
