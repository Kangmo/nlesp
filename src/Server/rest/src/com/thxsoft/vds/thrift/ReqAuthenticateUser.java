/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thxsoft.vds.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqAuthenticateUser implements org.apache.thrift.TBase<ReqAuthenticateUser, ReqAuthenticateUser._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqAuthenticateUser");

  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ENCRYPTED_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("encryptedPassword", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CLIENT_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("clientVersion", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqAuthenticateUserStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqAuthenticateUserTupleSchemeFactory());
  }

  public String email; // required
  public String encryptedPassword; // required
  public long clientVersion; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EMAIL((short)1, "email"),
    ENCRYPTED_PASSWORD((short)2, "encryptedPassword"),
    CLIENT_VERSION((short)3, "clientVersion");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EMAIL
          return EMAIL;
        case 2: // ENCRYPTED_PASSWORD
          return ENCRYPTED_PASSWORD;
        case 3: // CLIENT_VERSION
          return CLIENT_VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CLIENTVERSION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENCRYPTED_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("encryptedPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_VERSION, new org.apache.thrift.meta_data.FieldMetaData("clientVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "VersionNumber")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqAuthenticateUser.class, metaDataMap);
  }

  public ReqAuthenticateUser() {
  }

  public ReqAuthenticateUser(
    String email,
    String encryptedPassword,
    long clientVersion)
  {
    this();
    this.email = email;
    this.encryptedPassword = encryptedPassword;
    this.clientVersion = clientVersion;
    setClientVersionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqAuthenticateUser(ReqAuthenticateUser other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetEncryptedPassword()) {
      this.encryptedPassword = other.encryptedPassword;
    }
    this.clientVersion = other.clientVersion;
  }

  public ReqAuthenticateUser deepCopy() {
    return new ReqAuthenticateUser(this);
  }

  @Override
  public void clear() {
    this.email = null;
    this.encryptedPassword = null;
    setClientVersionIsSet(false);
    this.clientVersion = 0;
  }

  public String getEmail() {
    return this.email;
  }

  public ReqAuthenticateUser setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public String getEncryptedPassword() {
    return this.encryptedPassword;
  }

  public ReqAuthenticateUser setEncryptedPassword(String encryptedPassword) {
    this.encryptedPassword = encryptedPassword;
    return this;
  }

  public void unsetEncryptedPassword() {
    this.encryptedPassword = null;
  }

  /** Returns true if field encryptedPassword is set (has been assigned a value) and false otherwise */
  public boolean isSetEncryptedPassword() {
    return this.encryptedPassword != null;
  }

  public void setEncryptedPasswordIsSet(boolean value) {
    if (!value) {
      this.encryptedPassword = null;
    }
  }

  public long getClientVersion() {
    return this.clientVersion;
  }

  public ReqAuthenticateUser setClientVersion(long clientVersion) {
    this.clientVersion = clientVersion;
    setClientVersionIsSet(true);
    return this;
  }

  public void unsetClientVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLIENTVERSION_ISSET_ID);
  }

  /** Returns true if field clientVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetClientVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __CLIENTVERSION_ISSET_ID);
  }

  public void setClientVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLIENTVERSION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case ENCRYPTED_PASSWORD:
      if (value == null) {
        unsetEncryptedPassword();
      } else {
        setEncryptedPassword((String)value);
      }
      break;

    case CLIENT_VERSION:
      if (value == null) {
        unsetClientVersion();
      } else {
        setClientVersion((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EMAIL:
      return getEmail();

    case ENCRYPTED_PASSWORD:
      return getEncryptedPassword();

    case CLIENT_VERSION:
      return Long.valueOf(getClientVersion());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EMAIL:
      return isSetEmail();
    case ENCRYPTED_PASSWORD:
      return isSetEncryptedPassword();
    case CLIENT_VERSION:
      return isSetClientVersion();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqAuthenticateUser)
      return this.equals((ReqAuthenticateUser)that);
    return false;
  }

  public boolean equals(ReqAuthenticateUser that) {
    if (that == null)
      return false;

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_encryptedPassword = true && this.isSetEncryptedPassword();
    boolean that_present_encryptedPassword = true && that.isSetEncryptedPassword();
    if (this_present_encryptedPassword || that_present_encryptedPassword) {
      if (!(this_present_encryptedPassword && that_present_encryptedPassword))
        return false;
      if (!this.encryptedPassword.equals(that.encryptedPassword))
        return false;
    }

    boolean this_present_clientVersion = true;
    boolean that_present_clientVersion = true;
    if (this_present_clientVersion || that_present_clientVersion) {
      if (!(this_present_clientVersion && that_present_clientVersion))
        return false;
      if (this.clientVersion != that.clientVersion)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ReqAuthenticateUser other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ReqAuthenticateUser typedOther = (ReqAuthenticateUser)other;

    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(typedOther.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, typedOther.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEncryptedPassword()).compareTo(typedOther.isSetEncryptedPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncryptedPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encryptedPassword, typedOther.encryptedPassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientVersion()).compareTo(typedOther.isSetClientVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientVersion, typedOther.clientVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqAuthenticateUser(");
    boolean first = true;

    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("encryptedPassword:");
    if (this.encryptedPassword == null) {
      sb.append("null");
    } else {
      sb.append(this.encryptedPassword);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientVersion:");
    sb.append(this.clientVersion);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqAuthenticateUserStandardSchemeFactory implements SchemeFactory {
    public ReqAuthenticateUserStandardScheme getScheme() {
      return new ReqAuthenticateUserStandardScheme();
    }
  }

  private static class ReqAuthenticateUserStandardScheme extends StandardScheme<ReqAuthenticateUser> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqAuthenticateUser struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ENCRYPTED_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.encryptedPassword = iprot.readString();
              struct.setEncryptedPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CLIENT_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.clientVersion = iprot.readI64();
              struct.setClientVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqAuthenticateUser struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(struct.email);
        oprot.writeFieldEnd();
      }
      if (struct.encryptedPassword != null) {
        oprot.writeFieldBegin(ENCRYPTED_PASSWORD_FIELD_DESC);
        oprot.writeString(struct.encryptedPassword);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CLIENT_VERSION_FIELD_DESC);
      oprot.writeI64(struct.clientVersion);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqAuthenticateUserTupleSchemeFactory implements SchemeFactory {
    public ReqAuthenticateUserTupleScheme getScheme() {
      return new ReqAuthenticateUserTupleScheme();
    }
  }

  private static class ReqAuthenticateUserTupleScheme extends TupleScheme<ReqAuthenticateUser> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqAuthenticateUser struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetEmail()) {
        optionals.set(0);
      }
      if (struct.isSetEncryptedPassword()) {
        optionals.set(1);
      }
      if (struct.isSetClientVersion()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetEncryptedPassword()) {
        oprot.writeString(struct.encryptedPassword);
      }
      if (struct.isSetClientVersion()) {
        oprot.writeI64(struct.clientVersion);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqAuthenticateUser struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(1)) {
        struct.encryptedPassword = iprot.readString();
        struct.setEncryptedPasswordIsSet(true);
      }
      if (incoming.get(2)) {
        struct.clientVersion = iprot.readI64();
        struct.setClientVersionIsSet(true);
      }
    }
  }

}

