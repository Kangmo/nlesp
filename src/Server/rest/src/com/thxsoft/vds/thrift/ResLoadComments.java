/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thxsoft.vds.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ResLoadComments implements org.apache.thrift.TBase<ResLoadComments, ResLoadComments._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResLoadComments");

  private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SENDER_CONTEXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("senderContextID", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SENDER_MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("senderMessageID", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField COMMENT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("commentList", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResLoadCommentsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResLoadCommentsTupleSchemeFactory());
  }

  public ErrorDesc error; // required
  public long senderContextID; // required
  public long senderMessageID; // required
  public List<MessageComment> commentList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ERROR((short)1, "error"),
    SENDER_CONTEXT_ID((short)2, "senderContextID"),
    SENDER_MESSAGE_ID((short)3, "senderMessageID"),
    COMMENT_LIST((short)4, "commentList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ERROR
          return ERROR;
        case 2: // SENDER_CONTEXT_ID
          return SENDER_CONTEXT_ID;
        case 3: // SENDER_MESSAGE_ID
          return SENDER_MESSAGE_ID;
        case 4: // COMMENT_LIST
          return COMMENT_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SENDERCONTEXTID_ISSET_ID = 0;
  private static final int __SENDERMESSAGEID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ErrorDesc.class)));
    tmpMap.put(_Fields.SENDER_CONTEXT_ID, new org.apache.thrift.meta_data.FieldMetaData("senderContextID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "ContextID")));
    tmpMap.put(_Fields.SENDER_MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("senderMessageID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "MessageID")));
    tmpMap.put(_Fields.COMMENT_LIST, new org.apache.thrift.meta_data.FieldMetaData("commentList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MessageComment.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResLoadComments.class, metaDataMap);
  }

  public ResLoadComments() {
  }

  public ResLoadComments(
    ErrorDesc error,
    long senderContextID,
    long senderMessageID,
    List<MessageComment> commentList)
  {
    this();
    this.error = error;
    this.senderContextID = senderContextID;
    setSenderContextIDIsSet(true);
    this.senderMessageID = senderMessageID;
    setSenderMessageIDIsSet(true);
    this.commentList = commentList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResLoadComments(ResLoadComments other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetError()) {
      this.error = new ErrorDesc(other.error);
    }
    this.senderContextID = other.senderContextID;
    this.senderMessageID = other.senderMessageID;
    if (other.isSetCommentList()) {
      List<MessageComment> __this__commentList = new ArrayList<MessageComment>();
      for (MessageComment other_element : other.commentList) {
        __this__commentList.add(new MessageComment(other_element));
      }
      this.commentList = __this__commentList;
    }
  }

  public ResLoadComments deepCopy() {
    return new ResLoadComments(this);
  }

  @Override
  public void clear() {
    this.error = null;
    setSenderContextIDIsSet(false);
    this.senderContextID = 0;
    setSenderMessageIDIsSet(false);
    this.senderMessageID = 0;
    this.commentList = null;
  }

  public ErrorDesc getError() {
    return this.error;
  }

  public ResLoadComments setError(ErrorDesc error) {
    this.error = error;
    return this;
  }

  public void unsetError() {
    this.error = null;
  }

  /** Returns true if field error is set (has been assigned a value) and false otherwise */
  public boolean isSetError() {
    return this.error != null;
  }

  public void setErrorIsSet(boolean value) {
    if (!value) {
      this.error = null;
    }
  }

  public long getSenderContextID() {
    return this.senderContextID;
  }

  public ResLoadComments setSenderContextID(long senderContextID) {
    this.senderContextID = senderContextID;
    setSenderContextIDIsSet(true);
    return this;
  }

  public void unsetSenderContextID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDERCONTEXTID_ISSET_ID);
  }

  /** Returns true if field senderContextID is set (has been assigned a value) and false otherwise */
  public boolean isSetSenderContextID() {
    return EncodingUtils.testBit(__isset_bitfield, __SENDERCONTEXTID_ISSET_ID);
  }

  public void setSenderContextIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDERCONTEXTID_ISSET_ID, value);
  }

  public long getSenderMessageID() {
    return this.senderMessageID;
  }

  public ResLoadComments setSenderMessageID(long senderMessageID) {
    this.senderMessageID = senderMessageID;
    setSenderMessageIDIsSet(true);
    return this;
  }

  public void unsetSenderMessageID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDERMESSAGEID_ISSET_ID);
  }

  /** Returns true if field senderMessageID is set (has been assigned a value) and false otherwise */
  public boolean isSetSenderMessageID() {
    return EncodingUtils.testBit(__isset_bitfield, __SENDERMESSAGEID_ISSET_ID);
  }

  public void setSenderMessageIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDERMESSAGEID_ISSET_ID, value);
  }

  public int getCommentListSize() {
    return (this.commentList == null) ? 0 : this.commentList.size();
  }

  public java.util.Iterator<MessageComment> getCommentListIterator() {
    return (this.commentList == null) ? null : this.commentList.iterator();
  }

  public void addToCommentList(MessageComment elem) {
    if (this.commentList == null) {
      this.commentList = new ArrayList<MessageComment>();
    }
    this.commentList.add(elem);
  }

  public List<MessageComment> getCommentList() {
    return this.commentList;
  }

  public ResLoadComments setCommentList(List<MessageComment> commentList) {
    this.commentList = commentList;
    return this;
  }

  public void unsetCommentList() {
    this.commentList = null;
  }

  /** Returns true if field commentList is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentList() {
    return this.commentList != null;
  }

  public void setCommentListIsSet(boolean value) {
    if (!value) {
      this.commentList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ERROR:
      if (value == null) {
        unsetError();
      } else {
        setError((ErrorDesc)value);
      }
      break;

    case SENDER_CONTEXT_ID:
      if (value == null) {
        unsetSenderContextID();
      } else {
        setSenderContextID((Long)value);
      }
      break;

    case SENDER_MESSAGE_ID:
      if (value == null) {
        unsetSenderMessageID();
      } else {
        setSenderMessageID((Long)value);
      }
      break;

    case COMMENT_LIST:
      if (value == null) {
        unsetCommentList();
      } else {
        setCommentList((List<MessageComment>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ERROR:
      return getError();

    case SENDER_CONTEXT_ID:
      return Long.valueOf(getSenderContextID());

    case SENDER_MESSAGE_ID:
      return Long.valueOf(getSenderMessageID());

    case COMMENT_LIST:
      return getCommentList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ERROR:
      return isSetError();
    case SENDER_CONTEXT_ID:
      return isSetSenderContextID();
    case SENDER_MESSAGE_ID:
      return isSetSenderMessageID();
    case COMMENT_LIST:
      return isSetCommentList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ResLoadComments)
      return this.equals((ResLoadComments)that);
    return false;
  }

  public boolean equals(ResLoadComments that) {
    if (that == null)
      return false;

    boolean this_present_error = true && this.isSetError();
    boolean that_present_error = true && that.isSetError();
    if (this_present_error || that_present_error) {
      if (!(this_present_error && that_present_error))
        return false;
      if (!this.error.equals(that.error))
        return false;
    }

    boolean this_present_senderContextID = true;
    boolean that_present_senderContextID = true;
    if (this_present_senderContextID || that_present_senderContextID) {
      if (!(this_present_senderContextID && that_present_senderContextID))
        return false;
      if (this.senderContextID != that.senderContextID)
        return false;
    }

    boolean this_present_senderMessageID = true;
    boolean that_present_senderMessageID = true;
    if (this_present_senderMessageID || that_present_senderMessageID) {
      if (!(this_present_senderMessageID && that_present_senderMessageID))
        return false;
      if (this.senderMessageID != that.senderMessageID)
        return false;
    }

    boolean this_present_commentList = true && this.isSetCommentList();
    boolean that_present_commentList = true && that.isSetCommentList();
    if (this_present_commentList || that_present_commentList) {
      if (!(this_present_commentList && that_present_commentList))
        return false;
      if (!this.commentList.equals(that.commentList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ResLoadComments other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ResLoadComments typedOther = (ResLoadComments)other;

    lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSenderContextID()).compareTo(typedOther.isSetSenderContextID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSenderContextID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.senderContextID, typedOther.senderContextID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSenderMessageID()).compareTo(typedOther.isSetSenderMessageID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSenderMessageID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.senderMessageID, typedOther.senderMessageID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentList()).compareTo(typedOther.isSetCommentList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentList, typedOther.commentList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ResLoadComments(");
    boolean first = true;

    sb.append("error:");
    if (this.error == null) {
      sb.append("null");
    } else {
      sb.append(this.error);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("senderContextID:");
    sb.append(this.senderContextID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("senderMessageID:");
    sb.append(this.senderMessageID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("commentList:");
    if (this.commentList == null) {
      sb.append("null");
    } else {
      sb.append(this.commentList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (error != null) {
      error.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResLoadCommentsStandardSchemeFactory implements SchemeFactory {
    public ResLoadCommentsStandardScheme getScheme() {
      return new ResLoadCommentsStandardScheme();
    }
  }

  private static class ResLoadCommentsStandardScheme extends StandardScheme<ResLoadComments> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResLoadComments struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.error = new ErrorDesc();
              struct.error.read(iprot);
              struct.setErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SENDER_CONTEXT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.senderContextID = iprot.readI64();
              struct.setSenderContextIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SENDER_MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.senderMessageID = iprot.readI64();
              struct.setSenderMessageIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMENT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                struct.commentList = new ArrayList<MessageComment>(_list56.size);
                for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                {
                  MessageComment _elem58; // required
                  _elem58 = new MessageComment();
                  _elem58.read(iprot);
                  struct.commentList.add(_elem58);
                }
                iprot.readListEnd();
              }
              struct.setCommentListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResLoadComments struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.error != null) {
        oprot.writeFieldBegin(ERROR_FIELD_DESC);
        struct.error.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SENDER_CONTEXT_ID_FIELD_DESC);
      oprot.writeI64(struct.senderContextID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SENDER_MESSAGE_ID_FIELD_DESC);
      oprot.writeI64(struct.senderMessageID);
      oprot.writeFieldEnd();
      if (struct.commentList != null) {
        oprot.writeFieldBegin(COMMENT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.commentList.size()));
          for (MessageComment _iter59 : struct.commentList)
          {
            _iter59.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResLoadCommentsTupleSchemeFactory implements SchemeFactory {
    public ResLoadCommentsTupleScheme getScheme() {
      return new ResLoadCommentsTupleScheme();
    }
  }

  private static class ResLoadCommentsTupleScheme extends TupleScheme<ResLoadComments> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResLoadComments struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetError()) {
        optionals.set(0);
      }
      if (struct.isSetSenderContextID()) {
        optionals.set(1);
      }
      if (struct.isSetSenderMessageID()) {
        optionals.set(2);
      }
      if (struct.isSetCommentList()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetError()) {
        struct.error.write(oprot);
      }
      if (struct.isSetSenderContextID()) {
        oprot.writeI64(struct.senderContextID);
      }
      if (struct.isSetSenderMessageID()) {
        oprot.writeI64(struct.senderMessageID);
      }
      if (struct.isSetCommentList()) {
        {
          oprot.writeI32(struct.commentList.size());
          for (MessageComment _iter60 : struct.commentList)
          {
            _iter60.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResLoadComments struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.error = new ErrorDesc();
        struct.error.read(iprot);
        struct.setErrorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.senderContextID = iprot.readI64();
        struct.setSenderContextIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.senderMessageID = iprot.readI64();
        struct.setSenderMessageIDIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.commentList = new ArrayList<MessageComment>(_list61.size);
          for (int _i62 = 0; _i62 < _list61.size; ++_i62)
          {
            MessageComment _elem63; // required
            _elem63 = new MessageComment();
            _elem63.read(iprot);
            struct.commentList.add(_elem63);
          }
        }
        struct.setCommentListIsSet(true);
      }
    }
  }

}

