/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thxsoft.vds.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ContextMessage implements org.apache.thrift.TBase<ContextMessage, ContextMessage._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ContextMessage");

  private static final org.apache.thrift.protocol.TField MESSAGE_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("messageContent", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageID", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField COMMENT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("commentCount", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField LIKE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("likeCount", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField DISLIKE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("dislikeCount", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ContextMessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ContextMessageTupleSchemeFactory());
  }

  public ContextMessageContent messageContent; // required
  public long messageID; // required
  public long commentCount; // required
  public long likeCount; // required
  public long dislikeCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MESSAGE_CONTENT((short)1, "messageContent"),
    MESSAGE_ID((short)2, "messageID"),
    COMMENT_COUNT((short)3, "commentCount"),
    LIKE_COUNT((short)4, "likeCount"),
    DISLIKE_COUNT((short)5, "dislikeCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MESSAGE_CONTENT
          return MESSAGE_CONTENT;
        case 2: // MESSAGE_ID
          return MESSAGE_ID;
        case 3: // COMMENT_COUNT
          return COMMENT_COUNT;
        case 4: // LIKE_COUNT
          return LIKE_COUNT;
        case 5: // DISLIKE_COUNT
          return DISLIKE_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MESSAGEID_ISSET_ID = 0;
  private static final int __COMMENTCOUNT_ISSET_ID = 1;
  private static final int __LIKECOUNT_ISSET_ID = 2;
  private static final int __DISLIKECOUNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MESSAGE_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("messageContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContextMessageContent.class)));
    tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "MessageID")));
    tmpMap.put(_Fields.COMMENT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("commentCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "VoteCount")));
    tmpMap.put(_Fields.LIKE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("likeCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "VoteCount")));
    tmpMap.put(_Fields.DISLIKE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("dislikeCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "VoteCount")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ContextMessage.class, metaDataMap);
  }

  public ContextMessage() {
  }

  public ContextMessage(
    ContextMessageContent messageContent,
    long messageID,
    long commentCount,
    long likeCount,
    long dislikeCount)
  {
    this();
    this.messageContent = messageContent;
    this.messageID = messageID;
    setMessageIDIsSet(true);
    this.commentCount = commentCount;
    setCommentCountIsSet(true);
    this.likeCount = likeCount;
    setLikeCountIsSet(true);
    this.dislikeCount = dislikeCount;
    setDislikeCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ContextMessage(ContextMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMessageContent()) {
      this.messageContent = new ContextMessageContent(other.messageContent);
    }
    this.messageID = other.messageID;
    this.commentCount = other.commentCount;
    this.likeCount = other.likeCount;
    this.dislikeCount = other.dislikeCount;
  }

  public ContextMessage deepCopy() {
    return new ContextMessage(this);
  }

  @Override
  public void clear() {
    this.messageContent = null;
    setMessageIDIsSet(false);
    this.messageID = 0;
    setCommentCountIsSet(false);
    this.commentCount = 0;
    setLikeCountIsSet(false);
    this.likeCount = 0;
    setDislikeCountIsSet(false);
    this.dislikeCount = 0;
  }

  public ContextMessageContent getMessageContent() {
    return this.messageContent;
  }

  public ContextMessage setMessageContent(ContextMessageContent messageContent) {
    this.messageContent = messageContent;
    return this;
  }

  public void unsetMessageContent() {
    this.messageContent = null;
  }

  /** Returns true if field messageContent is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageContent() {
    return this.messageContent != null;
  }

  public void setMessageContentIsSet(boolean value) {
    if (!value) {
      this.messageContent = null;
    }
  }

  public long getMessageID() {
    return this.messageID;
  }

  public ContextMessage setMessageID(long messageID) {
    this.messageID = messageID;
    setMessageIDIsSet(true);
    return this;
  }

  public void unsetMessageID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGEID_ISSET_ID);
  }

  /** Returns true if field messageID is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageID() {
    return EncodingUtils.testBit(__isset_bitfield, __MESSAGEID_ISSET_ID);
  }

  public void setMessageIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGEID_ISSET_ID, value);
  }

  public long getCommentCount() {
    return this.commentCount;
  }

  public ContextMessage setCommentCount(long commentCount) {
    this.commentCount = commentCount;
    setCommentCountIsSet(true);
    return this;
  }

  public void unsetCommentCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMENTCOUNT_ISSET_ID);
  }

  /** Returns true if field commentCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMENTCOUNT_ISSET_ID);
  }

  public void setCommentCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMENTCOUNT_ISSET_ID, value);
  }

  public long getLikeCount() {
    return this.likeCount;
  }

  public ContextMessage setLikeCount(long likeCount) {
    this.likeCount = likeCount;
    setLikeCountIsSet(true);
    return this;
  }

  public void unsetLikeCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIKECOUNT_ISSET_ID);
  }

  /** Returns true if field likeCount is set (has been assigned a value) and false otherwise */
  public boolean isSetLikeCount() {
    return EncodingUtils.testBit(__isset_bitfield, __LIKECOUNT_ISSET_ID);
  }

  public void setLikeCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIKECOUNT_ISSET_ID, value);
  }

  public long getDislikeCount() {
    return this.dislikeCount;
  }

  public ContextMessage setDislikeCount(long dislikeCount) {
    this.dislikeCount = dislikeCount;
    setDislikeCountIsSet(true);
    return this;
  }

  public void unsetDislikeCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISLIKECOUNT_ISSET_ID);
  }

  /** Returns true if field dislikeCount is set (has been assigned a value) and false otherwise */
  public boolean isSetDislikeCount() {
    return EncodingUtils.testBit(__isset_bitfield, __DISLIKECOUNT_ISSET_ID);
  }

  public void setDislikeCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISLIKECOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MESSAGE_CONTENT:
      if (value == null) {
        unsetMessageContent();
      } else {
        setMessageContent((ContextMessageContent)value);
      }
      break;

    case MESSAGE_ID:
      if (value == null) {
        unsetMessageID();
      } else {
        setMessageID((Long)value);
      }
      break;

    case COMMENT_COUNT:
      if (value == null) {
        unsetCommentCount();
      } else {
        setCommentCount((Long)value);
      }
      break;

    case LIKE_COUNT:
      if (value == null) {
        unsetLikeCount();
      } else {
        setLikeCount((Long)value);
      }
      break;

    case DISLIKE_COUNT:
      if (value == null) {
        unsetDislikeCount();
      } else {
        setDislikeCount((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MESSAGE_CONTENT:
      return getMessageContent();

    case MESSAGE_ID:
      return Long.valueOf(getMessageID());

    case COMMENT_COUNT:
      return Long.valueOf(getCommentCount());

    case LIKE_COUNT:
      return Long.valueOf(getLikeCount());

    case DISLIKE_COUNT:
      return Long.valueOf(getDislikeCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MESSAGE_CONTENT:
      return isSetMessageContent();
    case MESSAGE_ID:
      return isSetMessageID();
    case COMMENT_COUNT:
      return isSetCommentCount();
    case LIKE_COUNT:
      return isSetLikeCount();
    case DISLIKE_COUNT:
      return isSetDislikeCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ContextMessage)
      return this.equals((ContextMessage)that);
    return false;
  }

  public boolean equals(ContextMessage that) {
    if (that == null)
      return false;

    boolean this_present_messageContent = true && this.isSetMessageContent();
    boolean that_present_messageContent = true && that.isSetMessageContent();
    if (this_present_messageContent || that_present_messageContent) {
      if (!(this_present_messageContent && that_present_messageContent))
        return false;
      if (!this.messageContent.equals(that.messageContent))
        return false;
    }

    boolean this_present_messageID = true;
    boolean that_present_messageID = true;
    if (this_present_messageID || that_present_messageID) {
      if (!(this_present_messageID && that_present_messageID))
        return false;
      if (this.messageID != that.messageID)
        return false;
    }

    boolean this_present_commentCount = true;
    boolean that_present_commentCount = true;
    if (this_present_commentCount || that_present_commentCount) {
      if (!(this_present_commentCount && that_present_commentCount))
        return false;
      if (this.commentCount != that.commentCount)
        return false;
    }

    boolean this_present_likeCount = true;
    boolean that_present_likeCount = true;
    if (this_present_likeCount || that_present_likeCount) {
      if (!(this_present_likeCount && that_present_likeCount))
        return false;
      if (this.likeCount != that.likeCount)
        return false;
    }

    boolean this_present_dislikeCount = true;
    boolean that_present_dislikeCount = true;
    if (this_present_dislikeCount || that_present_dislikeCount) {
      if (!(this_present_dislikeCount && that_present_dislikeCount))
        return false;
      if (this.dislikeCount != that.dislikeCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ContextMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ContextMessage typedOther = (ContextMessage)other;

    lastComparison = Boolean.valueOf(isSetMessageContent()).compareTo(typedOther.isSetMessageContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageContent, typedOther.messageContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageID()).compareTo(typedOther.isSetMessageID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageID, typedOther.messageID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentCount()).compareTo(typedOther.isSetCommentCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentCount, typedOther.commentCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLikeCount()).compareTo(typedOther.isSetLikeCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLikeCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.likeCount, typedOther.likeCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDislikeCount()).compareTo(typedOther.isSetDislikeCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDislikeCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dislikeCount, typedOther.dislikeCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ContextMessage(");
    boolean first = true;

    sb.append("messageContent:");
    if (this.messageContent == null) {
      sb.append("null");
    } else {
      sb.append(this.messageContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageID:");
    sb.append(this.messageID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("commentCount:");
    sb.append(this.commentCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("likeCount:");
    sb.append(this.likeCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dislikeCount:");
    sb.append(this.dislikeCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (messageContent != null) {
      messageContent.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContextMessageStandardSchemeFactory implements SchemeFactory {
    public ContextMessageStandardScheme getScheme() {
      return new ContextMessageStandardScheme();
    }
  }

  private static class ContextMessageStandardScheme extends StandardScheme<ContextMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ContextMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MESSAGE_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.messageContent = new ContextMessageContent();
              struct.messageContent.read(iprot);
              struct.setMessageContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.messageID = iprot.readI64();
              struct.setMessageIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMENT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.commentCount = iprot.readI64();
              struct.setCommentCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIKE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.likeCount = iprot.readI64();
              struct.setLikeCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DISLIKE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dislikeCount = iprot.readI64();
              struct.setDislikeCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ContextMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.messageContent != null) {
        oprot.writeFieldBegin(MESSAGE_CONTENT_FIELD_DESC);
        struct.messageContent.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
      oprot.writeI64(struct.messageID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMMENT_COUNT_FIELD_DESC);
      oprot.writeI64(struct.commentCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIKE_COUNT_FIELD_DESC);
      oprot.writeI64(struct.likeCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISLIKE_COUNT_FIELD_DESC);
      oprot.writeI64(struct.dislikeCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContextMessageTupleSchemeFactory implements SchemeFactory {
    public ContextMessageTupleScheme getScheme() {
      return new ContextMessageTupleScheme();
    }
  }

  private static class ContextMessageTupleScheme extends TupleScheme<ContextMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ContextMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMessageContent()) {
        optionals.set(0);
      }
      if (struct.isSetMessageID()) {
        optionals.set(1);
      }
      if (struct.isSetCommentCount()) {
        optionals.set(2);
      }
      if (struct.isSetLikeCount()) {
        optionals.set(3);
      }
      if (struct.isSetDislikeCount()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetMessageContent()) {
        struct.messageContent.write(oprot);
      }
      if (struct.isSetMessageID()) {
        oprot.writeI64(struct.messageID);
      }
      if (struct.isSetCommentCount()) {
        oprot.writeI64(struct.commentCount);
      }
      if (struct.isSetLikeCount()) {
        oprot.writeI64(struct.likeCount);
      }
      if (struct.isSetDislikeCount()) {
        oprot.writeI64(struct.dislikeCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ContextMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.messageContent = new ContextMessageContent();
        struct.messageContent.read(iprot);
        struct.setMessageContentIsSet(true);
      }
      if (incoming.get(1)) {
        struct.messageID = iprot.readI64();
        struct.setMessageIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.commentCount = iprot.readI64();
        struct.setCommentCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.likeCount = iprot.readI64();
        struct.setLikeCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dislikeCount = iprot.readI64();
        struct.setDislikeCountIsSet(true);
      }
    }
  }

}

