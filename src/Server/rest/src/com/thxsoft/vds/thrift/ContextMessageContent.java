/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thxsoft.vds.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ContextMessageContent implements org.apache.thrift.TBase<ContextMessageContent, ContextMessageContent._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ContextMessageContent");

  private static final org.apache.thrift.protocol.TField SENDER_CONTEXT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("senderContextId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SENDER_MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("senderMessageId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SENDER_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("senderUID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SENT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("sentTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField MESSAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("messageType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ContextMessageContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ContextMessageContentTupleSchemeFactory());
  }

  public long senderContextId; // required
  public long senderMessageId; // required
  public String senderUID; // required
  public long sentTime; // required
  /**
   * 
   * @see MessageType
   */
  public MessageType messageType; // required
  public ByteBuffer message; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SENDER_CONTEXT_ID((short)1, "senderContextId"),
    SENDER_MESSAGE_ID((short)2, "senderMessageId"),
    SENDER_UID((short)3, "senderUID"),
    SENT_TIME((short)4, "sentTime"),
    /**
     * 
     * @see MessageType
     */
    MESSAGE_TYPE((short)5, "messageType"),
    MESSAGE((short)6, "message");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SENDER_CONTEXT_ID
          return SENDER_CONTEXT_ID;
        case 2: // SENDER_MESSAGE_ID
          return SENDER_MESSAGE_ID;
        case 3: // SENDER_UID
          return SENDER_UID;
        case 4: // SENT_TIME
          return SENT_TIME;
        case 5: // MESSAGE_TYPE
          return MESSAGE_TYPE;
        case 6: // MESSAGE
          return MESSAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SENDERCONTEXTID_ISSET_ID = 0;
  private static final int __SENDERMESSAGEID_ISSET_ID = 1;
  private static final int __SENTTIME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SENDER_CONTEXT_ID, new org.apache.thrift.meta_data.FieldMetaData("senderContextId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "ContextID")));
    tmpMap.put(_Fields.SENDER_MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("senderMessageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "MessageID")));
    tmpMap.put(_Fields.SENDER_UID, new org.apache.thrift.meta_data.FieldMetaData("senderUID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UID")));
    tmpMap.put(_Fields.SENT_TIME, new org.apache.thrift.meta_data.FieldMetaData("sentTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Timestamp")));
    tmpMap.put(_Fields.MESSAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("messageType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MessageType.class)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ContextMessageContent.class, metaDataMap);
  }

  public ContextMessageContent() {
  }

  public ContextMessageContent(
    long senderContextId,
    long senderMessageId,
    String senderUID,
    long sentTime,
    MessageType messageType,
    ByteBuffer message)
  {
    this();
    this.senderContextId = senderContextId;
    setSenderContextIdIsSet(true);
    this.senderMessageId = senderMessageId;
    setSenderMessageIdIsSet(true);
    this.senderUID = senderUID;
    this.sentTime = sentTime;
    setSentTimeIsSet(true);
    this.messageType = messageType;
    this.message = message;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ContextMessageContent(ContextMessageContent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.senderContextId = other.senderContextId;
    this.senderMessageId = other.senderMessageId;
    if (other.isSetSenderUID()) {
      this.senderUID = other.senderUID;
    }
    this.sentTime = other.sentTime;
    if (other.isSetMessageType()) {
      this.messageType = other.messageType;
    }
    if (other.isSetMessage()) {
      this.message = org.apache.thrift.TBaseHelper.copyBinary(other.message);
;
    }
  }

  public ContextMessageContent deepCopy() {
    return new ContextMessageContent(this);
  }

  @Override
  public void clear() {
    setSenderContextIdIsSet(false);
    this.senderContextId = 0;
    setSenderMessageIdIsSet(false);
    this.senderMessageId = 0;
    this.senderUID = null;
    setSentTimeIsSet(false);
    this.sentTime = 0;
    this.messageType = null;
    this.message = null;
  }

  public long getSenderContextId() {
    return this.senderContextId;
  }

  public ContextMessageContent setSenderContextId(long senderContextId) {
    this.senderContextId = senderContextId;
    setSenderContextIdIsSet(true);
    return this;
  }

  public void unsetSenderContextId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDERCONTEXTID_ISSET_ID);
  }

  /** Returns true if field senderContextId is set (has been assigned a value) and false otherwise */
  public boolean isSetSenderContextId() {
    return EncodingUtils.testBit(__isset_bitfield, __SENDERCONTEXTID_ISSET_ID);
  }

  public void setSenderContextIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDERCONTEXTID_ISSET_ID, value);
  }

  public long getSenderMessageId() {
    return this.senderMessageId;
  }

  public ContextMessageContent setSenderMessageId(long senderMessageId) {
    this.senderMessageId = senderMessageId;
    setSenderMessageIdIsSet(true);
    return this;
  }

  public void unsetSenderMessageId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDERMESSAGEID_ISSET_ID);
  }

  /** Returns true if field senderMessageId is set (has been assigned a value) and false otherwise */
  public boolean isSetSenderMessageId() {
    return EncodingUtils.testBit(__isset_bitfield, __SENDERMESSAGEID_ISSET_ID);
  }

  public void setSenderMessageIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDERMESSAGEID_ISSET_ID, value);
  }

  public String getSenderUID() {
    return this.senderUID;
  }

  public ContextMessageContent setSenderUID(String senderUID) {
    this.senderUID = senderUID;
    return this;
  }

  public void unsetSenderUID() {
    this.senderUID = null;
  }

  /** Returns true if field senderUID is set (has been assigned a value) and false otherwise */
  public boolean isSetSenderUID() {
    return this.senderUID != null;
  }

  public void setSenderUIDIsSet(boolean value) {
    if (!value) {
      this.senderUID = null;
    }
  }

  public long getSentTime() {
    return this.sentTime;
  }

  public ContextMessageContent setSentTime(long sentTime) {
    this.sentTime = sentTime;
    setSentTimeIsSet(true);
    return this;
  }

  public void unsetSentTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENTTIME_ISSET_ID);
  }

  /** Returns true if field sentTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSentTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SENTTIME_ISSET_ID);
  }

  public void setSentTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENTTIME_ISSET_ID, value);
  }

  /**
   * 
   * @see MessageType
   */
  public MessageType getMessageType() {
    return this.messageType;
  }

  /**
   * 
   * @see MessageType
   */
  public ContextMessageContent setMessageType(MessageType messageType) {
    this.messageType = messageType;
    return this;
  }

  public void unsetMessageType() {
    this.messageType = null;
  }

  /** Returns true if field messageType is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageType() {
    return this.messageType != null;
  }

  public void setMessageTypeIsSet(boolean value) {
    if (!value) {
      this.messageType = null;
    }
  }

  public byte[] getMessage() {
    setMessage(org.apache.thrift.TBaseHelper.rightSize(message));
    return message == null ? null : message.array();
  }

  public ByteBuffer bufferForMessage() {
    return message;
  }

  public ContextMessageContent setMessage(byte[] message) {
    setMessage(message == null ? (ByteBuffer)null : ByteBuffer.wrap(message));
    return this;
  }

  public ContextMessageContent setMessage(ByteBuffer message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SENDER_CONTEXT_ID:
      if (value == null) {
        unsetSenderContextId();
      } else {
        setSenderContextId((Long)value);
      }
      break;

    case SENDER_MESSAGE_ID:
      if (value == null) {
        unsetSenderMessageId();
      } else {
        setSenderMessageId((Long)value);
      }
      break;

    case SENDER_UID:
      if (value == null) {
        unsetSenderUID();
      } else {
        setSenderUID((String)value);
      }
      break;

    case SENT_TIME:
      if (value == null) {
        unsetSentTime();
      } else {
        setSentTime((Long)value);
      }
      break;

    case MESSAGE_TYPE:
      if (value == null) {
        unsetMessageType();
      } else {
        setMessageType((MessageType)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SENDER_CONTEXT_ID:
      return Long.valueOf(getSenderContextId());

    case SENDER_MESSAGE_ID:
      return Long.valueOf(getSenderMessageId());

    case SENDER_UID:
      return getSenderUID();

    case SENT_TIME:
      return Long.valueOf(getSentTime());

    case MESSAGE_TYPE:
      return getMessageType();

    case MESSAGE:
      return getMessage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SENDER_CONTEXT_ID:
      return isSetSenderContextId();
    case SENDER_MESSAGE_ID:
      return isSetSenderMessageId();
    case SENDER_UID:
      return isSetSenderUID();
    case SENT_TIME:
      return isSetSentTime();
    case MESSAGE_TYPE:
      return isSetMessageType();
    case MESSAGE:
      return isSetMessage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ContextMessageContent)
      return this.equals((ContextMessageContent)that);
    return false;
  }

  public boolean equals(ContextMessageContent that) {
    if (that == null)
      return false;

    boolean this_present_senderContextId = true;
    boolean that_present_senderContextId = true;
    if (this_present_senderContextId || that_present_senderContextId) {
      if (!(this_present_senderContextId && that_present_senderContextId))
        return false;
      if (this.senderContextId != that.senderContextId)
        return false;
    }

    boolean this_present_senderMessageId = true;
    boolean that_present_senderMessageId = true;
    if (this_present_senderMessageId || that_present_senderMessageId) {
      if (!(this_present_senderMessageId && that_present_senderMessageId))
        return false;
      if (this.senderMessageId != that.senderMessageId)
        return false;
    }

    boolean this_present_senderUID = true && this.isSetSenderUID();
    boolean that_present_senderUID = true && that.isSetSenderUID();
    if (this_present_senderUID || that_present_senderUID) {
      if (!(this_present_senderUID && that_present_senderUID))
        return false;
      if (!this.senderUID.equals(that.senderUID))
        return false;
    }

    boolean this_present_sentTime = true;
    boolean that_present_sentTime = true;
    if (this_present_sentTime || that_present_sentTime) {
      if (!(this_present_sentTime && that_present_sentTime))
        return false;
      if (this.sentTime != that.sentTime)
        return false;
    }

    boolean this_present_messageType = true && this.isSetMessageType();
    boolean that_present_messageType = true && that.isSetMessageType();
    if (this_present_messageType || that_present_messageType) {
      if (!(this_present_messageType && that_present_messageType))
        return false;
      if (!this.messageType.equals(that.messageType))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ContextMessageContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ContextMessageContent typedOther = (ContextMessageContent)other;

    lastComparison = Boolean.valueOf(isSetSenderContextId()).compareTo(typedOther.isSetSenderContextId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSenderContextId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.senderContextId, typedOther.senderContextId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSenderMessageId()).compareTo(typedOther.isSetSenderMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSenderMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.senderMessageId, typedOther.senderMessageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSenderUID()).compareTo(typedOther.isSetSenderUID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSenderUID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.senderUID, typedOther.senderUID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSentTime()).compareTo(typedOther.isSetSentTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSentTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sentTime, typedOther.sentTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageType()).compareTo(typedOther.isSetMessageType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageType, typedOther.messageType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ContextMessageContent(");
    boolean first = true;

    sb.append("senderContextId:");
    sb.append(this.senderContextId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("senderMessageId:");
    sb.append(this.senderMessageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("senderUID:");
    if (this.senderUID == null) {
      sb.append("null");
    } else {
      sb.append(this.senderUID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sentTime:");
    sb.append(this.sentTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageType:");
    if (this.messageType == null) {
      sb.append("null");
    } else {
      sb.append(this.messageType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.message, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContextMessageContentStandardSchemeFactory implements SchemeFactory {
    public ContextMessageContentStandardScheme getScheme() {
      return new ContextMessageContentStandardScheme();
    }
  }

  private static class ContextMessageContentStandardScheme extends StandardScheme<ContextMessageContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ContextMessageContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SENDER_CONTEXT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.senderContextId = iprot.readI64();
              struct.setSenderContextIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SENDER_MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.senderMessageId = iprot.readI64();
              struct.setSenderMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SENDER_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.senderUID = iprot.readString();
              struct.setSenderUIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SENT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sentTime = iprot.readI64();
              struct.setSentTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MESSAGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.messageType = MessageType.findByValue(iprot.readI32());
              struct.setMessageTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readBinary();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ContextMessageContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SENDER_CONTEXT_ID_FIELD_DESC);
      oprot.writeI64(struct.senderContextId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SENDER_MESSAGE_ID_FIELD_DESC);
      oprot.writeI64(struct.senderMessageId);
      oprot.writeFieldEnd();
      if (struct.senderUID != null) {
        oprot.writeFieldBegin(SENDER_UID_FIELD_DESC);
        oprot.writeString(struct.senderUID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SENT_TIME_FIELD_DESC);
      oprot.writeI64(struct.sentTime);
      oprot.writeFieldEnd();
      if (struct.messageType != null) {
        oprot.writeFieldBegin(MESSAGE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.messageType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeBinary(struct.message);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContextMessageContentTupleSchemeFactory implements SchemeFactory {
    public ContextMessageContentTupleScheme getScheme() {
      return new ContextMessageContentTupleScheme();
    }
  }

  private static class ContextMessageContentTupleScheme extends TupleScheme<ContextMessageContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ContextMessageContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSenderContextId()) {
        optionals.set(0);
      }
      if (struct.isSetSenderMessageId()) {
        optionals.set(1);
      }
      if (struct.isSetSenderUID()) {
        optionals.set(2);
      }
      if (struct.isSetSentTime()) {
        optionals.set(3);
      }
      if (struct.isSetMessageType()) {
        optionals.set(4);
      }
      if (struct.isSetMessage()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetSenderContextId()) {
        oprot.writeI64(struct.senderContextId);
      }
      if (struct.isSetSenderMessageId()) {
        oprot.writeI64(struct.senderMessageId);
      }
      if (struct.isSetSenderUID()) {
        oprot.writeString(struct.senderUID);
      }
      if (struct.isSetSentTime()) {
        oprot.writeI64(struct.sentTime);
      }
      if (struct.isSetMessageType()) {
        oprot.writeI32(struct.messageType.getValue());
      }
      if (struct.isSetMessage()) {
        oprot.writeBinary(struct.message);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ContextMessageContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.senderContextId = iprot.readI64();
        struct.setSenderContextIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.senderMessageId = iprot.readI64();
        struct.setSenderMessageIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.senderUID = iprot.readString();
        struct.setSenderUIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sentTime = iprot.readI64();
        struct.setSentTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.messageType = MessageType.findByValue(iprot.readI32());
        struct.setMessageTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.message = iprot.readBinary();
        struct.setMessageIsSet(true);
      }
    }
  }

}

