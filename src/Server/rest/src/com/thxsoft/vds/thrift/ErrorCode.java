/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thxsoft.vds.thrift;


import java.util.Map;
import java.util.HashMap;
import org.apache.thrift.TEnum;

public enum ErrorCode implements org.apache.thrift.TEnum {
  VKSuccess(0),
  VKErrorUnknown(1),
  VKErrorCancelled(2),
  VKErrorCommunicationsFailure(3),
  VKErrorUserDenied(4),
  VKErrorInvalidCredentials(5),
  VKErrorNotAuthenticated(6),
  VKErrorAuthenticationInProgress(7),
  VKErrorInvalidPlayer(8),
  VKErrorScoreNotSet(9),
  VKErrorParentalControlsBlocked(10),
  VKErrorPlayerStatusExceedsMaximumLength(11),
  VKErrorPlayerStatusInvalid(12),
  VKErrorMatchRequestInvalid(13),
  VKErrorUnderage(14),
  VKErrorGameUnrecognized(15),
  VKErrorNotSupported(16),
  VKErrorInvalidParameter(17),
  VKErrorUnexpectedConnection(18),
  VKErrorChallengeInvalid(19),
  VKErrorTurnBasedMatchDataTooLarge(20),
  VKErrorTurnBasedTooManySessions(21),
  VKErrorTurnBasedInvalidParticipant(22),
  VKErrorTurnBasedInvalidTurn(23),
  VKErrorTurnBasedInvalidState(24);

  private final int value;

  private ErrorCode(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static ErrorCode findByValue(int value) { 
    switch (value) {
      case 0:
        return VKSuccess;
      case 1:
        return VKErrorUnknown;
      case 2:
        return VKErrorCancelled;
      case 3:
        return VKErrorCommunicationsFailure;
      case 4:
        return VKErrorUserDenied;
      case 5:
        return VKErrorInvalidCredentials;
      case 6:
        return VKErrorNotAuthenticated;
      case 7:
        return VKErrorAuthenticationInProgress;
      case 8:
        return VKErrorInvalidPlayer;
      case 9:
        return VKErrorScoreNotSet;
      case 10:
        return VKErrorParentalControlsBlocked;
      case 11:
        return VKErrorPlayerStatusExceedsMaximumLength;
      case 12:
        return VKErrorPlayerStatusInvalid;
      case 13:
        return VKErrorMatchRequestInvalid;
      case 14:
        return VKErrorUnderage;
      case 15:
        return VKErrorGameUnrecognized;
      case 16:
        return VKErrorNotSupported;
      case 17:
        return VKErrorInvalidParameter;
      case 18:
        return VKErrorUnexpectedConnection;
      case 19:
        return VKErrorChallengeInvalid;
      case 20:
        return VKErrorTurnBasedMatchDataTooLarge;
      case 21:
        return VKErrorTurnBasedTooManySessions;
      case 22:
        return VKErrorTurnBasedInvalidParticipant;
      case 23:
        return VKErrorTurnBasedInvalidTurn;
      case 24:
        return VKErrorTurnBasedInvalidState;
      default:
        return null;
    }
  }
}
